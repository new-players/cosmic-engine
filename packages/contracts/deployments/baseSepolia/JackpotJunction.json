{
  "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blocksToAct",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "costToRoll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "costToReroll",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DeadlineExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valuesLength",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC1155MissingApprovalForAll",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        }
      ],
      "name": "InsufficientItems",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        }
      ],
      "name": "InvalidItem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RollInProgress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WaitForTick",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Award",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "Roll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemType",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "terrainType",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        }
      ],
      "name": "TierUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BlocksToAct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CostToReroll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CostToRoll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "CurrentTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "EquippedBeasts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "EquippedBody",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "EquippedCover",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "EquippedWheels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ImprovedOutcomesCumulativeMass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "LastRollBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "UnmodifiedOutcomesCumulativeMass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accept",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "poolIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numOutputs",
          "type": "uint256"
        }
      ],
      "name": "craft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newPoolID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "small",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "medium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "large",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "poolIDs",
          "type": "uint256[]"
        }
      ],
      "name": "equip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        }
      ],
      "name": "genera",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "itemType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "terrainType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "degenerate",
          "type": "address"
        }
      ],
      "name": "hasBonus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "bonus",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "degenerate",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bonus",
          "type": "bool"
        }
      ],
      "name": "outcome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        }
      ],
      "name": "poolMetadata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entropy",
          "type": "uint256"
        }
      ],
      "name": "sampleImprovedOutcomesCumulativeMass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entropy",
          "type": "uint256"
        }
      ],
      "name": "sampleUnmodifiedOutcomeCumulativeMass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unequip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
  "receipt": {
    "to": null,
    "from": "0x0BC7220BbB82C10d88fb3469d5330B6522d7645D",
    "contractAddress": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
    "transactionIndex": 3,
    "gasUsed": "3037530",
    "logsBloom": "0x
    "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e",
    "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000004",
        "logIndex": 2,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000008",
        "logIndex": 3,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000c",
        "logIndex": 4,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000004",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000010",
        "logIndex": 5,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000005",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000014",
        "logIndex": 6,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000006",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000018",
        "logIndex": 7,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 8,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000005",
        "logIndex": 9,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000009",
        "logIndex": 10,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000d",
        "logIndex": 11,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000004",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000011",
        "logIndex": 12,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000005",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000015",
        "logIndex": 13,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000006",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000019",
        "logIndex": 14,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 15,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000006",
        "logIndex": 16,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000a",
        "logIndex": 17,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000e",
        "logIndex": 18,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000004",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000012",
        "logIndex": 19,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000005",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000016",
        "logIndex": 20,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000006",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000001a",
        "logIndex": 21,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000003",
        "logIndex": 22,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000007",
        "logIndex": 23,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000b",
        "logIndex": 24,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000f",
        "logIndex": 25,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000004",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000013",
        "logIndex": 26,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000005",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000017",
        "logIndex": 27,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11954572,
        "transactionHash": "0xb4d9d60a8ebe7807962feefedf70f9f5c2e5c656ddac873a12b2ca2e67f169f6",
        "address": "0x6Ae55CA4190589EC32335eA6077F286fee15A8CA",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000006",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000001b",
        "logIndex": 28,
        "blockHash": "0x16f2de38d2c646acab60e5496fe44558f9a7cff9c9ed5fcb6af0685f2312643e"
      }
    ],
    "blockNumber": 11954572,
    "cumulativeGasUsed": "3195552",
    "status": 1,
    "byzantium": true
  },
  "args": [
    40,
    100,
    25
  ],
  "numDeployments": 5,
  "solcInputHash": "a0c016662fcdf59fd732d43b7411e0bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocksToAct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"costToRoll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"costToReroll\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DeadlineExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"}],\"name\":\"InsufficientItems\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"}],\"name\":\"InvalidItem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RollInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WaitForTick\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Award\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"Roll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"terrainType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"}],\"name\":\"TierUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BlocksToAct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CostToReroll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CostToRoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CurrentTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"EquippedBeasts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"EquippedBody\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"EquippedCover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"EquippedWheels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ImprovedOutcomesCumulativeMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LastRollBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UnmodifiedOutcomesCumulativeMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accept\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutputs\",\"type\":\"uint256\"}],\"name\":\"craft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newPoolID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"small\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"medium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"large\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIDs\",\"type\":\"uint256[]\"}],\"name\":\"equip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"}],\"name\":\"genera\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terrainType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"degenerate\",\"type\":\"address\"}],\"name\":\"hasBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bonus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"degenerate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bonus\",\"type\":\"bool\"}],\"name\":\"outcome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"}],\"name\":\"poolMetadata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"}],\"name\":\"sampleImprovedOutcomesCumulativeMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"}],\"name\":\"sampleUnmodifiedOutcomeCumulativeMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unequip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Moonstream Engineering (engineering@moonstream.to)\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"accept()\":{\"returns\":{\"_0\":\"entropy The randomness that was used to determine the outcome of the player's last roll\",\"_1\":\"_outcome The outcome of the player's last roll - this is 0, 1, 2, 3, or 4 and represents an index in either `UnmodifiedOutcomesCumulativeMass` or `ImprovedOutcomesCumulativeMass` (depending on whether a bonus was applied)\",\"_2\":\"reward This represents a numerical parameter representing the reward that the player should receive. If the `_outcome` was `0`, this value is irrelevant and should be ignored. If the `_outcome` was `1`, signifying that the player will receive an item, this value is the ERC1155 `tokenID` of the item that will be transferred to the player if they accept the outcome, if the `_outcome` was `2`, `3`, or `4`, this value is the amount of native tokens that will be transferred to the player if they accept the outcome.\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"constructor\":{\"params\":{\"blocksToAct\":\"The number of blocks a player has to either reroll or accept the outcome of their current roll.\",\"costToReroll\":\"The cost in the finest denomination of the native token on the chain to reroll.\",\"costToRoll\":\"The cost in the finest denomination of the native token on the chain to roll.\"}},\"currentRewards()\":{\"returns\":{\"large\":\"The current large reward (in Wei)\",\"medium\":\"The current medium reward (in Wei)\",\"small\":\"The current small reward (in Wei)\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"outcome(address,bool)\":{\"params\":{\"bonus\":\"This boolean signifies whether the outcome should be sampled from the unmodified or the improved outcome distribution\",\"degenerate\":\"The address of the player\"},\"returns\":{\"_0\":\"entropy The randomness that was used to determine the outcome of the player's last roll\",\"_1\":\"_outcome The outcome of the player's last roll - this is 0, 1, 2, 3, or 4 and represents an index in either `UnmodifiedOutcomesCumulativeMass` or `ImprovedOutcomesCumulativeMass` (depending on whether a bonus was applied)\",\"_2\":\"reward This represents a numerical parameter representing the reward that the player should receive. If the `_outcome` was `0`, this value is irrelevant and should be ignored. If the `_outcome` was `1`, signifying that the player will receive an item, this value is the ERC1155 `tokenID` of the item that will be transferred to the player if they accept the outcome, if the `_outcome` was `2`, `3`, or `4`, this value is the amount of native tokens that will be transferred to the player if they accept the outcome.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"}},\"title\":\"Jackpot Junction game contract\",\"version\":1},\"userdoc\":{\"errors\":{\"DeadlineExceeded()\":[{\"notice\":\"Signifies that the player is no longer able to act because too many blocks elapsed since their last action.\"}],\"InsufficientItems(uint256)\":[{\"notice\":\"Signifies that the player does not have enough items in their possession to perform an action.\"}],\"InsufficientValue()\":[{\"notice\":\"Signifies that the player has not provided enough value to perform the action.\"}],\"InvalidItem(uint256)\":[{\"notice\":\"Signifies that the player attempted to use an invalid item to perform a certain action.\"}],\"RollInProgress()\":[{\"notice\":\"Signifies that a player cannot take an action that requires them to be out of a roll because it is too soon since they rolled. This error is raised when a player tries to equip or unequip items while they are in the middle of a roll.\"}],\"WaitForTick()\":[{\"notice\":\"This error is raised to signify that the player needs to wait for at least one more block to elapse.\"}]},\"events\":{\"Award(address,uint256,uint256)\":{\"notice\":\"Fired when a player accepts the outcome of a roll.\"},\"Roll(address)\":{\"notice\":\"Fired when a player rolls (and rerolls).\"},\"TierUnlocked(uint256,uint256,uint256,uint256)\":{\"notice\":\"Fired when a new tier is unlocked for the givem itemType and terrainType. Specifies the tier and its pool ID.\"}},\"kind\":\"user\",\"methods\":{\"BlocksToAct()\":{\"notice\":\"How many blocks a player has to act (reroll/accept).\"},\"CostToReroll()\":{\"notice\":\"Cost (finest denomination of native token on the chain) to reroll.\"},\"CostToRoll()\":{\"notice\":\"Cost (finest denomination of native token on the chain) to roll.\"},\"CurrentTier(uint256,uint256)\":{\"notice\":\"Specifies the largest tier that has been unlocked for a given (itemType, terrainType) pair.Item types: 0 (wagon cover), 1 (wagon body), 2 (wagon wheel), 3 (beast)Terrain types: 0 (plains), 1 (forest), 2 (swamp), 3 (water), 4 (mountain), 5 (desert), 6 (ice)Encoding of ERC1155 pool IDs: tier*28 + terrainType*4 + itemTypeitemType => terrainType => tier\"},\"EquippedBeasts(address)\":{\"notice\":\"EquippedBeasts indicates the poolID of the beasts that are currently equipped by the given player.The mapping is address(player) => poolID + 1.The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\"},\"EquippedBody(address)\":{\"notice\":\"EquippedBody indicates the poolID of the body that is currently equipped by the given player.The mapping is address(player) => poolID + 1.The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\"},\"EquippedCover(address)\":{\"notice\":\"EquippedCover indicates the poolID of the cover that is currently equipped by the given player.The mapping is address(player) => poolID + 1.The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\"},\"EquippedWheels(address)\":{\"notice\":\"EquippedWheels indicates the poolID of the wheels that are currently equipped by the given player.The mapping is address(player) => poolID + 1.The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\"},\"ImprovedOutcomesCumulativeMass(uint256)\":{\"notice\":\"Cumulative mass function for the improved distribution over outcomes.\"},\"LastRollBlock(address)\":{\"notice\":\"The block number of the last roll/re-roll by each player.\"},\"UnmodifiedOutcomesCumulativeMass(uint256)\":{\"notice\":\"Cumulative mass function for the unmodified distribution over outcomes.\"},\"accept()\":{\"notice\":\"If a player calls this method at least one block after they last rolled and before their block deadline expires, it accepts the outcome of their last roll and transfers the corresponding reward to their account.\"},\"constructor\":{\"notice\":\"Creates a JackpotJunction game contract.\"},\"currentRewards()\":{\"notice\":\"Returns the current small, medium, and large rewards based on the game contract's native token balance.\"},\"genera(uint256)\":{\"notice\":\"Returns the itemType, terrainType, and tier of a given pool ID.\"},\"hasBonus(address)\":{\"notice\":\"Returns true if the given player currently has a bonus applied to them from their equipped items and false otherwise.\"},\"outcome(address,bool)\":{\"notice\":\"If `outcome` is called at least one block after the player last rolled and before the players block deadline expires, it shows the outcome of the player's last roll.\"},\"roll()\":{\"notice\":\"Rolls or rerolls for the `msg.sender`, depending on whether or not whether `BlocksToAct` blocks have elapsed since their last roll. If that number of blocks has elapsed, then the player is rolling and must pay `CostToRoll`. Otherwise, the player is rerolling and must be `CostToReroll`.\"},\"sampleImprovedOutcomesCumulativeMass(uint256)\":{\"notice\":\"Samples from bonus distribution over outcomes.\"},\"sampleUnmodifiedOutcomeCumulativeMass(uint256)\":{\"notice\":\"Samples from unmodified distribution over outcomes.\"}},\"notice\":\"This is the game contract for The Degen Trail: Jackpot Junction, a game in world of The Degen Trail.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/JackpotJunction.sol\":\"JackpotJunction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC20 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\r\\n */\\r\\ninterface IERC20Errors {\\r\\n    /**\\r\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param balance Current balance for the interacting account.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     */\\r\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC20InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC20InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\r\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     */\\r\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC20InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\r\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC20InvalidSpender(address spender);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC721 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\r\\n */\\r\\ninterface IERC721Errors {\\r\\n    /**\\r\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\r\\n     * Used in balance queries.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC721InvalidOwner(address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC721NonexistentToken(uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC721InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC721InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC721InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC721InvalidOperator(address operator);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC1155 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\r\\n */\\r\\ninterface IERC1155Errors {\\r\\n    /**\\r\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param balance Current balance for the interacting account.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC1155InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC1155InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC1155InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC1155InvalidOperator(address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\r\\n     * Used in batch transfers.\\r\\n     * @param idsLength Length of the array of token identifiers\\r\\n     * @param valuesLength Length of the array of token amounts\\r\\n     */\\r\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\r\\n}\\r\\n\",\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\r\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\r\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\r\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\r\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\r\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\r\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the basic standard multi-token.\\r\\n * See https://eips.ethereum.org/EIPS/eip-1155\\r\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\r\\n */\\r\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\r\\n    using Arrays for uint256[];\\r\\n    using Arrays for address[];\\r\\n\\r\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\r\\n\\r\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\r\\n\\r\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\r\\n    string private _uri;\\r\\n\\r\\n    /**\\r\\n     * @dev See {_setURI}.\\r\\n     */\\r\\n    constructor(string memory uri_) {\\r\\n        _setURI(uri_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC1155).interfaceId ||\\r\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155MetadataURI-uri}.\\r\\n     *\\r\\n     * This implementation returns the same URI for *all* token types. It relies\\r\\n     * on the token type ID substitution mechanism\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\r\\n     *\\r\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\r\\n     * actual token type ID.\\r\\n     */\\r\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\r\\n        return _uri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\r\\n        return _balances[id][account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-balanceOfBatch}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `accounts` and `ids` must have the same length.\\r\\n     */\\r\\n    function balanceOfBatch(\\r\\n        address[] memory accounts,\\r\\n        uint256[] memory ids\\r\\n    ) public view virtual returns (uint256[] memory) {\\r\\n        if (accounts.length != ids.length) {\\r\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\r\\n        }\\r\\n\\r\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\r\\n\\r\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\r\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\r\\n        }\\r\\n\\r\\n        return batchBalances;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\r\\n        _setApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\r\\n        return _operatorApprovals[account][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\r\\n        address sender = _msgSender();\\r\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\r\\n            revert ERC1155MissingApprovalForAll(sender, from);\\r\\n        }\\r\\n        _safeTransferFrom(from, to, id, value, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\r\\n     */\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values,\\r\\n        bytes memory data\\r\\n    ) public virtual {\\r\\n        address sender = _msgSender();\\r\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\r\\n            revert ERC1155MissingApprovalForAll(sender, from);\\r\\n        }\\r\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\r\\n     * (or `to`) is the zero address.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\r\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\r\\n     * - `ids` and `values` must have the same length.\\r\\n     *\\r\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\r\\n     */\\r\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\r\\n        if (ids.length != values.length) {\\r\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\r\\n        }\\r\\n\\r\\n        address operator = _msgSender();\\r\\n\\r\\n        for (uint256 i = 0; i < ids.length; ++i) {\\r\\n            uint256 id = ids.unsafeMemoryAccess(i);\\r\\n            uint256 value = values.unsafeMemoryAccess(i);\\r\\n\\r\\n            if (from != address(0)) {\\r\\n                uint256 fromBalance = _balances[id][from];\\r\\n                if (fromBalance < value) {\\r\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\r\\n                }\\r\\n                unchecked {\\r\\n                    // Overflow not possible: value <= fromBalance\\r\\n                    _balances[id][from] = fromBalance - value;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (to != address(0)) {\\r\\n                _balances[id][to] += value;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (ids.length == 1) {\\r\\n            uint256 id = ids.unsafeMemoryAccess(0);\\r\\n            uint256 value = values.unsafeMemoryAccess(0);\\r\\n            emit TransferSingle(operator, from, to, id, value);\\r\\n        } else {\\r\\n            emit TransferBatch(operator, from, to, ids, values);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\r\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\r\\n     * contains code (eg. is a smart contract at the moment of execution).\\r\\n     *\\r\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\r\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\r\\n     * overriding {_update} instead.\\r\\n     */\\r\\n    function _updateWithAcceptanceCheck(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _update(from, to, ids, values);\\r\\n        if (to != address(0)) {\\r\\n            address operator = _msgSender();\\r\\n            if (ids.length == 1) {\\r\\n                uint256 id = ids.unsafeMemoryAccess(0);\\r\\n                uint256 value = values.unsafeMemoryAccess(0);\\r\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\r\\n            } else {\\r\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\r\\n        if (to == address(0)) {\\r\\n            revert ERC1155InvalidReceiver(address(0));\\r\\n        }\\r\\n        if (from == address(0)) {\\r\\n            revert ERC1155InvalidSender(address(0));\\r\\n        }\\r\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\r\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     * - `ids` and `values` must have the same length.\\r\\n     */\\r\\n    function _safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values,\\r\\n        bytes memory data\\r\\n    ) internal {\\r\\n        if (to == address(0)) {\\r\\n            revert ERC1155InvalidReceiver(address(0));\\r\\n        }\\r\\n        if (from == address(0)) {\\r\\n            revert ERC1155InvalidSender(address(0));\\r\\n        }\\r\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\r\\n     * substitution mechanism\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\r\\n     *\\r\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\r\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\r\\n     * clients with the token type ID.\\r\\n     *\\r\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\r\\n     * interpreted by clients as\\r\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\r\\n     * for token type ID 0x4cce0.\\r\\n     *\\r\\n     * See {uri}.\\r\\n     *\\r\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\r\\n     * this function emits no events.\\r\\n     */\\r\\n    function _setURI(string memory newuri) internal virtual {\\r\\n        _uri = newuri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\r\\n        if (to == address(0)) {\\r\\n            revert ERC1155InvalidReceiver(address(0));\\r\\n        }\\r\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\r\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `values` must have the same length.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\r\\n        if (to == address(0)) {\\r\\n            revert ERC1155InvalidReceiver(address(0));\\r\\n        }\\r\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\r\\n     */\\r\\n    function _burn(address from, uint256 id, uint256 value) internal {\\r\\n        if (from == address(0)) {\\r\\n            revert ERC1155InvalidSender(address(0));\\r\\n        }\\r\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\r\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\r\\n     * - `ids` and `values` must have the same length.\\r\\n     */\\r\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\r\\n        if (from == address(0)) {\\r\\n            revert ERC1155InvalidSender(address(0));\\r\\n        }\\r\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `operator` cannot be the zero address.\\r\\n     */\\r\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\r\\n        if (operator == address(0)) {\\r\\n            revert ERC1155InvalidOperator(address(0));\\r\\n        }\\r\\n        _operatorApprovals[owner][operator] = approved;\\r\\n        emit ApprovalForAll(owner, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\r\\n     * if it contains code at the moment of execution.\\r\\n     */\\r\\n    function _doSafeTransferAcceptanceCheck(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes memory data\\r\\n    ) private {\\r\\n        if (to.code.length > 0) {\\r\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\r\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\r\\n                    // Tokens rejected\\r\\n                    revert ERC1155InvalidReceiver(to);\\r\\n                }\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    // non-ERC1155Receiver implementer\\r\\n                    revert ERC1155InvalidReceiver(to);\\r\\n                } else {\\r\\n                    /// @solidity memory-safe-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\r\\n     * if it contains code at the moment of execution.\\r\\n     */\\r\\n    function _doSafeBatchTransferAcceptanceCheck(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values,\\r\\n        bytes memory data\\r\\n    ) private {\\r\\n        if (to.code.length > 0) {\\r\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\r\\n                bytes4 response\\r\\n            ) {\\r\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\r\\n                    // Tokens rejected\\r\\n                    revert ERC1155InvalidReceiver(to);\\r\\n                }\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    // non-ERC1155Receiver implementer\\r\\n                    revert ERC1155InvalidReceiver(to);\\r\\n                } else {\\r\\n                    /// @solidity memory-safe-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\r\\n     */\\r\\n    function _asSingletonArrays(\\r\\n        uint256 element1,\\r\\n        uint256 element2\\r\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Load the free memory pointer\\r\\n            array1 := mload(0x40)\\r\\n            // Set array length to 1\\r\\n            mstore(array1, 1)\\r\\n            // Store the single element at the next word after the length (where content starts)\\r\\n            mstore(add(array1, 0x20), element1)\\r\\n\\r\\n            // Repeat for next array locating it right after the first array\\r\\n            array2 := add(array1, 0x40)\\r\\n            mstore(array2, 1)\\r\\n            mstore(add(array2, 0x20), element2)\\r\\n\\r\\n            // Update the free memory pointer by pointing after the second array\\r\\n            mstore(0x40, add(array2, 0x40))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbfaaf8b62e22fba97ff2694d8db324e1004b52e7b458f6d9c3f875cece156218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\r\\n */\\r\\ninterface IERC1155 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\r\\n     */\\r\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\r\\n     * transfers.\\r\\n     */\\r\\n    event TransferBatch(\\r\\n        address indexed operator,\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256[] ids,\\r\\n        uint256[] values\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\r\\n     * `approved`.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\r\\n     *\\r\\n     * If an {URI} event was emitted for `id`, the standard\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\r\\n     * returned by {IERC1155MetadataURI-uri}.\\r\\n     */\\r\\n    event URI(string value, uint256 indexed id);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `accounts` and `ids` must have the same length.\\r\\n     */\\r\\n    function balanceOfBatch(\\r\\n        address[] calldata accounts,\\r\\n        uint256[] calldata ids\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `operator` cannot be the caller.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\r\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\r\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\r\\n     * reentrancy guards when interacting with untrusted contracts.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\r\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\r\\n     *\\r\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\r\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\r\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\r\\n     * reentrancy guards when interacting with untrusted contracts.\\r\\n     *\\r\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `values` must have the same length.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x68af97783de0c7a5910d38684da5c15484ead058b960bcaa709b711942f2ea0e\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface that must be implemented by smart contracts in order to receive\\r\\n * ERC-1155 token transfers.\\r\\n */\\r\\ninterface IERC1155Receiver is IERC165 {\\r\\n    /**\\r\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\r\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\r\\n     *\\r\\n     * NOTE: To accept the transfer, this must return\\r\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n     * (i.e. 0xf23a6e61, or its own function selector).\\r\\n     *\\r\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\r\\n     * @param from The address which previously owned the token\\r\\n     * @param id The ID of the token being transferred\\r\\n     * @param value The amount of tokens being transferred\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\r\\n     */\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    /**\\r\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\r\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\r\\n     * been updated.\\r\\n     *\\r\\n     * NOTE: To accept the transfer(s), this must return\\r\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n     * (i.e. 0xbc197c81, or its own function selector).\\r\\n     *\\r\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\r\\n     * @param from The address which previously owned the token\\r\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\r\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\r\\n     */\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xfeb66d3cf5ec1542d998c417a94a932478de3917da12e9d0a9fbd7a24f864675\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\r\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\r\\n */\\r\\ninterface IERC1155MetadataURI is IERC1155 {\\r\\n    /**\\r\\n     * @dev Returns the URI for token type `id`.\\r\\n     *\\r\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\r\\n     * clients with the actual token type ID.\\r\\n     */\\r\\n    function uri(uint256 id) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x7fdb08f8fcbae206ca2f66e1740fc79e71867df22f3ea9aa137e6ee9b88d832c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\r\\nimport {Math} from \\\"./math/Math.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to array types.\\r\\n */\\r\\nlibrary Arrays {\\r\\n    using StorageSlot for bytes32;\\r\\n\\r\\n    /**\\r\\n     * @dev Searches a sorted `array` and returns the first index that contains\\r\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\r\\n     * values in the array are strictly less than `element`), the array length is\\r\\n     * returned. Time complexity O(log n).\\r\\n     *\\r\\n     * `array` is expected to be sorted in ascending order, and to contain no\\r\\n     * repeated elements.\\r\\n     */\\r\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\r\\n        uint256 low = 0;\\r\\n        uint256 high = array.length;\\r\\n\\r\\n        if (high == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        while (low < high) {\\r\\n            uint256 mid = Math.average(low, high);\\r\\n\\r\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\r\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\r\\n            if (unsafeAccess(array, mid).value > element) {\\r\\n                high = mid;\\r\\n            } else {\\r\\n                low = mid + 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\r\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\r\\n            return low - 1;\\r\\n        } else {\\r\\n            return low;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\r\\n     *\\r\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\r\\n     */\\r\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\r\\n        bytes32 slot;\\r\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\r\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0, arr.slot)\\r\\n            slot := add(keccak256(0, 0x20), pos)\\r\\n        }\\r\\n        return slot.getAddressSlot();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\r\\n     *\\r\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\r\\n     */\\r\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\r\\n        bytes32 slot;\\r\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\r\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0, arr.slot)\\r\\n            slot := add(keccak256(0, 0x20), pos)\\r\\n        }\\r\\n        return slot.getBytes32Slot();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\r\\n     *\\r\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\r\\n     */\\r\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\r\\n        bytes32 slot;\\r\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\r\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0, arr.slot)\\r\\n            slot := add(keccak256(0, 0x20), pos)\\r\\n        }\\r\\n        return slot.getUint256Slot();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\r\\n     *\\r\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\r\\n     */\\r\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\r\\n        assembly {\\r\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\r\\n     *\\r\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\r\\n     */\\r\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\r\\n        assembly {\\r\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x22fef5c0a4893572799c77a339552d015ba0b022dc953e8df01c6540fdef4a33\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.2) (utils/Base64.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Provides a set of functions to operate with Base64 strings.\\r\\n */\\r\\nlibrary Base64 {\\r\\n    /**\\r\\n     * @dev Base64 Encoding/Decoding Table\\r\\n     */\\r\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\r\\n     */\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        /**\\r\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\r\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\r\\n         */\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // Loads the table into memory\\r\\n        string memory table = _TABLE;\\r\\n\\r\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\r\\n        // and split into 4 numbers of 6 bits.\\r\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\r\\n        // - `data.length + 2`  -> Round up\\r\\n        // - `/ 3`              -> Number of 3-bytes chunks\\r\\n        // - `4 *`              -> 4 characters for each chunk\\r\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // Prepare result pointer, jump over length\\r\\n            let resultPtr := add(result, 0x20)\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(data, mload(data))\\r\\n\\r\\n            // In some cases, the last iteration will read bytes after the end of the data. We cache the value, and\\r\\n            // set it to zero to make sure no dirty bytes are read in that section.\\r\\n            let afterPtr := add(endPtr, 0x20)\\r\\n            let afterCache := mload(afterPtr)\\r\\n            mstore(afterPtr, 0x00)\\r\\n\\r\\n            // Run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                // Advance 3 bytes\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // To write each character, shift the 3 byte (24 bits) chunk\\r\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\r\\n                // and apply logical AND with 0x3F to bitmask the least significant 6 bits.\\r\\n                // Use this as an index into the lookup table, mload an entire word\\r\\n                // so the desired character is in the least significant byte, and\\r\\n                // mstore8 this least significant byte into the result and continue.\\r\\n\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1) // Advance\\r\\n\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1) // Advance\\r\\n\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1) // Advance\\r\\n\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1) // Advance\\r\\n            }\\r\\n\\r\\n            // Reset the value that was cached\\r\\n            mstore(afterPtr, afterCache)\\r\\n\\r\\n            // When data `bytes` is not exactly 3 bytes long\\r\\n            // it is padded with `=` characters at the end\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore8(sub(resultPtr, 1), 0x3d)\\r\\n                mstore8(sub(resultPtr, 2), 0x3d)\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore8(sub(resultPtr, 1), 0x3d)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf7a9557ab8541f58a7180a3431a9918521a6166e92ae60c93235d50faa5355ff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3dcd533a3f709bda89bb8e649eb97aed96578e606f3796609544b1dcff975a0b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant NOT_ENTERED = 1;\\r\\n    uint256 private constant ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    /**\\r\\n     * @dev Unauthorized reentrant call.\\r\\n     */\\r\\n    error ReentrancyGuardReentrantCall();\\r\\n\\r\\n    constructor() {\\r\\n        _status = NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\r\\n        if (_status == ENTERED) {\\r\\n            revert ReentrancyGuardReentrantCall();\\r\\n        }\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\r\\n     * `nonReentrant` function in the call stack.\\r\\n     */\\r\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\r\\n        return _status == ENTERED;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x55c329217b55fc381f19a19007d6bcf279e3b58e9867d3e2b33f57fe8acb824b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC1967 implementation slot:\\r\\n * ```solidity\\r\\n * contract ERC1967 {\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(newImplementation.code.length > 0);\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n    struct AddressSlot {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct BooleanSlot {\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Slot {\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Uint256Slot {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct StringSlot {\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    struct BytesSlot {\\r\\n        bytes value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\r\\n     */\\r\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\r\\n     */\\r\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaf4f1cc7a79833f62322e257c405bcc1f5d76bd0d9eba10ab17d890ce2e4ec4d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {Math} from \\\"./math/Math.sol\\\";\\r\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev The `value` string doesn't fit in the specified `length`.\\r\\n     */\\r\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = Math.log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\r\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            return toHexString(value, Math.log256(value) + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        uint256 localValue = value;\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\r\\n            localValue >>= 4;\\r\\n        }\\r\\n        if (localValue != 0) {\\r\\n            revert StringsInsufficientHexLength(value, length);\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\r\\n     * representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the two strings are equal.\\r\\n     */\\r\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\r\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x53da138fbc253114bcb7593eff7a23bdffdfd1392137cd59e2dd90e423cb5f92\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5e93dc51cc1dd89d1ae31658302b93f7adef0eee525eafbc563195afc9345e39\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x97a5e5c6659add3f13418d219e705d6cc732ca3c31b62a64d66f92b159c5375d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Muldiv operation overflow.\\r\\n     */\\r\\n    error MathOverflowedMulDiv();\\r\\n\\r\\n    enum Rounding {\\r\\n        Floor, // Toward negative infinity\\r\\n        Ceil, // Toward positive infinity\\r\\n        Trunc, // Toward zero\\r\\n        Expand // Away from zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\r\\n     * of rounding towards zero.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (b == 0) {\\r\\n            // Guarantee the same behavior as in a regular Solidity division.\\r\\n            return a / b;\\r\\n        }\\r\\n\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\r\\n     * denominator == 0.\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\r\\n     * Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\r\\n                // The surrounding unchecked block does not change this fact.\\r\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            if (denominator <= prod1) {\\r\\n                revert MathOverflowedMulDiv();\\r\\n            }\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\r\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            uint256 twos = denominator & (0 - denominator);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\r\\n            // works in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\r\\n     * towards zero.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10 ** 64) {\\r\\n                value /= 10 ** 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10 ** 32) {\\r\\n                value /= 10 ** 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10 ** 16) {\\r\\n                value /= 10 ** 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10 ** 8) {\\r\\n                value /= 10 ** 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10 ** 4) {\\r\\n                value /= 10 ** 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10 ** 2) {\\r\\n                value /= 10 ** 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10 ** 1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\r\\n     */\\r\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\r\\n        return uint8(rounding) % 2 == 1;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard signed math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary SignedMath {\\r\\n    /**\\r\\n     * @dev Returns the largest of two signed numbers.\\r\\n     */\\r\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two signed numbers.\\r\\n     */\\r\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two signed numbers without overflow.\\r\\n     * The result is rounded towards zero.\\r\\n     */\\r\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Formula from the book \\\"Hacker's Delight\\\"\\r\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\r\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the absolute unsigned value of a signed value.\\r\\n     */\\r\\n    function abs(int256 n) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            // must be unchecked in order to support `n = type(int256).min`\\r\\n            return uint256(n >= 0 ? n : -n);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb\",\"license\":\"MIT\"},\"src/JackpotJunction.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport {ERC1155} from \\\"../lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"../lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport {Base64} from \\\"../lib/openzeppelin-contracts/contracts/utils/Base64.sol\\\";\\r\\nimport {Strings} from \\\"../lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\";\\r\\n\\r\\n/// @title Jackpot Junction game contract\\r\\n/// @author Moonstream Engineering (engineering@moonstream.to)\\r\\n///\\r\\n/// @notice This is the game contract for The Degen Trail: Jackpot Junction, a game in world of The Degen Trail.\\r\\ncontract JackpotJunction is ERC1155, ReentrancyGuard {\\r\\n    // Cumulative mass functions for probability distributions. Total mass for each distribution is 2^20 = 1048576.\\r\\n    /// Cumulative mass function for the unmodified distribution over outcomes.\\r\\n    uint256[5] public UnmodifiedOutcomesCumulativeMass = [\\r\\n        524288,\\r\\n        524288 + 408934,\\r\\n        524288 + 408934 + 104857,\\r\\n        524288 + 408934 + 104857 + 10487,\\r\\n        524288 + 408934 + 104857 + 10487 + 10\\r\\n    ];\\r\\n    /// Cumulative mass function for the improved distribution over outcomes.\\r\\n    uint256[5] public ImprovedOutcomesCumulativeMass = [\\r\\n        469283,\\r\\n        469283 + 408934,\\r\\n        469283 + 408934 + 154857,\\r\\n        469283 + 408934 + 154857 + 15487,\\r\\n        469283 + 408934 + 154857 + 15487 + 15\\r\\n    ];\\r\\n\\r\\n    /// How many blocks a player has to act (reroll/accept).\\r\\n    uint256 public BlocksToAct;\\r\\n\\r\\n    /// The block number of the last roll/re-roll by each player.\\r\\n    mapping(address => uint256) public LastRollBlock;\\r\\n\\r\\n    /// Cost (finest denomination of native token on the chain) to roll.\\r\\n    uint256 public CostToRoll;\\r\\n    /// Cost (finest denomination of native token on the chain) to reroll.\\r\\n    uint256 public CostToReroll;\\r\\n\\r\\n    /// Specifies the largest tier that has been unlocked for a given (itemType, terrainType) pair.\\r\\n    /// @notice Item types: 0 (wagon cover), 1 (wagon body), 2 (wagon wheel), 3 (beast)\\r\\n    /// @notice Terrain types: 0 (plains), 1 (forest), 2 (swamp), 3 (water), 4 (mountain), 5 (desert), 6 (ice)\\r\\n    /// @notice Encoding of ERC1155 pool IDs: tier*28 + terrainType*4 + itemType\\r\\n    /// @notice itemType => terrainType => tier\\r\\n    mapping(uint256 => mapping(uint256 => uint256)) public CurrentTier;\\r\\n\\r\\n    // NOTE: Only EquippedCover has a meaningful 0 value. Pool ID 0 is the tier 0 plain cover. This means that\\r\\n    // we need not add 1 to the pool ID for EquippedBody, EquippedWheels, and EquippedBeasts. This will save gas\\r\\n    // at the expense of making our code harder to understand. This is why I haven't implemented this optimization\\r\\n    // at the moment. Just recording the possibility of making it here.\\r\\n    /// EquippedCover indicates the poolID of the cover that is currently equipped by the given player.\\r\\n    /// @notice The mapping is address(player) => poolID + 1.\\r\\n    /// @notice The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\\r\\n    mapping(address => uint256) public EquippedCover;\\r\\n    /// EquippedBody indicates the poolID of the body that is currently equipped by the given player.\\r\\n    /// @notice The mapping is address(player) => poolID + 1.\\r\\n    /// @notice The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\\r\\n    mapping(address => uint256) public EquippedBody;\\r\\n    /// EquippedWheels indicates the poolID of the wheels that are currently equipped by the given player.\\r\\n    /// @notice The mapping is address(player) => poolID + 1.\\r\\n    /// @notice The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\\r\\n    mapping(address => uint256) public EquippedWheels;\\r\\n    /// EquippedBeasts indicates the poolID of the beasts that are currently equipped by the given player.\\r\\n    /// @notice The mapping is address(player) => poolID + 1.\\r\\n    /// @notice The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\\r\\n    mapping(address => uint256) public EquippedBeasts;\\r\\n\\r\\n    /// Fired when a new tier is unlocked for the givem itemType and terrainType. Specifies the tier and\\r\\n    /// its pool ID.\\r\\n    event TierUnlocked(uint256 indexed itemType, uint256 indexed terrainType, uint256 indexed tier, uint256 poolID);\\r\\n    /// Fired when a player rolls (and rerolls).\\r\\n    event Roll(address indexed player);\\r\\n    /// Fired when a player accepts the outcome of a roll.\\r\\n    event Award(address indexed player, uint256 indexed outcome, uint256 value);\\r\\n\\r\\n    /// Signifies that the player is no longer able to act because too many blocks elapsed since their\\r\\n    /// last action.\\r\\n    error DeadlineExceeded();\\r\\n    /// Signifies that a player cannot take an action that requires them to be out of a roll because it\\r\\n    /// is too soon since they rolled. This error is raised when a player tries to equip or unequip items\\r\\n    /// while they are in the middle of a roll.\\r\\n    error RollInProgress();\\r\\n    /// This error is raised to signify that the player needs to wait for at least one more block to elapse.\\r\\n    error WaitForTick();\\r\\n    /// Signifies that the player has not provided enough value to perform the action.\\r\\n    error InsufficientValue();\\r\\n    /// Signifies that the player attempted to use an invalid item to perform a certain action.\\r\\n    error InvalidItem(uint256 poolID);\\r\\n    /// Signifies that the player does not have enough items in their possession to perform an action.\\r\\n    error InsufficientItems(uint256 poolID);\\r\\n\\r\\n   function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\r\\n      return\\r\\n            interfaceID == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\\r\\n            interfaceID == 0xd9b67a26 ||     // ERC1155 interface ID\\r\\n            interfaceID == 0x4e2312e0 ||     // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")) ^ bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`).\\r\\n            interfaceID == 0xc46a2148;       // IJackpotJunction interface ID\\r\\n    }\\r\\n\\r\\n    /// Creates a JackpotJunction game contract.\\r\\n    /// @param blocksToAct The number of blocks a player has to either reroll or accept the outcome of their current roll.\\r\\n    /// @param costToRoll The cost in the finest denomination of the native token on the chain to roll.\\r\\n    /// @param costToReroll The cost in the finest denomination of the native token on the chain to reroll.\\r\\n    constructor(uint256 blocksToAct, uint256 costToRoll, uint256 costToReroll)\\r\\n        ERC1155(\\\"https://github.com/moonstream-to/degen-trail\\\")\\r\\n    {\\r\\n        BlocksToAct = blocksToAct;\\r\\n        CostToRoll = costToRoll;\\r\\n        CostToReroll = costToReroll;\\r\\n\\r\\n        for (uint256 i = 0; i < 4; i++) {\\r\\n            for (uint256 j = 0; j < 7; j++) {\\r\\n                emit TierUnlocked(i, j, 0, 4 * j + i);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Allows the contract to receive the native token on its blockchain.\\r\\n    receive() external payable {}\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256,\\r\\n        bytes memory\\r\\n    ) public virtual returns (bytes4) {\\r\\n        return 0xf23a6e61;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address,\\r\\n        address,\\r\\n        uint256[] memory,\\r\\n        uint256[] memory,\\r\\n        bytes memory\\r\\n    ) public virtual returns (bytes4) {\\r\\n        return 0xbc197c81;\\r\\n    }\\r\\n\\r\\n    function _enforceDeadline(address degenerate) internal view {\\r\\n        if (block.number > LastRollBlock[degenerate] + BlocksToAct) {\\r\\n            revert DeadlineExceeded();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _enforceNotRolling(address degenerate) internal view {\\r\\n        if (block.number <= LastRollBlock[degenerate] + BlocksToAct) {\\r\\n            revert RollInProgress();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Returns the itemType, terrainType, and tier of a given pool ID.\\r\\n    function genera(uint256 poolID) public pure returns (uint256 itemType, uint256 terrainType, uint256 tier) {\\r\\n        tier = poolID / 28;\\r\\n        terrainType = (poolID % 28) / 4;\\r\\n        itemType = poolID % 4;\\r\\n    }\\r\\n\\r\\n    /// Returns true if the given player currently has a bonus applied to them from their equipped items and false otherwise.\\r\\n    function hasBonus(address degenerate) public view returns (bool bonus) {\\r\\n        bonus = false;\\r\\n\\r\\n        uint256 wagonCover = EquippedCover[degenerate];\\r\\n        uint256 wagonBody = EquippedBody[degenerate];\\r\\n        uint256 wheels = EquippedWheels[degenerate];\\r\\n        uint256 beastTrain = EquippedBeasts[degenerate];\\r\\n\\r\\n        if (wagonCover != 0 && wagonBody != 0 && wheels != 0 && beastTrain != 0) {\\r\\n            // Decrement each equipped item by 1 to get its pool ID.\\r\\n            wagonCover--;\\r\\n            wagonBody--;\\r\\n            wheels--;\\r\\n            beastTrain--;\\r\\n\\r\\n            uint256 terrainType;\\r\\n\\r\\n            uint256 currentItemType;\\r\\n            uint256 currentTier;\\r\\n            uint256 currentTerrainType;\\r\\n\\r\\n            (currentItemType, currentTerrainType, currentTier) = genera(wagonCover);\\r\\n            if (CurrentTier[currentItemType][currentTerrainType] == currentTier) {\\r\\n                bonus = true;\\r\\n            }\\r\\n            terrainType = currentTerrainType;\\r\\n\\r\\n            if (bonus) {\\r\\n                (currentItemType, currentTerrainType, currentTier) = genera(wagonBody);\\r\\n                if (CurrentTier[currentItemType][currentTerrainType] != currentTier || currentTerrainType != terrainType) {\\r\\n                    bonus = false;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (bonus) {\\r\\n                (currentItemType, currentTerrainType, currentTier) = genera(wheels);\\r\\n                if (CurrentTier[currentItemType][currentTerrainType] != currentTier || currentTerrainType != terrainType) {\\r\\n                    bonus = false;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (bonus) {\\r\\n                (currentItemType, currentTerrainType, currentTier) = genera(beastTrain);\\r\\n                if (CurrentTier[currentItemType][currentTerrainType] != currentTier || currentTerrainType != terrainType) {\\r\\n                    bonus = false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Samples from unmodified distribution over outcomes.\\r\\n    function sampleUnmodifiedOutcomeCumulativeMass(uint256 entropy) public view returns (uint256) {\\r\\n        uint256 sample = entropy << 236 >> 236;\\r\\n        if (sample < UnmodifiedOutcomesCumulativeMass[0]) {\\r\\n            return 0;\\r\\n        } else if (sample < UnmodifiedOutcomesCumulativeMass[1]) {\\r\\n            return 1;\\r\\n        } else if (sample < UnmodifiedOutcomesCumulativeMass[2]) {\\r\\n            return 2;\\r\\n        } else if (sample < UnmodifiedOutcomesCumulativeMass[3]) {\\r\\n            return 3;\\r\\n        }\\r\\n        return 4;\\r\\n    }\\r\\n\\r\\n    /// Samples from bonus distribution over outcomes.\\r\\n    function sampleImprovedOutcomesCumulativeMass(uint256 entropy) public view returns (uint256) {\\r\\n        uint256 sample = entropy << 236 >> 236;\\r\\n        if (sample < ImprovedOutcomesCumulativeMass[0]) {\\r\\n            return 0;\\r\\n        } else if (sample < ImprovedOutcomesCumulativeMass[1]) {\\r\\n            return 1;\\r\\n        } else if (sample < ImprovedOutcomesCumulativeMass[2]) {\\r\\n            return 2;\\r\\n        } else if (sample < ImprovedOutcomesCumulativeMass[3]) {\\r\\n            return 3;\\r\\n        }\\r\\n        return 4;\\r\\n    }\\r\\n\\r\\n    /// Rolls or rerolls for the `msg.sender`, depending on whether or not whether `BlocksToAct` blocks\\r\\n    /// have elapsed since their last roll. If that number of blocks has elapsed, then the player is rolling\\r\\n    /// and must pay `CostToRoll`. Otherwise, the player is rerolling and must be `CostToReroll`.\\r\\n    function roll() external payable {\\r\\n        uint256 requiredFee = CostToRoll;\\r\\n        if (block.number <= LastRollBlock[msg.sender] + BlocksToAct) {\\r\\n            requiredFee = CostToReroll;\\r\\n        }\\r\\n\\r\\n        if (msg.value < requiredFee) {\\r\\n            revert InsufficientValue();\\r\\n        }\\r\\n\\r\\n        LastRollBlock[msg.sender] = block.number;\\r\\n\\r\\n        emit Roll(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _entropy(address degenerate) internal view virtual returns (uint256) {\\r\\n        return uint256(keccak256(abi.encode(blockhash(LastRollBlock[degenerate]), degenerate)));\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the current small, medium, and large rewards based on the game contract's native\\r\\n    /// token balance.\\r\\n    /// @return small The current small reward (in Wei)\\r\\n    /// @return medium The current medium reward (in Wei)\\r\\n    /// @return large The current large reward (in Wei)\\r\\n    function currentRewards() public view returns (uint256 small, uint256 medium, uint256 large) {\\r\\n        small = CostToRoll + (CostToRoll >> 1);\\r\\n        if (small > address(this).balance >> 6) {\\r\\n            small = address(this).balance >> 6;\\r\\n        }\\r\\n        medium = address(this).balance >> 6;\\r\\n        large = address(this).balance >> 1;\\r\\n    }\\r\\n\\r\\n    /// @notice If `outcome` is called at least one block after the player last rolled and before the players\\r\\n    /// block deadline expires, it shows the outcome of the player's last roll.\\r\\n    /// @param degenerate The address of the player\\r\\n    /// @param bonus This boolean signifies whether the outcome should be sampled from the unmodified or the improved outcome distribution\\r\\n    /// @return entropy The randomness that was used to determine the outcome of the player's last roll\\r\\n    /// @return _outcome The outcome of the player's last roll - this is 0, 1, 2, 3, or 4 and represents an index in either `UnmodifiedOutcomesCumulativeMass` or `ImprovedOutcomesCumulativeMass` (depending on whether a bonus was applied)\\r\\n    /// @return reward This represents a numerical parameter representing the reward that the player should receive. If the `_outcome` was `0`, this value is irrelevant and should be ignored. If the `_outcome` was `1`, signifying that the player will receive an item, this value is the ERC1155 `tokenID` of the item that will be transferred to the player if they accept the outcome, if the `_outcome` was `2`, `3`, or `4`, this value is the amount of native tokens that will be transferred to the player if they accept the outcome.\\r\\n    function outcome(address degenerate, bool bonus) public view returns (uint256, uint256, uint256) {\\r\\n        if (block.number <= LastRollBlock[degenerate]) {\\r\\n            revert WaitForTick();\\r\\n        }\\r\\n\\r\\n        _enforceDeadline(degenerate);\\r\\n\\r\\n        // entropy layout:\\r\\n        // |- 118 bits -|- 118 bits -|- 20 bits -|\\r\\n        //    item type  terrain type   outcome\\r\\n        uint256 entropy = _entropy(degenerate);\\r\\n\\r\\n        uint256 _outcome;\\r\\n        if (bonus) {\\r\\n            _outcome = sampleImprovedOutcomesCumulativeMass(entropy);\\r\\n        } else {\\r\\n            _outcome = sampleUnmodifiedOutcomeCumulativeMass(entropy);\\r\\n        }\\r\\n\\r\\n        uint256 value;\\r\\n\\r\\n        if (_outcome == 1) {\\r\\n            uint256 terrainType = (entropy << 118 >> 138) % 7;\\r\\n            uint256 itemType = (entropy >> 138) % 4;\\r\\n            value = 4 * terrainType + itemType;\\r\\n        } else if (_outcome == 2) {\\r\\n            value = CostToRoll + (CostToRoll >> 1);\\r\\n            if (value > address(this).balance >> 6) {\\r\\n                value = address(this).balance >> 6;\\r\\n            }\\r\\n        } else if (_outcome == 3) {\\r\\n            value = address(this).balance >> 6;\\r\\n        } else if (_outcome == 4) {\\r\\n            value = address(this).balance >> 1;\\r\\n        }\\r\\n\\r\\n        return (entropy, _outcome, value);\\r\\n    }\\r\\n\\r\\n    function _award(uint256 _outcome, uint256 value) internal {\\r\\n        if (_outcome == 1) {\\r\\n            _mint(msg.sender, value, 1, \\\"\\\");\\r\\n        } else if (_outcome == 2 || _outcome == 3 || _outcome == 4) {\\r\\n            payable(msg.sender).transfer(value);\\r\\n        }\\r\\n\\r\\n        emit Award(msg.sender, _outcome, value);\\r\\n    }\\r\\n\\r\\n    function _clearRoll() internal {\\r\\n        LastRollBlock[msg.sender] = 0;\\r\\n    }\\r\\n\\r\\n    /// If a player calls this method at least one block after they last rolled and before their block deadline expires,\\r\\n    /// it accepts the outcome of their last roll and transfers the corresponding reward to their account.\\r\\n    /// @return entropy The randomness that was used to determine the outcome of the player's last roll\\r\\n    /// @return _outcome The outcome of the player's last roll - this is 0, 1, 2, 3, or 4 and represents an index in either `UnmodifiedOutcomesCumulativeMass` or `ImprovedOutcomesCumulativeMass` (depending on whether a bonus was applied)\\r\\n    /// @return reward This represents a numerical parameter representing the reward that the player should receive. If the `_outcome` was `0`, this value is irrelevant and should be ignored. If the `_outcome` was `1`, signifying that the player will receive an item, this value is the ERC1155 `tokenID` of the item that will be transferred to the player if they accept the outcome, if the `_outcome` was `2`, `3`, or `4`, this value is the amount of native tokens that will be transferred to the player if they accept the outcome.\\r\\n    function accept() external nonReentrant returns (uint256, uint256, uint256) {\\r\\n        // The call to outcome() enforces the following constraints:\\r\\n        // - At least one block has passed after the player rolled.\\r\\n        // - The player last rolled at most BlocksToAct blocks ago.\\r\\n        (uint256 entropy, uint256 _outcome, uint256 value) = outcome(msg.sender, hasBonus(msg.sender));\\r\\n\\r\\n        _award(_outcome, value);\\r\\n        _clearRoll();\\r\\n        return (entropy, _outcome, value);\\r\\n    }\\r\\n\\r\\n    function equip(uint256[] calldata poolIDs) external nonReentrant {\\r\\n        _enforceNotRolling(msg.sender);\\r\\n\\r\\n        for (uint256 i = 0; i < poolIDs.length; i++) {\\r\\n            (uint256 itemType,,) = genera(poolIDs[i]);\\r\\n            if (itemType == 0) {\\r\\n                uint256 currentPoolID;\\r\\n                if (EquippedCover[msg.sender] != 0) {\\r\\n                    currentPoolID = EquippedCover[msg.sender] - 1;\\r\\n                    _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n                }\\r\\n                _safeTransferFrom(msg.sender, address(this), poolIDs[i], 1, \\\"\\\");\\r\\n                EquippedCover[msg.sender] = poolIDs[i] + 1;\\r\\n            } else if (itemType == 1) {\\r\\n                uint256 currentPoolID;\\r\\n                if (EquippedBody[msg.sender] != 0) {\\r\\n                    currentPoolID = EquippedBody[msg.sender] - 1;\\r\\n                    _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n                }\\r\\n                _safeTransferFrom(msg.sender, address(this), poolIDs[i], 1, \\\"\\\");\\r\\n                EquippedBody[msg.sender] = poolIDs[i] + 1;\\r\\n            } else if (itemType == 2) {\\r\\n                uint256 currentPoolID;\\r\\n                if (EquippedWheels[msg.sender] != 0) {\\r\\n                    currentPoolID = EquippedWheels[msg.sender] - 1;\\r\\n                    _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n                }\\r\\n                _safeTransferFrom(msg.sender, address(this), poolIDs[i], 1, \\\"\\\");\\r\\n                EquippedWheels[msg.sender] = poolIDs[i] + 1;\\r\\n            } else if (itemType == 3) {\\r\\n                uint256 currentPoolID;\\r\\n                if (EquippedBeasts[msg.sender] != 0) {\\r\\n                    currentPoolID = EquippedBeasts[msg.sender] - 1;\\r\\n                    _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n                }\\r\\n                _safeTransferFrom(msg.sender, address(this), poolIDs[i], 1, \\\"\\\");\\r\\n                EquippedBeasts[msg.sender] = poolIDs[i] + 1;\\r\\n            } else {\\r\\n                // If you end up in this branch, there's a bug in \\\"genera\\\".\\r\\n                revert InvalidItem(poolIDs[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function unequip() external nonReentrant {\\r\\n        _enforceNotRolling(msg.sender);\\r\\n\\r\\n        uint256 currentPoolID;\\r\\n        if (EquippedCover[msg.sender] != 0) {\\r\\n            currentPoolID = EquippedCover[msg.sender] - 1;\\r\\n            _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n            delete EquippedCover[msg.sender];\\r\\n        }\\r\\n\\r\\n        if (EquippedBody[msg.sender] != 0) {\\r\\n            currentPoolID = EquippedBody[msg.sender] - 1;\\r\\n            _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n            delete EquippedBody[msg.sender];\\r\\n        }\\r\\n\\r\\n        if (EquippedWheels[msg.sender] != 0) {\\r\\n            currentPoolID = EquippedWheels[msg.sender] - 1;\\r\\n            _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n            delete EquippedWheels[msg.sender];\\r\\n        }\\r\\n\\r\\n        if (EquippedBeasts[msg.sender] != 0) {\\r\\n            currentPoolID = EquippedBeasts[msg.sender] - 1;\\r\\n            _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n            delete EquippedBeasts[msg.sender];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function craft(uint256 poolID, uint256 numOutputs) external nonReentrant returns (uint256 newPoolID) {\\r\\n        if (balanceOf(msg.sender, poolID) < 2 * numOutputs) {\\r\\n            revert InsufficientItems(poolID);\\r\\n        }\\r\\n\\r\\n        newPoolID = poolID + 28;\\r\\n\\r\\n        _burn(msg.sender, poolID, 2 * numOutputs);\\r\\n        _mint(msg.sender, newPoolID, numOutputs, \\\"\\\");\\r\\n\\r\\n        (uint256 itemType, uint256 terrainType, uint256 tier) = genera(newPoolID);\\r\\n        if (CurrentTier[itemType][terrainType] < tier) {\\r\\n            CurrentTier[itemType][terrainType] = tier;\\r\\n            emit TierUnlocked(itemType, terrainType, tier, newPoolID);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function burn(uint256 poolID, uint256 amount) external {\\r\\n        _burn(msg.sender, poolID, amount);\\r\\n    }\\r\\n\\r\\n    function burnBatch(uint256[] memory poolIDs, uint256[] memory amounts) external {\\r\\n        _burnBatch(msg.sender, poolIDs, amounts);\\r\\n    }\\r\\n\\r\\n    function poolMetadata(uint256 poolID) public pure returns (bytes memory json) {\\r\\n        (uint256 itemType, uint256 terrainType, uint256 tier) = genera(poolID);\\r\\n        string memory name = string(abi.encodePacked(\\\"Tier \\\", Strings.toString(tier)));\\r\\n        string memory terrainTypeName;\\r\\n        string memory itemTypeName;\\r\\n        if (terrainType == 0) {\\r\\n            terrainTypeName = \\\"plains\\\";\\r\\n        } else if (terrainType == 1) {\\r\\n            terrainTypeName = \\\"forest\\\";\\r\\n        } else if (terrainType == 2) {\\r\\n            terrainTypeName = \\\"swamp\\\";\\r\\n        } else if (terrainType == 3) {\\r\\n            terrainTypeName = \\\"water\\\";\\r\\n        } else if (terrainType == 4) {\\r\\n            terrainTypeName = \\\"mountain\\\";\\r\\n        } else if (terrainType == 5) {\\r\\n            terrainTypeName = \\\"desert\\\";\\r\\n        } else if (terrainType == 6) {\\r\\n            terrainTypeName = \\\"ice\\\";\\r\\n        }\\r\\n\\r\\n        if (itemType == 0) {\\r\\n            itemTypeName = \\\"cover\\\";\\r\\n        } else if (itemType == 1) {\\r\\n            itemTypeName = \\\"body\\\";\\r\\n        } else if (itemType == 2) {\\r\\n            itemTypeName = \\\"wheels\\\";\\r\\n        } else if (itemType == 3) {\\r\\n            itemTypeName = \\\"beasts\\\";\\r\\n        }\\r\\n\\r\\n        name = string(abi.encodePacked(name, unicode\\\" \\\", terrainTypeName, unicode\\\" \\\", itemTypeName));\\r\\n\\r\\n        json = abi.encodePacked(\\r\\n            '{\\\"name\\\": \\\"',\\r\\n            name,\\r\\n            '\\\", \\\"decimals\\\": 0, \\\"attributes\\\": [{\\\"trait_type\\\": \\\"tier\\\", \\\"display_type\\\": \\\"number\\\", \\\"value\\\": \\\"',\\r\\n            Strings.toString(tier),\\r\\n            '\\\"}, {\\\"trait_type\\\": \\\"terrain_type\\\", \\\"display_type\\\": \\\"string\\\", \\\"value\\\": \\\"',\\r\\n            terrainTypeName,\\r\\n            '\\\"}, {\\\"trait_type\\\": \\\"item_type\\\", \\\"display_type\\\": \\\"string\\\", \\\"value\\\": \\\"',\\r\\n            itemTypeName,\\r\\n            '\\\"}]}'\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function uri(uint256 poolID) public pure override returns (string memory) {\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(poolMetadata(poolID))));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x86373abac73731ffc3134932c151aa0cb0d6da6895bf2b51caca63847c8b2533\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x610120604052620800006080908152620e3d6660a052620fd6ff60c052620ffff660e05262100000610100526200003b9060049060056200019e565b506040805160a081018252620729238152620d66896020820152620fc37291810191909152620ffff16060820152621000006080820152620000829060099060056200019e565b503480156200009057600080fd5b50604051620031d8380380620031d8833981016040819052620000b391620001ff565b6040518060600160405280602c8152602001620031ac602c9139620000d8816200018c565b506001600355600e8390556010829055601181905560005b6004811015620001825760005b60078110156200016c57600081837f4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629816200013a84600462000244565b62000146919062000264565b60405190815260200160405180910390a48062000163816200027a565b915050620000fd565b508062000179816200027a565b915050620000f0565b5050505062000407565b60026200019a82826200033b565b5050565b8260058101928215620001d6579160200282015b82811115620001d6578251829062ffffff16905591602001919060010190620001b2565b50620001e4929150620001e8565b5090565b5b80821115620001e45760008155600101620001e9565b6000806000606084860312156200021557600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176200025e576200025e6200022e565b92915050565b808201808211156200025e576200025e6200022e565b6000600182016200028f576200028f6200022e565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002c157607f821691505b602082108103620002e257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033657600081815260208120601f850160051c81016020861015620003115750805b601f850160051c820191505b8181101562000332578281556001016200031d565b5050505b505050565b81516001600160401b0381111562000357576200035762000296565b6200036f81620003688454620002ac565b84620002e8565b602080601f831160018114620003a757600084156200038e5750858301515b600019600386901b1c1916600185901b17855562000332565b600085815260208120601f198616915b82811015620003d857888601518255948401946001909101908401620003b7565b5085821015620003f75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612d9580620004176000396000f3fe6080604052600436106102075760003560e01c80638534fb4611610118578063be59cce3116100a0578063e32d56901161006f578063e32d569014610647578063e985e9c514610674578063ecefbad814610694578063f23a6e61146106b4578063f242432a146106e057600080fd5b8063be59cce3146105c4578063cd5e3c5d146105da578063cdf2f0ec146105e2578063dd88fa7f1461060f57600080fd5b8063b390c0ab116100e7578063b390c0ab14610514578063b870fe8014610534578063b8f905c81461054a578063b9c2edf71461056a578063bc197c811461057f57600080fd5b80638534fb4614610492578063901a7d53146104b25780639a0facc2146104c7578063a22cb465146104f457600080fd5b80632eb2c2d61161019b57806344dcd1431161016a57806344dcd143146103e25780634e1273f41461040f57806350b8aa921461043c5780636c08995d1461045257806383ca4b6f1461047257600080fd5b80632eb2c2d6146103625780633a134f78146103825780633a259e6a146103a2578063418145cf146103c257600080fd5b80630e89341c116101d75780630e89341c146102c557806318ce0a4b146102f25780632852b71c14610312578063289137a11461034257600080fd5b8062fdd58e14610213578063010c9b6e1461024657806301ffc9a71461027357806303f2f420146102a357600080fd5b3661020e57005b600080fd5b34801561021f57600080fd5b5061023361022e36600461231d565b610700565b6040519081526020015b60405180910390f35b34801561025257600080fd5b50610233610261366004612347565b60146020526000908152604090205481565b34801561027f57600080fd5b5061029361028e36600461237f565b610728565b604051901515815260200161023d565b3480156102af57600080fd5b506102c36102be36600461239c565b610791565b005b3480156102d157600080fd5b506102e56102e0366004612411565b610afa565b60405161023d919061247a565b3480156102fe57600080fd5b5061023361030d366004612411565b610b33565b34801561031e57600080fd5b50610327610b4a565b6040805193845260208401929092529082015260600161023d565b34801561034e57600080fd5b5061023361035d36600461248d565b610ba4565b34801561036e57600080fd5b506102c361037d3660046125f5565b610cba565b34801561038e57600080fd5b5061032761039d366004612411565b610d21565b3480156103ae57600080fd5b506103276103bd36600461269f565b610d5e565b3480156103ce57600080fd5b506102336103dd366004612411565b610ec9565b3480156103ee57600080fd5b506102336103fd366004612347565b60166020526000908152604090205481565b34801561041b57600080fd5b5061042f61042a3660046126db565b610ed9565b60405161023d91906127d6565b34801561044857600080fd5b5061023360105481565b34801561045e57600080fd5b5061023361046d366004612411565b610fae565b34801561047e57600080fd5b506102c361048d3660046127e9565b611011565b34801561049e57600080fd5b506102e56104ad366004612411565b61101c565b3480156104be57600080fd5b506103276112a2565b3480156104d357600080fd5b506102336104e2366004612347565b600f6020526000908152604090205481565b34801561050057600080fd5b506102c361050f36600461269f565b6112df565b34801561052057600080fd5b506102c361052f36600461248d565b6112ea565b34801561054057600080fd5b5061023360115481565b34801561055657600080fd5b50610293610565366004612347565b6112f5565b34801561057657600080fd5b506102c36114b2565b34801561058b57600080fd5b506105ab61059a3660046125f5565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161023d565b3480156105d057600080fd5b50610233600e5481565b6102c3611654565b3480156105ee57600080fd5b506102336105fd366004612347565b60156020526000908152604090205481565b34801561061b57600080fd5b5061023361062a36600461248d565b601260209081526000928352604080842090915290825290205481565b34801561065357600080fd5b50610233610662366004612347565b60136020526000908152604090205481565b34801561068057600080fd5b5061029361068f366004612836565b6116db565b3480156106a057600080fd5b506102336106af366004612411565b611709565b3480156106c057600080fd5b506105ab6106cf366004612869565b63f23a6e6160e01b95945050505050565b3480156106ec57600080fd5b506102c36106fb366004612869565b611755565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006301ffc9a760e01b6001600160e01b0319831614806107595750636cdb3d1360e11b6001600160e01b03198316145b806107745750630271189760e51b6001600160e01b03198316145b806107225750506001600160e01b03191663188d442960e31b1490565b6107996117b4565b6107a2336117de565b60005b81811015610aeb5760006107d08484848181106107c4576107c46128ce565b90506020020135610d21565b505090508060000361089c57336000908152601360205260408120541561082c573360009081526013602052604090205461080d906001906128fa565b905061082c303383600160405180602001604052806000815250611826565b6108613330878787818110610843576108436128ce565b90506020020135600160405180602001604052806000815250611826565b848484818110610873576108736128ce565b905060200201356001610886919061290d565b3360009081526013602052604090205550610ad8565b806001036109465733600090815260146020526040812054156108f457336000908152601460205260409020546108d5906001906128fa565b90506108f4303383600160405180602001604052806000815250611826565b61090b3330878787818110610843576108436128ce565b84848481811061091d5761091d6128ce565b905060200201356001610930919061290d565b3360009081526014602052604090205550610ad8565b806002036109f057336000908152601560205260408120541561099e573360009081526015602052604090205461097f906001906128fa565b905061099e303383600160405180602001604052806000815250611826565b6109b53330878787818110610843576108436128ce565b8484848181106109c7576109c76128ce565b9050602002013560016109da919061290d565b3360009081526015602052604090205550610ad8565b80600303610a9a573360009081526016602052604081205415610a485733600090815260166020526040902054610a29906001906128fa565b9050610a48303383600160405180602001604052806000815250611826565b610a5f3330878787818110610843576108436128ce565b848484818110610a7157610a716128ce565b905060200201356001610a84919061290d565b3360009081526016602052604090205550610ad8565b838383818110610aac57610aac6128ce565b90506020020135604051633d39bacf60e11b8152600401610acf91815260200190565b60405180910390fd5b5080610ae381612920565b9150506107a5565b50610af66001600355565b5050565b6060610b0d610b088361101c565b6118b4565b604051602001610b1d9190612955565b6040516020818303038152906040529050919050565b60098160058110610b4357600080fd5b0154905081565b6000806000610b576117b4565b6000806000610b69336103bd336112f5565b925092509250610b798282611a14565b610b8e336000908152600f6020526040812055565b91945092509050610b9f6001600355565b909192565b6000610bae6117b4565b610bb982600261299a565b610bc33385610700565b1015610be557604051633bf0eca360e21b815260048101849052602401610acf565b610bf083601c61290d565b9050610c073384610c0285600261299a565b611ac6565b610c2233828460405180602001604052806000815250611b35565b6000806000610c3084610d21565b60008381526012602090815260408083208584529091529020549295509093509150811115610cad57600083815260126020908152604080832085845282529182902083905590518581528291849186917f4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629910160405180910390a45b5050506107226001600355565b336001600160a01b0386168114801590610cdb5750610cd986826116db565b155b15610d0c5760405163711bec9160e11b81526001600160a01b03808316600483015287166024820152604401610acf565b610d198686868686611b92565b505050505050565b60008080610d30601c856129c7565b90506004610d3f601c866129db565b610d4991906129c7565b9150610d566004856129db565b949193509150565b6001600160a01b0382166000908152600f6020526040812054819081904311610d9a5760405163bfc2936d60e01b815260040160405180910390fd5b610da385611bf2565b6001600160a01b0385166000818152600f6020908152604080832054815190408184015280820194909452805180850382018152606090940190528251920191909120908515610dfd57610df682611709565b9050610e09565b610e0682610fae565b90505b600081600103610e69576000610e3560076e3fffffffffffffffffffffffffffff601487901c166129db565b90506000610e486004608a87901c6129db565b905080610e5683600461299a565b610e60919061290d565b92505050610ebb565b81600203610e9b57601054610e8390600181901c9061290d565b90504760061c811115610e9657504760061c5b610ebb565b81600303610ead57504760061c610ebb565b81600403610ebb57504760011c5b919450925090509250925092565b60048160058110610b4357600080fd5b60608151835114610f0a5781518351604051635b05999160e01b815260048101929092526024820152604401610acf565b6000835167ffffffffffffffff811115610f2657610f266124af565b604051908082528060200260200182016040528015610f4f578160200160208202803683370190505b50905060005b8451811015610fa657602080820286010151610f7990602080840287010151610700565b828281518110610f8b57610f8b6128ce565b6020908102919091010152610f9f81612920565b9050610f55565b509392505050565b6000620fffff82166004820154811015610fcb5750600092915050565b600554811015610fde5750600192915050565b600654811015610ff15750600292915050565b600460035b01548110156110085750600392915050565b50600492915050565b610af6338383611c38565b6060600080600061102c85610d21565b925092509250600061103d82611c83565b60405160200161104d91906129ef565b60405160208183030381529060405290506060808460000361108f5760405180604001604052806006815260200165706c61696e7360d01b815250915061119c565b846001036110bd5760405180604001604052806006815260200165199bdc995cdd60d21b815250915061119c565b846002036110ea576040518060400160405280600581526020016407377616d760dc1b815250915061119c565b8460030361111757604051806040016040528060058152602001643bb0ba32b960d91b815250915061119c565b84600403611147576040518060400160405280600881526020016736b7bab73a30b4b760c11b815250915061119c565b84600503611175576040518060400160405280600681526020016519195cd95c9d60d21b815250915061119c565b8460060361119c576040518060400160405280600381526020016269636560e81b81525091505b856000036111c6575060408051808201909152600581526431b7bb32b960d91b6020820152611241565b856001036111ef5750604080518082019091526004815263626f647960e01b6020820152611241565b8560020361121a5750604080518082019091526006815265776865656c7360d01b6020820152611241565b85600303611241575060408051808201909152600681526562656173747360d01b60208201525b82828260405160200161125693929190612a1c565b60405160208183030381529060405292508261127185611c83565b83836040516020016112869493929190612a76565b6040516020818303038152906040529650505050505050919050565b60008060006001601054901c6010546112bb919061290d565b92504760061c8311156112cf574760061c92505b5090914760061c91504760011c90565b610af6338383611d16565b610af6338383611ac6565b6001600160a01b03811660009081526013602090815260408083205460148352818420546015845282852054601690945291842054909290831580159061133b57508215155b801561134657508115155b801561135157508015155b156114a9578361136081612c26565b945050828061136e90612c26565b935050818061137c90612c26565b925050808061138a90612c26565b91505060008060008061139c88610d21565b6000838152601260209081526040808320858452909152902054929550935091508290036113c957600198505b8093508815611414576113db87610d21565b6000838152601260209081526040808320858452909152902054929550935091508214158061140a5750838114155b1561141457600098505b881561145c5761142386610d21565b600083815260126020908152604080832085845290915290205492955093509150821415806114525750838114155b1561145c57600098505b88156114a45761146b85610d21565b6000838152601260209081526040808320858452909152902054929550935091508214158061149a5750838114155b156114a457600098505b505050505b50505050919050565b6114ba6117b4565b6114c3336117de565b336000908152601360205260408120541561152457336000908152601360205260409020546114f4906001906128fa565b9050611513303383600160405180602001604052806000815250611826565b336000908152601360205260408120555b33600090815260146020526040902054156115855733600090815260146020526040902054611555906001906128fa565b9050611574303383600160405180602001604052806000815250611826565b336000908152601460205260408120555b33600090815260156020526040902054156115e657336000908152601560205260409020546115b6906001906128fa565b90506115d5303383600160405180602001604052806000815250611826565b336000908152601560205260408120555b33600090815260166020526040902054156116475733600090815260166020526040902054611617906001906128fa565b9050611636303383600160405180602001604052806000815250611826565b336000908152601660205260408120555b506116526001600355565b565b601054600e54336000908152600f6020526040902054611674919061290d565b431161167f57506011545b803410156116a05760405163044044a560e21b815260040160405180910390fd5b336000818152600f6020526040808220439055517f663b85167cccb9640fb0a935c4853ea50b0f3dd07d2590ca19942153136cef569190a250565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6000620fffff821660098201548110156117265750600092915050565b600a548110156117395750600192915050565b600b5481101561174c5750600292915050565b60096003610ff6565b336001600160a01b0386168114801590611776575061177486826116db565b155b156117a75760405163711bec9160e11b81526001600160a01b03808316600483015287166024820152604401610acf565b610d198686868686611826565b6002600354036117d757604051633ee5aeb560e01b815260040160405180910390fd5b6002600355565b600e546001600160a01b0382166000908152600f6020526040902054611804919061290d565b43116118235760405163411931ff60e01b815260040160405180910390fd5b50565b6001600160a01b03841661185057604051632bfa23e760e11b815260006004820152602401610acf565b6001600160a01b03851661187957604051626a0d4560e21b815260006004820152602401610acf565b604080516001808252602082018690528183019081526060820185905260808201909252906118ab8787848487611dac565b50505050505050565b606081516000036118d357505060408051602081019091526000815290565b6000604051806060016040528060408152602001612d206040913990506000600384516002611902919061290d565b61190c91906129c7565b61191790600461299a565b67ffffffffffffffff81111561192f5761192f6124af565b6040519080825280601f01601f191660200182016040528015611959576020820181803683370190505b50905060018201602082018586518701602081018051600082525b828410156119cf576003840193508351603f8160121c168701518653600186019550603f81600c1c168701518653600186019550603f8160061c168701518653600186019550603f8116870151865350600185019450611974565b90525050855160039006600181146119ee5760028114611a0157611a09565b603d6001830353603d6002830353611a09565b603d60018303535b509195945050505050565b81600103611a3d57611a383382600160405180602001604052806000815250611b35565b611a8b565b8160021480611a4c5750816003145b80611a575750816004145b15611a8b57604051339082156108fc029083906000818181858888f19350505050158015611a89573d6000803e3d6000fd5b505b604051818152829033907f1187560d7b166b3122e71aedb88f19cf2f33b2d141b513fde3ca2562d19d1bcb9060200160405180910390a35050565b6001600160a01b038316611aef57604051626a0d4560e21b815260006004820152602401610acf565b604080516001808252602082018590528183019081526060820184905260a08201909252600060808201818152919291611b2e91879185908590611dac565b5050505050565b6001600160a01b038416611b5f57604051632bfa23e760e11b815260006004820152602401610acf565b60408051600180825260208201869052818301908152606082018590526080820190925290610d19600087848487611dac565b6001600160a01b038416611bbc57604051632bfa23e760e11b815260006004820152602401610acf565b6001600160a01b038516611be557604051626a0d4560e21b815260006004820152602401610acf565b611b2e8585858585611dac565b600e546001600160a01b0382166000908152600f6020526040902054611c18919061290d565b4311156118235760405163559895a360e01b815260040160405180910390fd5b6001600160a01b038316611c6157604051626a0d4560e21b815260006004820152602401610acf565b611c7e836000848460405180602001604052806000815250611dac565b505050565b60606000611c9083611dff565b600101905060008167ffffffffffffffff811115611cb057611cb06124af565b6040519080825280601f01601f191660200182016040528015611cda576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611ce457509392505050565b6001600160a01b038216611d3f5760405162ced3e160e81b815260006004820152602401610acf565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611db885858585611ed7565b6001600160a01b03841615611b2e5782513390600103611df15760208481015190840151611dea8389898585896120f4565b5050610d19565b610d19818787878787612218565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611e3e5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611e6a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611e8857662386f26fc10000830492506010015b6305f5e1008310611ea0576305f5e100830492506008015b6127108310611eb457612710830492506004015b60648310611ec6576064830492506002015b600a83106107225760010192915050565b8051825114611f065781518151604051635b05999160e01b815260048101929092526024820152604401610acf565b3360005b8351811015612015576020818102858101820151908501909101516001600160a01b03881615611fbd576000828152602081815260408083206001600160a01b038c16845290915290205481811015611f96576040516303dee4c560e01b81526001600160a01b038a166004820152602481018290526044810183905260648101849052608401610acf565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615612002576000828152602081815260408083206001600160a01b038b16845290915281208054839290611ffc90849061290d565b90915550505b50508061200e90612920565b9050611f0a565b5082516001036120965760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612087929190918252602082015260400190565b60405180910390a45050611b2e565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516120e5929190612c3d565b60405180910390a45050505050565b6001600160a01b0384163b15610d195760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906121389089908990889088908890600401612c6b565b6020604051808303816000875af1925050508015612173575060408051601f3d908101601f1916820190925261217091810190612cb0565b60015b6121dc573d8080156121a1576040519150601f19603f3d011682016040523d82523d6000602084013e6121a6565b606091505b5080516000036121d457604051632bfa23e760e11b81526001600160a01b0386166004820152602401610acf565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b146118ab57604051632bfa23e760e11b81526001600160a01b0386166004820152602401610acf565b6001600160a01b0384163b15610d195760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061225c9089908990889088908890600401612ccd565b6020604051808303816000875af1925050508015612297575060408051601f3d908101601f1916820190925261229491810190612cb0565b60015b6122c5573d8080156121a1576040519150601f19603f3d011682016040523d82523d6000602084013e6121a6565b6001600160e01b0319811663bc197c8160e01b146118ab57604051632bfa23e760e11b81526001600160a01b0386166004820152602401610acf565b80356001600160a01b038116811461231857600080fd5b919050565b6000806040838503121561233057600080fd5b61233983612301565b946020939093013593505050565b60006020828403121561235957600080fd5b61236282612301565b9392505050565b6001600160e01b03198116811461182357600080fd5b60006020828403121561239157600080fd5b813561236281612369565b600080602083850312156123af57600080fd5b823567ffffffffffffffff808211156123c757600080fd5b818501915085601f8301126123db57600080fd5b8135818111156123ea57600080fd5b8660208260051b85010111156123ff57600080fd5b60209290920196919550909350505050565b60006020828403121561242357600080fd5b5035919050565b60005b8381101561244557818101518382015260200161242d565b50506000910152565b6000815180845261246681602086016020860161242a565b601f01601f19169290920160200192915050565b602081526000612362602083018461244e565b600080604083850312156124a057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156124ee576124ee6124af565b604052919050565b600067ffffffffffffffff821115612510576125106124af565b5060051b60200190565b600082601f83011261252b57600080fd5b8135602061254061253b836124f6565b6124c5565b82815260059290921b8401810191818101908684111561255f57600080fd5b8286015b8481101561257a5780358352918301918301612563565b509695505050505050565b600082601f83011261259657600080fd5b813567ffffffffffffffff8111156125b0576125b06124af565b6125c3601f8201601f19166020016124c5565b8181528460208386010111156125d857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561260d57600080fd5b61261686612301565b945061262460208701612301565b9350604086013567ffffffffffffffff8082111561264157600080fd5b61264d89838a0161251a565b9450606088013591508082111561266357600080fd5b61266f89838a0161251a565b9350608088013591508082111561268557600080fd5b5061269288828901612585565b9150509295509295909350565b600080604083850312156126b257600080fd5b6126bb83612301565b9150602083013580151581146126d057600080fd5b809150509250929050565b600080604083850312156126ee57600080fd5b823567ffffffffffffffff8082111561270657600080fd5b818501915085601f83011261271a57600080fd5b8135602061272a61253b836124f6565b82815260059290921b8401810191818101908984111561274957600080fd5b948201945b8386101561276e5761275f86612301565b8252948201949082019061274e565b9650508601359250508082111561278457600080fd5b506127918582860161251a565b9150509250929050565b600081518084526020808501945080840160005b838110156127cb578151875295820195908201906001016127af565b509495945050505050565b602081526000612362602083018461279b565b600080604083850312156127fc57600080fd5b823567ffffffffffffffff8082111561281457600080fd5b6128208683870161251a565b9350602085013591508082111561278457600080fd5b6000806040838503121561284957600080fd5b61285283612301565b915061286060208401612301565b90509250929050565b600080600080600060a0868803121561288157600080fd5b61288a86612301565b945061289860208701612301565b93506040860135925060608601359150608086013567ffffffffffffffff8111156128c257600080fd5b61269288828901612585565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610722576107226128e4565b80820180821115610722576107226128e4565b600060018201612932576129326128e4565b5060010190565b6000815161294b81856020860161242a565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161298d81601d85016020870161242a565b91909101601d0192915050565b8082028115828204841417610722576107226128e4565b634e487b7160e01b600052601260045260246000fd5b6000826129d6576129d66129b1565b500490565b6000826129ea576129ea6129b1565b500690565b6402a34b2b9160dd1b815260008251612a0f81600585016020870161242a565b9190910160050192915050565b60008451612a2e81846020890161242a565b8083019050600160fd1b8082528551612a4e816001850160208a0161242a565b60019201918201528351612a6981600284016020880161242a565b0160020195945050505050565b693d913730b6b2911d101160b11b81528451600090612a9c81600a850160208a0161242a565b7f222c2022646563696d616c73223a20302c202261747472696275746573223a20600a918401918201527f5b7b2274726169745f74797065223a202274696572222c2022646973706c6179602a8201527f5f74797065223a20226e756d626572222c202276616c7565223a202200000000604a8201528551612b25816066840160208a0161242a565b7f227d2c207b2274726169745f74797065223a20227465727261696e5f74797065606692909101918201527f222c2022646973706c61795f74797065223a2022737472696e67222c20227661608682015266363ab2911d101160c91b60a68201528451612b998160ad84016020890161242a565b612c1a612c0a612c0460ad848601017f227d2c207b2274726169745f74797065223a20226974656d5f74797065222c2081527f22646973706c61795f74797065223a2022737472696e67222c202276616c7565602082015263111d101160e11b604082015260440190565b87612939565b63227d5d7d60e01b815260040190565b98975050505050505050565b600081612c3557612c356128e4565b506000190190565b604081526000612c50604083018561279b565b8281036020840152612c62818561279b565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ca59083018461244e565b979650505050505050565b600060208284031215612cc257600080fd5b815161236281612369565b6001600160a01b0386811682528516602082015260a060408201819052600090612cf99083018661279b565b8281036060840152612d0b818661279b565b90508281036080840152612c1a818561244e56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220de4096bb5272d6cb73dcd0afa6040b32cd1fca6498bd54eb512a9ff87e765f4564736f6c6343000814003368747470733a2f2f6769746875622e636f6d2f6d6f6f6e73747265616d2d746f2f646567656e2d747261696c",
  "deployedBytecode": "0x6080604052600436106102075760003560e01c80638534fb4611610118578063be59cce3116100a0578063e32d56901161006f578063e32d569014610647578063e985e9c514610674578063ecefbad814610694578063f23a6e61146106b4578063f242432a146106e057600080fd5b8063be59cce3146105c4578063cd5e3c5d146105da578063cdf2f0ec146105e2578063dd88fa7f1461060f57600080fd5b8063b390c0ab116100e7578063b390c0ab14610514578063b870fe8014610534578063b8f905c81461054a578063b9c2edf71461056a578063bc197c811461057f57600080fd5b80638534fb4614610492578063901a7d53146104b25780639a0facc2146104c7578063a22cb465146104f457600080fd5b80632eb2c2d61161019b57806344dcd1431161016a57806344dcd143146103e25780634e1273f41461040f57806350b8aa921461043c5780636c08995d1461045257806383ca4b6f1461047257600080fd5b80632eb2c2d6146103625780633a134f78146103825780633a259e6a146103a2578063418145cf146103c257600080fd5b80630e89341c116101d75780630e89341c146102c557806318ce0a4b146102f25780632852b71c14610312578063289137a11461034257600080fd5b8062fdd58e14610213578063010c9b6e1461024657806301ffc9a71461027357806303f2f420146102a357600080fd5b3661020e57005b600080fd5b34801561021f57600080fd5b5061023361022e36600461231d565b610700565b6040519081526020015b60405180910390f35b34801561025257600080fd5b50610233610261366004612347565b60146020526000908152604090205481565b34801561027f57600080fd5b5061029361028e36600461237f565b610728565b604051901515815260200161023d565b3480156102af57600080fd5b506102c36102be36600461239c565b610791565b005b3480156102d157600080fd5b506102e56102e0366004612411565b610afa565b60405161023d919061247a565b3480156102fe57600080fd5b5061023361030d366004612411565b610b33565b34801561031e57600080fd5b50610327610b4a565b6040805193845260208401929092529082015260600161023d565b34801561034e57600080fd5b5061023361035d36600461248d565b610ba4565b34801561036e57600080fd5b506102c361037d3660046125f5565b610cba565b34801561038e57600080fd5b5061032761039d366004612411565b610d21565b3480156103ae57600080fd5b506103276103bd36600461269f565b610d5e565b3480156103ce57600080fd5b506102336103dd366004612411565b610ec9565b3480156103ee57600080fd5b506102336103fd366004612347565b60166020526000908152604090205481565b34801561041b57600080fd5b5061042f61042a3660046126db565b610ed9565b60405161023d91906127d6565b34801561044857600080fd5b5061023360105481565b34801561045e57600080fd5b5061023361046d366004612411565b610fae565b34801561047e57600080fd5b506102c361048d3660046127e9565b611011565b34801561049e57600080fd5b506102e56104ad366004612411565b61101c565b3480156104be57600080fd5b506103276112a2565b3480156104d357600080fd5b506102336104e2366004612347565b600f6020526000908152604090205481565b34801561050057600080fd5b506102c361050f36600461269f565b6112df565b34801561052057600080fd5b506102c361052f36600461248d565b6112ea565b34801561054057600080fd5b5061023360115481565b34801561055657600080fd5b50610293610565366004612347565b6112f5565b34801561057657600080fd5b506102c36114b2565b34801561058b57600080fd5b506105ab61059a3660046125f5565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161023d565b3480156105d057600080fd5b50610233600e5481565b6102c3611654565b3480156105ee57600080fd5b506102336105fd366004612347565b60156020526000908152604090205481565b34801561061b57600080fd5b5061023361062a36600461248d565b601260209081526000928352604080842090915290825290205481565b34801561065357600080fd5b50610233610662366004612347565b60136020526000908152604090205481565b34801561068057600080fd5b5061029361068f366004612836565b6116db565b3480156106a057600080fd5b506102336106af366004612411565b611709565b3480156106c057600080fd5b506105ab6106cf366004612869565b63f23a6e6160e01b95945050505050565b3480156106ec57600080fd5b506102c36106fb366004612869565b611755565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006301ffc9a760e01b6001600160e01b0319831614806107595750636cdb3d1360e11b6001600160e01b03198316145b806107745750630271189760e51b6001600160e01b03198316145b806107225750506001600160e01b03191663188d442960e31b1490565b6107996117b4565b6107a2336117de565b60005b81811015610aeb5760006107d08484848181106107c4576107c46128ce565b90506020020135610d21565b505090508060000361089c57336000908152601360205260408120541561082c573360009081526013602052604090205461080d906001906128fa565b905061082c303383600160405180602001604052806000815250611826565b6108613330878787818110610843576108436128ce565b90506020020135600160405180602001604052806000815250611826565b848484818110610873576108736128ce565b905060200201356001610886919061290d565b3360009081526013602052604090205550610ad8565b806001036109465733600090815260146020526040812054156108f457336000908152601460205260409020546108d5906001906128fa565b90506108f4303383600160405180602001604052806000815250611826565b61090b3330878787818110610843576108436128ce565b84848481811061091d5761091d6128ce565b905060200201356001610930919061290d565b3360009081526014602052604090205550610ad8565b806002036109f057336000908152601560205260408120541561099e573360009081526015602052604090205461097f906001906128fa565b905061099e303383600160405180602001604052806000815250611826565b6109b53330878787818110610843576108436128ce565b8484848181106109c7576109c76128ce565b9050602002013560016109da919061290d565b3360009081526015602052604090205550610ad8565b80600303610a9a573360009081526016602052604081205415610a485733600090815260166020526040902054610a29906001906128fa565b9050610a48303383600160405180602001604052806000815250611826565b610a5f3330878787818110610843576108436128ce565b848484818110610a7157610a716128ce565b905060200201356001610a84919061290d565b3360009081526016602052604090205550610ad8565b838383818110610aac57610aac6128ce565b90506020020135604051633d39bacf60e11b8152600401610acf91815260200190565b60405180910390fd5b5080610ae381612920565b9150506107a5565b50610af66001600355565b5050565b6060610b0d610b088361101c565b6118b4565b604051602001610b1d9190612955565b6040516020818303038152906040529050919050565b60098160058110610b4357600080fd5b0154905081565b6000806000610b576117b4565b6000806000610b69336103bd336112f5565b925092509250610b798282611a14565b610b8e336000908152600f6020526040812055565b91945092509050610b9f6001600355565b909192565b6000610bae6117b4565b610bb982600261299a565b610bc33385610700565b1015610be557604051633bf0eca360e21b815260048101849052602401610acf565b610bf083601c61290d565b9050610c073384610c0285600261299a565b611ac6565b610c2233828460405180602001604052806000815250611b35565b6000806000610c3084610d21565b60008381526012602090815260408083208584529091529020549295509093509150811115610cad57600083815260126020908152604080832085845282529182902083905590518581528291849186917f4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629910160405180910390a45b5050506107226001600355565b336001600160a01b0386168114801590610cdb5750610cd986826116db565b155b15610d0c5760405163711bec9160e11b81526001600160a01b03808316600483015287166024820152604401610acf565b610d198686868686611b92565b505050505050565b60008080610d30601c856129c7565b90506004610d3f601c866129db565b610d4991906129c7565b9150610d566004856129db565b949193509150565b6001600160a01b0382166000908152600f6020526040812054819081904311610d9a5760405163bfc2936d60e01b815260040160405180910390fd5b610da385611bf2565b6001600160a01b0385166000818152600f6020908152604080832054815190408184015280820194909452805180850382018152606090940190528251920191909120908515610dfd57610df682611709565b9050610e09565b610e0682610fae565b90505b600081600103610e69576000610e3560076e3fffffffffffffffffffffffffffff601487901c166129db565b90506000610e486004608a87901c6129db565b905080610e5683600461299a565b610e60919061290d565b92505050610ebb565b81600203610e9b57601054610e8390600181901c9061290d565b90504760061c811115610e9657504760061c5b610ebb565b81600303610ead57504760061c610ebb565b81600403610ebb57504760011c5b919450925090509250925092565b60048160058110610b4357600080fd5b60608151835114610f0a5781518351604051635b05999160e01b815260048101929092526024820152604401610acf565b6000835167ffffffffffffffff811115610f2657610f266124af565b604051908082528060200260200182016040528015610f4f578160200160208202803683370190505b50905060005b8451811015610fa657602080820286010151610f7990602080840287010151610700565b828281518110610f8b57610f8b6128ce565b6020908102919091010152610f9f81612920565b9050610f55565b509392505050565b6000620fffff82166004820154811015610fcb5750600092915050565b600554811015610fde5750600192915050565b600654811015610ff15750600292915050565b600460035b01548110156110085750600392915050565b50600492915050565b610af6338383611c38565b6060600080600061102c85610d21565b925092509250600061103d82611c83565b60405160200161104d91906129ef565b60405160208183030381529060405290506060808460000361108f5760405180604001604052806006815260200165706c61696e7360d01b815250915061119c565b846001036110bd5760405180604001604052806006815260200165199bdc995cdd60d21b815250915061119c565b846002036110ea576040518060400160405280600581526020016407377616d760dc1b815250915061119c565b8460030361111757604051806040016040528060058152602001643bb0ba32b960d91b815250915061119c565b84600403611147576040518060400160405280600881526020016736b7bab73a30b4b760c11b815250915061119c565b84600503611175576040518060400160405280600681526020016519195cd95c9d60d21b815250915061119c565b8460060361119c576040518060400160405280600381526020016269636560e81b81525091505b856000036111c6575060408051808201909152600581526431b7bb32b960d91b6020820152611241565b856001036111ef5750604080518082019091526004815263626f647960e01b6020820152611241565b8560020361121a5750604080518082019091526006815265776865656c7360d01b6020820152611241565b85600303611241575060408051808201909152600681526562656173747360d01b60208201525b82828260405160200161125693929190612a1c565b60405160208183030381529060405292508261127185611c83565b83836040516020016112869493929190612a76565b6040516020818303038152906040529650505050505050919050565b60008060006001601054901c6010546112bb919061290d565b92504760061c8311156112cf574760061c92505b5090914760061c91504760011c90565b610af6338383611d16565b610af6338383611ac6565b6001600160a01b03811660009081526013602090815260408083205460148352818420546015845282852054601690945291842054909290831580159061133b57508215155b801561134657508115155b801561135157508015155b156114a9578361136081612c26565b945050828061136e90612c26565b935050818061137c90612c26565b925050808061138a90612c26565b91505060008060008061139c88610d21565b6000838152601260209081526040808320858452909152902054929550935091508290036113c957600198505b8093508815611414576113db87610d21565b6000838152601260209081526040808320858452909152902054929550935091508214158061140a5750838114155b1561141457600098505b881561145c5761142386610d21565b600083815260126020908152604080832085845290915290205492955093509150821415806114525750838114155b1561145c57600098505b88156114a45761146b85610d21565b6000838152601260209081526040808320858452909152902054929550935091508214158061149a5750838114155b156114a457600098505b505050505b50505050919050565b6114ba6117b4565b6114c3336117de565b336000908152601360205260408120541561152457336000908152601360205260409020546114f4906001906128fa565b9050611513303383600160405180602001604052806000815250611826565b336000908152601360205260408120555b33600090815260146020526040902054156115855733600090815260146020526040902054611555906001906128fa565b9050611574303383600160405180602001604052806000815250611826565b336000908152601460205260408120555b33600090815260156020526040902054156115e657336000908152601560205260409020546115b6906001906128fa565b90506115d5303383600160405180602001604052806000815250611826565b336000908152601560205260408120555b33600090815260166020526040902054156116475733600090815260166020526040902054611617906001906128fa565b9050611636303383600160405180602001604052806000815250611826565b336000908152601660205260408120555b506116526001600355565b565b601054600e54336000908152600f6020526040902054611674919061290d565b431161167f57506011545b803410156116a05760405163044044a560e21b815260040160405180910390fd5b336000818152600f6020526040808220439055517f663b85167cccb9640fb0a935c4853ea50b0f3dd07d2590ca19942153136cef569190a250565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6000620fffff821660098201548110156117265750600092915050565b600a548110156117395750600192915050565b600b5481101561174c5750600292915050565b60096003610ff6565b336001600160a01b0386168114801590611776575061177486826116db565b155b156117a75760405163711bec9160e11b81526001600160a01b03808316600483015287166024820152604401610acf565b610d198686868686611826565b6002600354036117d757604051633ee5aeb560e01b815260040160405180910390fd5b6002600355565b600e546001600160a01b0382166000908152600f6020526040902054611804919061290d565b43116118235760405163411931ff60e01b815260040160405180910390fd5b50565b6001600160a01b03841661185057604051632bfa23e760e11b815260006004820152602401610acf565b6001600160a01b03851661187957604051626a0d4560e21b815260006004820152602401610acf565b604080516001808252602082018690528183019081526060820185905260808201909252906118ab8787848487611dac565b50505050505050565b606081516000036118d357505060408051602081019091526000815290565b6000604051806060016040528060408152602001612d206040913990506000600384516002611902919061290d565b61190c91906129c7565b61191790600461299a565b67ffffffffffffffff81111561192f5761192f6124af565b6040519080825280601f01601f191660200182016040528015611959576020820181803683370190505b50905060018201602082018586518701602081018051600082525b828410156119cf576003840193508351603f8160121c168701518653600186019550603f81600c1c168701518653600186019550603f8160061c168701518653600186019550603f8116870151865350600185019450611974565b90525050855160039006600181146119ee5760028114611a0157611a09565b603d6001830353603d6002830353611a09565b603d60018303535b509195945050505050565b81600103611a3d57611a383382600160405180602001604052806000815250611b35565b611a8b565b8160021480611a4c5750816003145b80611a575750816004145b15611a8b57604051339082156108fc029083906000818181858888f19350505050158015611a89573d6000803e3d6000fd5b505b604051818152829033907f1187560d7b166b3122e71aedb88f19cf2f33b2d141b513fde3ca2562d19d1bcb9060200160405180910390a35050565b6001600160a01b038316611aef57604051626a0d4560e21b815260006004820152602401610acf565b604080516001808252602082018590528183019081526060820184905260a08201909252600060808201818152919291611b2e91879185908590611dac565b5050505050565b6001600160a01b038416611b5f57604051632bfa23e760e11b815260006004820152602401610acf565b60408051600180825260208201869052818301908152606082018590526080820190925290610d19600087848487611dac565b6001600160a01b038416611bbc57604051632bfa23e760e11b815260006004820152602401610acf565b6001600160a01b038516611be557604051626a0d4560e21b815260006004820152602401610acf565b611b2e8585858585611dac565b600e546001600160a01b0382166000908152600f6020526040902054611c18919061290d565b4311156118235760405163559895a360e01b815260040160405180910390fd5b6001600160a01b038316611c6157604051626a0d4560e21b815260006004820152602401610acf565b611c7e836000848460405180602001604052806000815250611dac565b505050565b60606000611c9083611dff565b600101905060008167ffffffffffffffff811115611cb057611cb06124af565b6040519080825280601f01601f191660200182016040528015611cda576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611ce457509392505050565b6001600160a01b038216611d3f5760405162ced3e160e81b815260006004820152602401610acf565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611db885858585611ed7565b6001600160a01b03841615611b2e5782513390600103611df15760208481015190840151611dea8389898585896120f4565b5050610d19565b610d19818787878787612218565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611e3e5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611e6a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611e8857662386f26fc10000830492506010015b6305f5e1008310611ea0576305f5e100830492506008015b6127108310611eb457612710830492506004015b60648310611ec6576064830492506002015b600a83106107225760010192915050565b8051825114611f065781518151604051635b05999160e01b815260048101929092526024820152604401610acf565b3360005b8351811015612015576020818102858101820151908501909101516001600160a01b03881615611fbd576000828152602081815260408083206001600160a01b038c16845290915290205481811015611f96576040516303dee4c560e01b81526001600160a01b038a166004820152602481018290526044810183905260648101849052608401610acf565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615612002576000828152602081815260408083206001600160a01b038b16845290915281208054839290611ffc90849061290d565b90915550505b50508061200e90612920565b9050611f0a565b5082516001036120965760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612087929190918252602082015260400190565b60405180910390a45050611b2e565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516120e5929190612c3d565b60405180910390a45050505050565b6001600160a01b0384163b15610d195760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906121389089908990889088908890600401612c6b565b6020604051808303816000875af1925050508015612173575060408051601f3d908101601f1916820190925261217091810190612cb0565b60015b6121dc573d8080156121a1576040519150601f19603f3d011682016040523d82523d6000602084013e6121a6565b606091505b5080516000036121d457604051632bfa23e760e11b81526001600160a01b0386166004820152602401610acf565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b146118ab57604051632bfa23e760e11b81526001600160a01b0386166004820152602401610acf565b6001600160a01b0384163b15610d195760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061225c9089908990889088908890600401612ccd565b6020604051808303816000875af1925050508015612297575060408051601f3d908101601f1916820190925261229491810190612cb0565b60015b6122c5573d8080156121a1576040519150601f19603f3d011682016040523d82523d6000602084013e6121a6565b6001600160e01b0319811663bc197c8160e01b146118ab57604051632bfa23e760e11b81526001600160a01b0386166004820152602401610acf565b80356001600160a01b038116811461231857600080fd5b919050565b6000806040838503121561233057600080fd5b61233983612301565b946020939093013593505050565b60006020828403121561235957600080fd5b61236282612301565b9392505050565b6001600160e01b03198116811461182357600080fd5b60006020828403121561239157600080fd5b813561236281612369565b600080602083850312156123af57600080fd5b823567ffffffffffffffff808211156123c757600080fd5b818501915085601f8301126123db57600080fd5b8135818111156123ea57600080fd5b8660208260051b85010111156123ff57600080fd5b60209290920196919550909350505050565b60006020828403121561242357600080fd5b5035919050565b60005b8381101561244557818101518382015260200161242d565b50506000910152565b6000815180845261246681602086016020860161242a565b601f01601f19169290920160200192915050565b602081526000612362602083018461244e565b600080604083850312156124a057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156124ee576124ee6124af565b604052919050565b600067ffffffffffffffff821115612510576125106124af565b5060051b60200190565b600082601f83011261252b57600080fd5b8135602061254061253b836124f6565b6124c5565b82815260059290921b8401810191818101908684111561255f57600080fd5b8286015b8481101561257a5780358352918301918301612563565b509695505050505050565b600082601f83011261259657600080fd5b813567ffffffffffffffff8111156125b0576125b06124af565b6125c3601f8201601f19166020016124c5565b8181528460208386010111156125d857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561260d57600080fd5b61261686612301565b945061262460208701612301565b9350604086013567ffffffffffffffff8082111561264157600080fd5b61264d89838a0161251a565b9450606088013591508082111561266357600080fd5b61266f89838a0161251a565b9350608088013591508082111561268557600080fd5b5061269288828901612585565b9150509295509295909350565b600080604083850312156126b257600080fd5b6126bb83612301565b9150602083013580151581146126d057600080fd5b809150509250929050565b600080604083850312156126ee57600080fd5b823567ffffffffffffffff8082111561270657600080fd5b818501915085601f83011261271a57600080fd5b8135602061272a61253b836124f6565b82815260059290921b8401810191818101908984111561274957600080fd5b948201945b8386101561276e5761275f86612301565b8252948201949082019061274e565b9650508601359250508082111561278457600080fd5b506127918582860161251a565b9150509250929050565b600081518084526020808501945080840160005b838110156127cb578151875295820195908201906001016127af565b509495945050505050565b602081526000612362602083018461279b565b600080604083850312156127fc57600080fd5b823567ffffffffffffffff8082111561281457600080fd5b6128208683870161251a565b9350602085013591508082111561278457600080fd5b6000806040838503121561284957600080fd5b61285283612301565b915061286060208401612301565b90509250929050565b600080600080600060a0868803121561288157600080fd5b61288a86612301565b945061289860208701612301565b93506040860135925060608601359150608086013567ffffffffffffffff8111156128c257600080fd5b61269288828901612585565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610722576107226128e4565b80820180821115610722576107226128e4565b600060018201612932576129326128e4565b5060010190565b6000815161294b81856020860161242a565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161298d81601d85016020870161242a565b91909101601d0192915050565b8082028115828204841417610722576107226128e4565b634e487b7160e01b600052601260045260246000fd5b6000826129d6576129d66129b1565b500490565b6000826129ea576129ea6129b1565b500690565b6402a34b2b9160dd1b815260008251612a0f81600585016020870161242a565b9190910160050192915050565b60008451612a2e81846020890161242a565b8083019050600160fd1b8082528551612a4e816001850160208a0161242a565b60019201918201528351612a6981600284016020880161242a565b0160020195945050505050565b693d913730b6b2911d101160b11b81528451600090612a9c81600a850160208a0161242a565b7f222c2022646563696d616c73223a20302c202261747472696275746573223a20600a918401918201527f5b7b2274726169745f74797065223a202274696572222c2022646973706c6179602a8201527f5f74797065223a20226e756d626572222c202276616c7565223a202200000000604a8201528551612b25816066840160208a0161242a565b7f227d2c207b2274726169745f74797065223a20227465727261696e5f74797065606692909101918201527f222c2022646973706c61795f74797065223a2022737472696e67222c20227661608682015266363ab2911d101160c91b60a68201528451612b998160ad84016020890161242a565b612c1a612c0a612c0460ad848601017f227d2c207b2274726169745f74797065223a20226974656d5f74797065222c2081527f22646973706c61795f74797065223a2022737472696e67222c202276616c7565602082015263111d101160e11b604082015260440190565b87612939565b63227d5d7d60e01b815260040190565b98975050505050505050565b600081612c3557612c356128e4565b506000190190565b604081526000612c50604083018561279b565b8281036020840152612c62818561279b565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ca59083018461244e565b979650505050505050565b600060208284031215612cc257600080fd5b815161236281612369565b6001600160a01b0386811682528516602082015260a060408201819052600090612cf99083018661279b565b8281036060840152612d0b818661279b565b90508281036080840152612c1a818561244e56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220de4096bb5272d6cb73dcd0afa6040b32cd1fca6498bd54eb512a9ff87e765f4564736f6c63430008140033",
  "devdoc": {
    "author": "Moonstream Engineering (engineering@moonstream.to)",
    "errors": {
      "ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC1155InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC1155InvalidArrayLength(uint256,uint256)": [
        {
          "details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
          "params": {
            "idsLength": "Length of the array of token identifiers",
            "valuesLength": "Length of the array of token amounts"
          }
        }
      ],
      "ERC1155InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC1155InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC1155InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC1155MissingApprovalForAll(address,address)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "accept()": {
        "returns": {
          "_0": "entropy The randomness that was used to determine the outcome of the player's last roll",
          "_1": "_outcome The outcome of the player's last roll - this is 0, 1, 2, 3, or 4 and represents an index in either `UnmodifiedOutcomesCumulativeMass` or `ImprovedOutcomesCumulativeMass` (depending on whether a bonus was applied)",
          "_2": "reward This represents a numerical parameter representing the reward that the player should receive. If the `_outcome` was `0`, this value is irrelevant and should be ignored. If the `_outcome` was `1`, signifying that the player will receive an item, this value is the ERC1155 `tokenID` of the item that will be transferred to the player if they accept the outcome, if the `_outcome` was `2`, `3`, or `4`, this value is the amount of native tokens that will be transferred to the player if they accept the outcome."
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "constructor": {
        "params": {
          "blocksToAct": "The number of blocks a player has to either reroll or accept the outcome of their current roll.",
          "costToReroll": "The cost in the finest denomination of the native token on the chain to reroll.",
          "costToRoll": "The cost in the finest denomination of the native token on the chain to roll."
        }
      },
      "currentRewards()": {
        "returns": {
          "large": "The current large reward (in Wei)",
          "medium": "The current medium reward (in Wei)",
          "small": "The current small reward (in Wei)"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "outcome(address,bool)": {
        "params": {
          "bonus": "This boolean signifies whether the outcome should be sampled from the unmodified or the improved outcome distribution",
          "degenerate": "The address of the player"
        },
        "returns": {
          "_0": "entropy The randomness that was used to determine the outcome of the player's last roll",
          "_1": "_outcome The outcome of the player's last roll - this is 0, 1, 2, 3, or 4 and represents an index in either `UnmodifiedOutcomesCumulativeMass` or `ImprovedOutcomesCumulativeMass` (depending on whether a bonus was applied)",
          "_2": "reward This represents a numerical parameter representing the reward that the player should receive. If the `_outcome` was `0`, this value is irrelevant and should be ignored. If the `_outcome` was `1`, signifying that the player will receive an item, this value is the ERC1155 `tokenID` of the item that will be transferred to the player if they accept the outcome, if the `_outcome` was `2`, `3`, or `4`, this value is the amount of native tokens that will be transferred to the player if they accept the outcome."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      }
    },
    "title": "Jackpot Junction game contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "DeadlineExceeded()": [
        {
          "notice": "Signifies that the player is no longer able to act because too many blocks elapsed since their last action."
        }
      ],
      "InsufficientItems(uint256)": [
        {
          "notice": "Signifies that the player does not have enough items in their possession to perform an action."
        }
      ],
      "InsufficientValue()": [
        {
          "notice": "Signifies that the player has not provided enough value to perform the action."
        }
      ],
      "InvalidItem(uint256)": [
        {
          "notice": "Signifies that the player attempted to use an invalid item to perform a certain action."
        }
      ],
      "RollInProgress()": [
        {
          "notice": "Signifies that a player cannot take an action that requires them to be out of a roll because it is too soon since they rolled. This error is raised when a player tries to equip or unequip items while they are in the middle of a roll."
        }
      ],
      "WaitForTick()": [
        {
          "notice": "This error is raised to signify that the player needs to wait for at least one more block to elapse."
        }
      ]
    },
    "events": {
      "Award(address,uint256,uint256)": {
        "notice": "Fired when a player accepts the outcome of a roll."
      },
      "Roll(address)": {
        "notice": "Fired when a player rolls (and rerolls)."
      },
      "TierUnlocked(uint256,uint256,uint256,uint256)": {
        "notice": "Fired when a new tier is unlocked for the givem itemType and terrainType. Specifies the tier and its pool ID."
      }
    },
    "kind": "user",
    "methods": {
      "BlocksToAct()": {
        "notice": "How many blocks a player has to act (reroll/accept)."
      },
      "CostToReroll()": {
        "notice": "Cost (finest denomination of native token on the chain) to reroll."
      },
      "CostToRoll()": {
        "notice": "Cost (finest denomination of native token on the chain) to roll."
      },
      "CurrentTier(uint256,uint256)": {
        "notice": "Specifies the largest tier that has been unlocked for a given (itemType, terrainType) pair.Item types: 0 (wagon cover), 1 (wagon body), 2 (wagon wheel), 3 (beast)Terrain types: 0 (plains), 1 (forest), 2 (swamp), 3 (water), 4 (mountain), 5 (desert), 6 (ice)Encoding of ERC1155 pool IDs: tier*28 + terrainType*4 + itemTypeitemType => terrainType => tier"
      },
      "EquippedBeasts(address)": {
        "notice": "EquippedBeasts indicates the poolID of the beasts that are currently equipped by the given player.The mapping is address(player) => poolID + 1.The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot."
      },
      "EquippedBody(address)": {
        "notice": "EquippedBody indicates the poolID of the body that is currently equipped by the given player.The mapping is address(player) => poolID + 1.The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot."
      },
      "EquippedCover(address)": {
        "notice": "EquippedCover indicates the poolID of the cover that is currently equipped by the given player.The mapping is address(player) => poolID + 1.The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot."
      },
      "EquippedWheels(address)": {
        "notice": "EquippedWheels indicates the poolID of the wheels that are currently equipped by the given player.The mapping is address(player) => poolID + 1.The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot."
      },
      "ImprovedOutcomesCumulativeMass(uint256)": {
        "notice": "Cumulative mass function for the improved distribution over outcomes."
      },
      "LastRollBlock(address)": {
        "notice": "The block number of the last roll/re-roll by each player."
      },
      "UnmodifiedOutcomesCumulativeMass(uint256)": {
        "notice": "Cumulative mass function for the unmodified distribution over outcomes."
      },
      "accept()": {
        "notice": "If a player calls this method at least one block after they last rolled and before their block deadline expires, it accepts the outcome of their last roll and transfers the corresponding reward to their account."
      },
      "constructor": {
        "notice": "Creates a JackpotJunction game contract."
      },
      "currentRewards()": {
        "notice": "Returns the current small, medium, and large rewards based on the game contract's native token balance."
      },
      "genera(uint256)": {
        "notice": "Returns the itemType, terrainType, and tier of a given pool ID."
      },
      "hasBonus(address)": {
        "notice": "Returns true if the given player currently has a bonus applied to them from their equipped items and false otherwise."
      },
      "outcome(address,bool)": {
        "notice": "If `outcome` is called at least one block after the player last rolled and before the players block deadline expires, it shows the outcome of the player's last roll."
      },
      "roll()": {
        "notice": "Rolls or rerolls for the `msg.sender`, depending on whether or not whether `BlocksToAct` blocks have elapsed since their last roll. If that number of blocks has elapsed, then the player is rolling and must pay `CostToRoll`. Otherwise, the player is rerolling and must be `CostToReroll`."
      },
      "sampleImprovedOutcomesCumulativeMass(uint256)": {
        "notice": "Samples from bonus distribution over outcomes."
      },
      "sampleUnmodifiedOutcomeCumulativeMass(uint256)": {
        "notice": "Samples from unmodified distribution over outcomes."
      }
    },
    "notice": "This is the game contract for The Degen Trail: Jackpot Junction, a game in world of The Degen Trail.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 178,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 184,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 186,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4425,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7237,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "UnmodifiedOutcomesCumulativeMass",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 7268,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "ImprovedOutcomesCumulativeMass",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 7271,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "BlocksToAct",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 7276,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "LastRollBlock",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7279,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "CostToRoll",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 7282,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "CostToReroll",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 7289,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "CurrentTier",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7294,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "EquippedCover",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7299,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "EquippedBody",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7304,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "EquippedWheels",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7309,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "EquippedBeasts",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}