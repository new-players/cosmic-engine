{
  "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blocksToAct",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "costToRoll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "costToReroll",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DeadlineExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valuesLength",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC1155MissingApprovalForAll",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        }
      ],
      "name": "InsufficientItems",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        }
      ],
      "name": "InvalidItem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RollInProgress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WaitForTick",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Award",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "Roll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemType",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "terrainType",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        }
      ],
      "name": "TierUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BlocksToAct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CostToReroll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CostToRoll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "CurrentTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "EquippedBeasts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "EquippedBody",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "EquippedCover",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "EquippedWheels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ImprovedOutcomesCumulativeMass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "LastRollBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "UnmodifiedOutcomesCumulativeMass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accept",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "poolIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numOutputs",
          "type": "uint256"
        }
      ],
      "name": "craft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newPoolID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "poolIDs",
          "type": "uint256[]"
        }
      ],
      "name": "equip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolID",
          "type": "uint256"
        }
      ],
      "name": "genera",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "itemType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "terrainType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "degenerate",
          "type": "address"
        }
      ],
      "name": "hasBonus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "bonus",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "degenerate",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bonus",
          "type": "bool"
        }
      ],
      "name": "outcome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entropy",
          "type": "uint256"
        }
      ],
      "name": "sampleImprovedOutcomesCumulativeMass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entropy",
          "type": "uint256"
        }
      ],
      "name": "sampleUnmodifiedOutcomeCumulativeMass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unequip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
  "receipt": {
    "to": null,
    "from": "0x0BC7220BbB82C10d88fb3469d5330B6522d7645D",
    "contractAddress": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
    "transactionIndex": 1,
    "gasUsed": "2537997",
    "logsBloom": "0x
    "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f",
    "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000004",
        "logIndex": 1,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000008",
        "logIndex": 2,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000c",
        "logIndex": 3,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000004",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000010",
        "logIndex": 4,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000005",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000014",
        "logIndex": 5,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000006",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000018",
        "logIndex": 6,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 7,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000005",
        "logIndex": 8,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000009",
        "logIndex": 9,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000d",
        "logIndex": 10,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000004",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000011",
        "logIndex": 11,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000005",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000015",
        "logIndex": 12,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000006",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000019",
        "logIndex": 13,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 14,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000006",
        "logIndex": 15,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000a",
        "logIndex": 16,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000e",
        "logIndex": 17,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000004",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000012",
        "logIndex": 18,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000005",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000016",
        "logIndex": 19,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000006",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000001a",
        "logIndex": 20,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000003",
        "logIndex": 21,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000007",
        "logIndex": 22,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000b",
        "logIndex": 23,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000f",
        "logIndex": 24,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000004",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000013",
        "logIndex": 25,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000005",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000017",
        "logIndex": 26,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10925382,
        "transactionHash": "0xf8da689f8132c859e82a8d0ca844dffe06f406db6817f5def58ea6de592091ad",
        "address": "0x7Bc3583717E32529D9f34Df652882e7C1e450D3d",
        "topics": [
          "0x4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629",
          "0x0000000000000000000000000000000000000000000000000000000000000003",
          "0x0000000000000000000000000000000000000000000000000000000000000006",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000001b",
        "logIndex": 27,
        "blockHash": "0x4971e0971cb4c0e6c238b00705ba646f8877b7ae8e4c2aa378ead7bfbdfddf5f"
      }
    ],
    "blockNumber": 10925382,
    "cumulativeGasUsed": "2581824",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10,
    10,
    5
  ],
  "numDeployments": 1,
  "solcInputHash": "38903097e28bcdc91352c83e4df2b083",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocksToAct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"costToRoll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"costToReroll\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DeadlineExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"}],\"name\":\"InsufficientItems\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"}],\"name\":\"InvalidItem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RollInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WaitForTick\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Award\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"Roll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"terrainType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"}],\"name\":\"TierUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BlocksToAct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CostToReroll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CostToRoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CurrentTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"EquippedBeasts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"EquippedBody\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"EquippedCover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"EquippedWheels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ImprovedOutcomesCumulativeMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LastRollBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UnmodifiedOutcomesCumulativeMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accept\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOutputs\",\"type\":\"uint256\"}],\"name\":\"craft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newPoolID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIDs\",\"type\":\"uint256[]\"}],\"name\":\"equip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"}],\"name\":\"genera\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terrainType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"degenerate\",\"type\":\"address\"}],\"name\":\"hasBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bonus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"degenerate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bonus\",\"type\":\"bool\"}],\"name\":\"outcome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"}],\"name\":\"sampleImprovedOutcomesCumulativeMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"}],\"name\":\"sampleUnmodifiedOutcomeCumulativeMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unequip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Moonstream Engineering (engineering@moonstream.to)\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"title\":\"Jackpot Junction game contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"EquippedBeasts(address)\":{\"notice\":\"EquippedBeasts indicates the poolID of the beasts that are currently equipped by the given player. The mapping is address(player) => poolID + 1. The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\"},\"EquippedBody(address)\":{\"notice\":\"EquippedBody indicates the poolID of the body that is currently equipped by the given player. The mapping is address(player) => poolID + 1. The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\"},\"EquippedCover(address)\":{\"notice\":\"EquippedCover indicates the poolID of the cover that is currently equipped by the given player. The mapping is address(player) => poolID + 1. The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\"},\"EquippedWheels(address)\":{\"notice\":\"EquippedWheels indicates the poolID of the wheels that are currently equipped by the given player. The mapping is address(player) => poolID + 1. The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\"}},\"notice\":\"This is the game contract for The Degen Trail: Jackpot Junction, a game in world of The Degen Trail.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/JackpotJunction.sol\":\"JackpotJunction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC20 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\r\\n */\\r\\ninterface IERC20Errors {\\r\\n    /**\\r\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param balance Current balance for the interacting account.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     */\\r\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC20InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC20InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\r\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     */\\r\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC20InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\r\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC20InvalidSpender(address spender);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC721 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\r\\n */\\r\\ninterface IERC721Errors {\\r\\n    /**\\r\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\r\\n     * Used in balance queries.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC721InvalidOwner(address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC721NonexistentToken(uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC721InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC721InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC721InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC721InvalidOperator(address operator);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC1155 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\r\\n */\\r\\ninterface IERC1155Errors {\\r\\n    /**\\r\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param balance Current balance for the interacting account.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC1155InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC1155InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC1155InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC1155InvalidOperator(address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\r\\n     * Used in batch transfers.\\r\\n     * @param idsLength Length of the array of token identifiers\\r\\n     * @param valuesLength Length of the array of token amounts\\r\\n     */\\r\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\r\\n}\\r\\n\",\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\r\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\r\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\r\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\r\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\r\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\r\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the basic standard multi-token.\\r\\n * See https://eips.ethereum.org/EIPS/eip-1155\\r\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\r\\n */\\r\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\r\\n    using Arrays for uint256[];\\r\\n    using Arrays for address[];\\r\\n\\r\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\r\\n\\r\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\r\\n\\r\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\r\\n    string private _uri;\\r\\n\\r\\n    /**\\r\\n     * @dev See {_setURI}.\\r\\n     */\\r\\n    constructor(string memory uri_) {\\r\\n        _setURI(uri_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC1155).interfaceId ||\\r\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155MetadataURI-uri}.\\r\\n     *\\r\\n     * This implementation returns the same URI for *all* token types. It relies\\r\\n     * on the token type ID substitution mechanism\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\r\\n     *\\r\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\r\\n     * actual token type ID.\\r\\n     */\\r\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\r\\n        return _uri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\r\\n        return _balances[id][account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-balanceOfBatch}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `accounts` and `ids` must have the same length.\\r\\n     */\\r\\n    function balanceOfBatch(\\r\\n        address[] memory accounts,\\r\\n        uint256[] memory ids\\r\\n    ) public view virtual returns (uint256[] memory) {\\r\\n        if (accounts.length != ids.length) {\\r\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\r\\n        }\\r\\n\\r\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\r\\n\\r\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\r\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\r\\n        }\\r\\n\\r\\n        return batchBalances;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\r\\n        _setApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\r\\n        return _operatorApprovals[account][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\r\\n        address sender = _msgSender();\\r\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\r\\n            revert ERC1155MissingApprovalForAll(sender, from);\\r\\n        }\\r\\n        _safeTransferFrom(from, to, id, value, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\r\\n     */\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values,\\r\\n        bytes memory data\\r\\n    ) public virtual {\\r\\n        address sender = _msgSender();\\r\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\r\\n            revert ERC1155MissingApprovalForAll(sender, from);\\r\\n        }\\r\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\r\\n     * (or `to`) is the zero address.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\r\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\r\\n     * - `ids` and `values` must have the same length.\\r\\n     *\\r\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\r\\n     */\\r\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\r\\n        if (ids.length != values.length) {\\r\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\r\\n        }\\r\\n\\r\\n        address operator = _msgSender();\\r\\n\\r\\n        for (uint256 i = 0; i < ids.length; ++i) {\\r\\n            uint256 id = ids.unsafeMemoryAccess(i);\\r\\n            uint256 value = values.unsafeMemoryAccess(i);\\r\\n\\r\\n            if (from != address(0)) {\\r\\n                uint256 fromBalance = _balances[id][from];\\r\\n                if (fromBalance < value) {\\r\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\r\\n                }\\r\\n                unchecked {\\r\\n                    // Overflow not possible: value <= fromBalance\\r\\n                    _balances[id][from] = fromBalance - value;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (to != address(0)) {\\r\\n                _balances[id][to] += value;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (ids.length == 1) {\\r\\n            uint256 id = ids.unsafeMemoryAccess(0);\\r\\n            uint256 value = values.unsafeMemoryAccess(0);\\r\\n            emit TransferSingle(operator, from, to, id, value);\\r\\n        } else {\\r\\n            emit TransferBatch(operator, from, to, ids, values);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\r\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\r\\n     * contains code (eg. is a smart contract at the moment of execution).\\r\\n     *\\r\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\r\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\r\\n     * overriding {_update} instead.\\r\\n     */\\r\\n    function _updateWithAcceptanceCheck(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _update(from, to, ids, values);\\r\\n        if (to != address(0)) {\\r\\n            address operator = _msgSender();\\r\\n            if (ids.length == 1) {\\r\\n                uint256 id = ids.unsafeMemoryAccess(0);\\r\\n                uint256 value = values.unsafeMemoryAccess(0);\\r\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\r\\n            } else {\\r\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\r\\n        if (to == address(0)) {\\r\\n            revert ERC1155InvalidReceiver(address(0));\\r\\n        }\\r\\n        if (from == address(0)) {\\r\\n            revert ERC1155InvalidSender(address(0));\\r\\n        }\\r\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\r\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     * - `ids` and `values` must have the same length.\\r\\n     */\\r\\n    function _safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values,\\r\\n        bytes memory data\\r\\n    ) internal {\\r\\n        if (to == address(0)) {\\r\\n            revert ERC1155InvalidReceiver(address(0));\\r\\n        }\\r\\n        if (from == address(0)) {\\r\\n            revert ERC1155InvalidSender(address(0));\\r\\n        }\\r\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\r\\n     * substitution mechanism\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\r\\n     *\\r\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\r\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\r\\n     * clients with the token type ID.\\r\\n     *\\r\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\r\\n     * interpreted by clients as\\r\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\r\\n     * for token type ID 0x4cce0.\\r\\n     *\\r\\n     * See {uri}.\\r\\n     *\\r\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\r\\n     * this function emits no events.\\r\\n     */\\r\\n    function _setURI(string memory newuri) internal virtual {\\r\\n        _uri = newuri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\r\\n        if (to == address(0)) {\\r\\n            revert ERC1155InvalidReceiver(address(0));\\r\\n        }\\r\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\r\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `values` must have the same length.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\r\\n        if (to == address(0)) {\\r\\n            revert ERC1155InvalidReceiver(address(0));\\r\\n        }\\r\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\r\\n     */\\r\\n    function _burn(address from, uint256 id, uint256 value) internal {\\r\\n        if (from == address(0)) {\\r\\n            revert ERC1155InvalidSender(address(0));\\r\\n        }\\r\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\r\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\r\\n     * - `ids` and `values` must have the same length.\\r\\n     */\\r\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\r\\n        if (from == address(0)) {\\r\\n            revert ERC1155InvalidSender(address(0));\\r\\n        }\\r\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `operator` cannot be the zero address.\\r\\n     */\\r\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\r\\n        if (operator == address(0)) {\\r\\n            revert ERC1155InvalidOperator(address(0));\\r\\n        }\\r\\n        _operatorApprovals[owner][operator] = approved;\\r\\n        emit ApprovalForAll(owner, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\r\\n     * if it contains code at the moment of execution.\\r\\n     */\\r\\n    function _doSafeTransferAcceptanceCheck(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes memory data\\r\\n    ) private {\\r\\n        if (to.code.length > 0) {\\r\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\r\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\r\\n                    // Tokens rejected\\r\\n                    revert ERC1155InvalidReceiver(to);\\r\\n                }\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    // non-ERC1155Receiver implementer\\r\\n                    revert ERC1155InvalidReceiver(to);\\r\\n                } else {\\r\\n                    /// @solidity memory-safe-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\r\\n     * if it contains code at the moment of execution.\\r\\n     */\\r\\n    function _doSafeBatchTransferAcceptanceCheck(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory values,\\r\\n        bytes memory data\\r\\n    ) private {\\r\\n        if (to.code.length > 0) {\\r\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\r\\n                bytes4 response\\r\\n            ) {\\r\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\r\\n                    // Tokens rejected\\r\\n                    revert ERC1155InvalidReceiver(to);\\r\\n                }\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    // non-ERC1155Receiver implementer\\r\\n                    revert ERC1155InvalidReceiver(to);\\r\\n                } else {\\r\\n                    /// @solidity memory-safe-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\r\\n     */\\r\\n    function _asSingletonArrays(\\r\\n        uint256 element1,\\r\\n        uint256 element2\\r\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Load the free memory pointer\\r\\n            array1 := mload(0x40)\\r\\n            // Set array length to 1\\r\\n            mstore(array1, 1)\\r\\n            // Store the single element at the next word after the length (where content starts)\\r\\n            mstore(add(array1, 0x20), element1)\\r\\n\\r\\n            // Repeat for next array locating it right after the first array\\r\\n            array2 := add(array1, 0x40)\\r\\n            mstore(array2, 1)\\r\\n            mstore(add(array2, 0x20), element2)\\r\\n\\r\\n            // Update the free memory pointer by pointing after the second array\\r\\n            mstore(0x40, add(array2, 0x40))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbfaaf8b62e22fba97ff2694d8db324e1004b52e7b458f6d9c3f875cece156218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\r\\n */\\r\\ninterface IERC1155 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\r\\n     */\\r\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\r\\n     * transfers.\\r\\n     */\\r\\n    event TransferBatch(\\r\\n        address indexed operator,\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256[] ids,\\r\\n        uint256[] values\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\r\\n     * `approved`.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\r\\n     *\\r\\n     * If an {URI} event was emitted for `id`, the standard\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\r\\n     * returned by {IERC1155MetadataURI-uri}.\\r\\n     */\\r\\n    event URI(string value, uint256 indexed id);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `accounts` and `ids` must have the same length.\\r\\n     */\\r\\n    function balanceOfBatch(\\r\\n        address[] calldata accounts,\\r\\n        uint256[] calldata ids\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `operator` cannot be the caller.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\r\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\r\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\r\\n     * reentrancy guards when interacting with untrusted contracts.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\r\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\r\\n     *\\r\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\r\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\r\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\r\\n     * reentrancy guards when interacting with untrusted contracts.\\r\\n     *\\r\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `values` must have the same length.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x68af97783de0c7a5910d38684da5c15484ead058b960bcaa709b711942f2ea0e\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface that must be implemented by smart contracts in order to receive\\r\\n * ERC-1155 token transfers.\\r\\n */\\r\\ninterface IERC1155Receiver is IERC165 {\\r\\n    /**\\r\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\r\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\r\\n     *\\r\\n     * NOTE: To accept the transfer, this must return\\r\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n     * (i.e. 0xf23a6e61, or its own function selector).\\r\\n     *\\r\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\r\\n     * @param from The address which previously owned the token\\r\\n     * @param id The ID of the token being transferred\\r\\n     * @param value The amount of tokens being transferred\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\r\\n     */\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    /**\\r\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\r\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\r\\n     * been updated.\\r\\n     *\\r\\n     * NOTE: To accept the transfer(s), this must return\\r\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n     * (i.e. 0xbc197c81, or its own function selector).\\r\\n     *\\r\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\r\\n     * @param from The address which previously owned the token\\r\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\r\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\r\\n     */\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xfeb66d3cf5ec1542d998c417a94a932478de3917da12e9d0a9fbd7a24f864675\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\r\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\r\\n */\\r\\ninterface IERC1155MetadataURI is IERC1155 {\\r\\n    /**\\r\\n     * @dev Returns the URI for token type `id`.\\r\\n     *\\r\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\r\\n     * clients with the actual token type ID.\\r\\n     */\\r\\n    function uri(uint256 id) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x7fdb08f8fcbae206ca2f66e1740fc79e71867df22f3ea9aa137e6ee9b88d832c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\r\\nimport {Math} from \\\"./math/Math.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to array types.\\r\\n */\\r\\nlibrary Arrays {\\r\\n    using StorageSlot for bytes32;\\r\\n\\r\\n    /**\\r\\n     * @dev Searches a sorted `array` and returns the first index that contains\\r\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\r\\n     * values in the array are strictly less than `element`), the array length is\\r\\n     * returned. Time complexity O(log n).\\r\\n     *\\r\\n     * `array` is expected to be sorted in ascending order, and to contain no\\r\\n     * repeated elements.\\r\\n     */\\r\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\r\\n        uint256 low = 0;\\r\\n        uint256 high = array.length;\\r\\n\\r\\n        if (high == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        while (low < high) {\\r\\n            uint256 mid = Math.average(low, high);\\r\\n\\r\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\r\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\r\\n            if (unsafeAccess(array, mid).value > element) {\\r\\n                high = mid;\\r\\n            } else {\\r\\n                low = mid + 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\r\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\r\\n            return low - 1;\\r\\n        } else {\\r\\n            return low;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\r\\n     *\\r\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\r\\n     */\\r\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\r\\n        bytes32 slot;\\r\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\r\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0, arr.slot)\\r\\n            slot := add(keccak256(0, 0x20), pos)\\r\\n        }\\r\\n        return slot.getAddressSlot();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\r\\n     *\\r\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\r\\n     */\\r\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\r\\n        bytes32 slot;\\r\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\r\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0, arr.slot)\\r\\n            slot := add(keccak256(0, 0x20), pos)\\r\\n        }\\r\\n        return slot.getBytes32Slot();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\r\\n     *\\r\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\r\\n     */\\r\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\r\\n        bytes32 slot;\\r\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\r\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0, arr.slot)\\r\\n            slot := add(keccak256(0, 0x20), pos)\\r\\n        }\\r\\n        return slot.getUint256Slot();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\r\\n     *\\r\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\r\\n     */\\r\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\r\\n        assembly {\\r\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\r\\n     *\\r\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\r\\n     */\\r\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\r\\n        assembly {\\r\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x22fef5c0a4893572799c77a339552d015ba0b022dc953e8df01c6540fdef4a33\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3dcd533a3f709bda89bb8e649eb97aed96578e606f3796609544b1dcff975a0b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant NOT_ENTERED = 1;\\r\\n    uint256 private constant ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    /**\\r\\n     * @dev Unauthorized reentrant call.\\r\\n     */\\r\\n    error ReentrancyGuardReentrantCall();\\r\\n\\r\\n    constructor() {\\r\\n        _status = NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\r\\n        if (_status == ENTERED) {\\r\\n            revert ReentrancyGuardReentrantCall();\\r\\n        }\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\r\\n     * `nonReentrant` function in the call stack.\\r\\n     */\\r\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\r\\n        return _status == ENTERED;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x55c329217b55fc381f19a19007d6bcf279e3b58e9867d3e2b33f57fe8acb824b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC1967 implementation slot:\\r\\n * ```solidity\\r\\n * contract ERC1967 {\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(newImplementation.code.length > 0);\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n    struct AddressSlot {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct BooleanSlot {\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Slot {\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Uint256Slot {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct StringSlot {\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    struct BytesSlot {\\r\\n        bytes value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\r\\n     */\\r\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\r\\n     */\\r\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := store.slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaf4f1cc7a79833f62322e257c405bcc1f5d76bd0d9eba10ab17d890ce2e4ec4d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5e93dc51cc1dd89d1ae31658302b93f7adef0eee525eafbc563195afc9345e39\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x97a5e5c6659add3f13418d219e705d6cc732ca3c31b62a64d66f92b159c5375d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Muldiv operation overflow.\\r\\n     */\\r\\n    error MathOverflowedMulDiv();\\r\\n\\r\\n    enum Rounding {\\r\\n        Floor, // Toward negative infinity\\r\\n        Ceil, // Toward positive infinity\\r\\n        Trunc, // Toward zero\\r\\n        Expand // Away from zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\r\\n     * of rounding towards zero.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (b == 0) {\\r\\n            // Guarantee the same behavior as in a regular Solidity division.\\r\\n            return a / b;\\r\\n        }\\r\\n\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\r\\n     * denominator == 0.\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\r\\n     * Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\r\\n                // The surrounding unchecked block does not change this fact.\\r\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            if (denominator <= prod1) {\\r\\n                revert MathOverflowedMulDiv();\\r\\n            }\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\r\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            uint256 twos = denominator & (0 - denominator);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\r\\n            // works in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\r\\n     * towards zero.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10 ** 64) {\\r\\n                value /= 10 ** 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10 ** 32) {\\r\\n                value /= 10 ** 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10 ** 16) {\\r\\n                value /= 10 ** 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10 ** 8) {\\r\\n                value /= 10 ** 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10 ** 4) {\\r\\n                value /= 10 ** 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10 ** 2) {\\r\\n                value /= 10 ** 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10 ** 1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\r\\n     */\\r\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\r\\n        return uint8(rounding) % 2 == 1;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\"},\"src/JackpotJunction.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport {ERC1155} from \\\"../lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"../lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/// @title Jackpot Junction game contract\\r\\n/// @author Moonstream Engineering (engineering@moonstream.to)\\r\\n///\\r\\n/// @notice This is the game contract for The Degen Trail: Jackpot Junction, a game in world of The Degen Trail.\\r\\ncontract JackpotJunction is ERC1155, ReentrancyGuard {\\r\\n    // Cumulative mass functions for probability distributions. Total mass for each distribution is 2^20 = 1048576.\\r\\n    uint256[5] public UnmodifiedOutcomesCumulativeMass = [\\r\\n        524288,\\r\\n        524288 + 408934,\\r\\n        524288 + 408934 + 104857,\\r\\n        524288 + 408934 + 104857 + 10487,\\r\\n        524288 + 408934 + 104857 + 10487 + 10\\r\\n    ];\\r\\n    uint256[5] public ImprovedOutcomesCumulativeMass = [\\r\\n        469283,\\r\\n        469283 + 408934,\\r\\n        469283 + 408934 + 154857,\\r\\n        469283 + 408934 + 154857 + 15487,\\r\\n        469283 + 408934 + 154857 + 15487 + 15\\r\\n    ];\\r\\n\\r\\n    // How many blocks a player has to act (reroll/accept).\\r\\n    uint256 public BlocksToAct;\\r\\n\\r\\n    // The block number of the last roll/re-roll by the player.\\r\\n    mapping(address => uint256) public LastRollBlock;\\r\\n\\r\\n    // Costs (finest denomination of native token on the chain) to roll and reroll.\\r\\n    uint256 public CostToRoll;\\r\\n    uint256 public CostToReroll;\\r\\n\\r\\n    // Item types: 0 (wagon cover), 1 (wagon body), 2 (wagon wheel), 3 (beast)\\r\\n    // Terrain types: 0 (plain), 1 (forest), 2 (swamp), 3 (water), 4 (mountain), 5 (desert), 6 (ice)\\r\\n    // Encoding of ERC1155 pool IDs: tier*28 + terrainType*4 + itemType\\r\\n    // itemType => terrainType => tier\\r\\n    mapping(uint256 => mapping(uint256 => uint256)) public CurrentTier;\\r\\n\\r\\n    /// EquippedCover indicates the poolID of the cover that is currently equipped by the given player.\\r\\n    /// The mapping is address(player) => poolID + 1.\\r\\n    /// The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\\r\\n    mapping(address => uint256) public EquippedCover;\\r\\n    /// EquippedBody indicates the poolID of the body that is currently equipped by the given player.\\r\\n    /// The mapping is address(player) => poolID + 1.\\r\\n    /// The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\\r\\n    mapping(address => uint256) public EquippedBody;\\r\\n    /// EquippedWheels indicates the poolID of the wheels that are currently equipped by the given player.\\r\\n    /// The mapping is address(player) => poolID + 1.\\r\\n    /// The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\\r\\n    mapping(address => uint256) public EquippedWheels;\\r\\n    /// EquippedBeasts indicates the poolID of the beasts that are currently equipped by the given player.\\r\\n    /// The mapping is address(player) => poolID + 1.\\r\\n    /// The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\\r\\n    mapping(address => uint256) public EquippedBeasts;\\r\\n\\r\\n    event TierUnlocked(uint256 indexed itemType, uint256 indexed terrainType, uint256 indexed tier, uint256 poolID);\\r\\n    event Roll(address indexed player);\\r\\n    event Award(address indexed player, uint256 indexed outcome, uint256 value);\\r\\n\\r\\n    error DeadlineExceeded();\\r\\n    error RollInProgress();\\r\\n    error WaitForTick();\\r\\n    error InsufficientValue();\\r\\n    error InvalidItem(uint256 poolID);\\r\\n    error InsufficientItems(uint256 poolID);\\r\\n\\r\\n    constructor(uint256 blocksToAct, uint256 costToRoll, uint256 costToReroll)\\r\\n        ERC1155(\\\"https://github.com/moonstream-to/degen-trail\\\")\\r\\n    {\\r\\n        BlocksToAct = blocksToAct;\\r\\n        CostToRoll = costToRoll;\\r\\n        CostToReroll = costToReroll;\\r\\n\\r\\n        for (uint256 i = 0; i < 4; i++) {\\r\\n            for (uint256 j = 0; j < 7; j++) {\\r\\n                emit TierUnlocked(i, j, 0, 4 * j + i);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function _enforceDeadline(address degenerate) internal view {\\r\\n        if (block.number > LastRollBlock[degenerate] + BlocksToAct) {\\r\\n            revert DeadlineExceeded();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _enforceNotRolling(address degenerate) internal view {\\r\\n        if (block.number <= LastRollBlock[degenerate] + BlocksToAct) {\\r\\n            revert RollInProgress();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function genera(uint256 poolID) public pure returns (uint256 itemType, uint256 terrainType, uint256 tier) {\\r\\n        tier = poolID / 28;\\r\\n        terrainType = (poolID % 28) / 4;\\r\\n        itemType = poolID % 4;\\r\\n    }\\r\\n\\r\\n    function hasBonus(address degenerate) public view returns (bool bonus) {\\r\\n        bonus = false;\\r\\n\\r\\n        uint256 wagonCover = EquippedCover[degenerate];\\r\\n        uint256 wagonBody = EquippedBody[degenerate];\\r\\n        uint256 wheels = EquippedWheels[degenerate];\\r\\n        uint256 beastTrain = EquippedBeasts[degenerate];\\r\\n\\r\\n        if (wagonCover != 0 && wagonBody != 0 && wheels != 0 && beastTrain != 0) {\\r\\n            uint256 terrainType;\\r\\n\\r\\n            uint256 currentItemType;\\r\\n            uint256 currentTier;\\r\\n            uint256 currentTerrainType;\\r\\n\\r\\n            (currentItemType, currentTerrainType, currentTier) = genera(wagonCover);\\r\\n            if (CurrentTier[currentItemType][currentTerrainType] == currentTier) {\\r\\n                bonus = true;\\r\\n            }\\r\\n            terrainType = currentTerrainType;\\r\\n\\r\\n            if (bonus) {\\r\\n                (currentItemType, currentTerrainType, currentTier) = genera(wagonBody);\\r\\n                if (CurrentTier[currentItemType][currentTerrainType] != currentTier || currentTerrainType != terrainType) {\\r\\n                    bonus = false;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (bonus) {\\r\\n                (currentItemType, currentTerrainType, currentTier) = genera(wheels);\\r\\n                if (CurrentTier[currentItemType][currentTerrainType] != currentTier || currentTerrainType != terrainType) {\\r\\n                    bonus = false;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (bonus) {\\r\\n                (currentItemType, currentTerrainType, currentTier) = genera(beastTrain);\\r\\n                if (CurrentTier[currentItemType][currentTerrainType] != currentTier || currentTerrainType != terrainType) {\\r\\n                    bonus = false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sampleUnmodifiedOutcomeCumulativeMass(uint256 entropy) public view returns (uint256) {\\r\\n        uint256 sample = entropy << 236 >> 236;\\r\\n        if (sample < UnmodifiedOutcomesCumulativeMass[0]) {\\r\\n            return 0;\\r\\n        } else if (sample < UnmodifiedOutcomesCumulativeMass[1]) {\\r\\n            return 1;\\r\\n        } else if (sample < UnmodifiedOutcomesCumulativeMass[2]) {\\r\\n            return 2;\\r\\n        } else if (sample < UnmodifiedOutcomesCumulativeMass[3]) {\\r\\n            return 3;\\r\\n        }\\r\\n        return 4;\\r\\n    }\\r\\n\\r\\n    function sampleImprovedOutcomesCumulativeMass(uint256 entropy) public view returns (uint256) {\\r\\n        uint256 sample = entropy << 236 >> 236;\\r\\n        if (sample < ImprovedOutcomesCumulativeMass[0]) {\\r\\n            return 0;\\r\\n        } else if (sample < ImprovedOutcomesCumulativeMass[1]) {\\r\\n            return 1;\\r\\n        } else if (sample < ImprovedOutcomesCumulativeMass[2]) {\\r\\n            return 2;\\r\\n        } else if (sample < ImprovedOutcomesCumulativeMass[3]) {\\r\\n            return 3;\\r\\n        }\\r\\n        return 4;\\r\\n    }\\r\\n\\r\\n    function roll() external payable {\\r\\n        uint256 requiredFee = CostToRoll;\\r\\n        if (block.number <= LastRollBlock[msg.sender] + BlocksToAct) {\\r\\n            requiredFee = CostToReroll;\\r\\n        }\\r\\n\\r\\n        if (msg.value < requiredFee) {\\r\\n            revert InsufficientValue();\\r\\n        }\\r\\n\\r\\n        LastRollBlock[msg.sender] = block.number;\\r\\n\\r\\n        emit Roll(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _entropy(address degenerate) internal view virtual returns (uint256) {\\r\\n        return uint256(keccak256(abi.encode(blockhash(LastRollBlock[degenerate]), degenerate)));\\r\\n    }\\r\\n\\r\\n    function outcome(address degenerate, bool bonus) public view returns (uint256, uint256, uint256) {\\r\\n        if (block.number <= LastRollBlock[degenerate]) {\\r\\n            revert WaitForTick();\\r\\n        }\\r\\n\\r\\n        _enforceDeadline(degenerate);\\r\\n\\r\\n        // entropy layout:\\r\\n        // |- 118 bits -|- 118 bits -|- 20 bits -|\\r\\n        //    item type  terrain type   outcome\\r\\n        uint256 entropy = _entropy(degenerate);\\r\\n\\r\\n        uint256 _outcome;\\r\\n        if (bonus) {\\r\\n            _outcome = sampleImprovedOutcomesCumulativeMass(entropy);\\r\\n        } else {\\r\\n            _outcome = sampleUnmodifiedOutcomeCumulativeMass(entropy);\\r\\n        }\\r\\n\\r\\n        uint256 value;\\r\\n\\r\\n        if (_outcome == 1) {\\r\\n            uint256 terrainType = (entropy << 118 >> 138) % 7;\\r\\n            uint256 itemType = (entropy >> 138) % 4;\\r\\n            value = 4 * terrainType + itemType;\\r\\n        } else if (_outcome == 2) {\\r\\n            value = CostToRoll + (CostToRoll >> 1);\\r\\n            if (value > address(this).balance >> 6) {\\r\\n                value = address(this).balance >> 6;\\r\\n            }\\r\\n        } else if (_outcome == 3) {\\r\\n            value = address(this).balance >> 6;\\r\\n        } else if (_outcome == 4) {\\r\\n            value = address(this).balance >> 1;\\r\\n        }\\r\\n\\r\\n        return (entropy, _outcome, value);\\r\\n    }\\r\\n\\r\\n    function _award(uint256 _outcome, uint256 value) internal {\\r\\n        if (_outcome == 1) {\\r\\n            _mint(msg.sender, value, 1, \\\"\\\");\\r\\n        } else if (_outcome == 2 || _outcome == 3 || _outcome == 4) {\\r\\n            payable(msg.sender).transfer(value);\\r\\n        }\\r\\n\\r\\n        emit Award(msg.sender, _outcome, value);\\r\\n    }\\r\\n\\r\\n    function _clearRoll() internal {\\r\\n        LastRollBlock[msg.sender] = 0;\\r\\n    }\\r\\n\\r\\n    function accept() external nonReentrant returns (uint256, uint256, uint256) {\\r\\n        // The call to outcome() enforces the following constraints:\\r\\n        // - At least one block has passed after the player rolled.\\r\\n        // - The player last rolled at most BlocksToAct blocks ago.\\r\\n        (uint256 entropy, uint256 _outcome, uint256 value) = outcome(msg.sender, hasBonus(msg.sender));\\r\\n\\r\\n        _award(_outcome, value);\\r\\n        _clearRoll();\\r\\n        return (entropy, _outcome, value);\\r\\n    }\\r\\n\\r\\n    function equip(uint256[] calldata poolIDs) external nonReentrant {\\r\\n        _enforceNotRolling(msg.sender);\\r\\n\\r\\n        for (uint256 i = 0; i < poolIDs.length; i++) {\\r\\n            (uint256 itemType,,) = genera(poolIDs[i]);\\r\\n            if (itemType == 0) {\\r\\n                uint256 currentPoolID;\\r\\n                if (EquippedCover[msg.sender] != 0) {\\r\\n                    currentPoolID = EquippedCover[msg.sender] - 1;\\r\\n                    _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n                }\\r\\n                _safeTransferFrom(msg.sender, address(this), poolIDs[i], 1, \\\"\\\");\\r\\n                EquippedCover[msg.sender] = poolIDs[i] + 1;\\r\\n            } else if (itemType == 1) {\\r\\n                uint256 currentPoolID;\\r\\n                if (EquippedBody[msg.sender] != 0) {\\r\\n                    currentPoolID = EquippedBody[msg.sender] - 1;\\r\\n                    _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n                }\\r\\n                _safeTransferFrom(msg.sender, address(this), poolIDs[i], 1, \\\"\\\");\\r\\n                EquippedBody[msg.sender] = poolIDs[i] + 1;\\r\\n            } else if (itemType == 2) {\\r\\n                uint256 currentPoolID;\\r\\n                if (EquippedWheels[msg.sender] != 0) {\\r\\n                    currentPoolID = EquippedWheels[msg.sender] - 1;\\r\\n                    _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n                }\\r\\n                _safeTransferFrom(msg.sender, address(this), poolIDs[i], 1, \\\"\\\");\\r\\n                EquippedWheels[msg.sender] = poolIDs[i] + 1;\\r\\n            } else if (itemType == 3) {\\r\\n                uint256 currentPoolID;\\r\\n                if (EquippedBeasts[msg.sender] != 0) {\\r\\n                    currentPoolID = EquippedBeasts[msg.sender] - 1;\\r\\n                    _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n                }\\r\\n                _safeTransferFrom(msg.sender, address(this), poolIDs[i], 1, \\\"\\\");\\r\\n                EquippedBeasts[msg.sender] = poolIDs[i] + 1;\\r\\n            } else {\\r\\n                // If you end up in this branch, there's a bug in \\\"genera\\\".\\r\\n                revert InvalidItem(poolIDs[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function unequip() external nonReentrant {\\r\\n        _enforceNotRolling(msg.sender);\\r\\n\\r\\n        uint256 currentPoolID;\\r\\n        if (EquippedCover[msg.sender] != 0) {\\r\\n            currentPoolID = EquippedCover[msg.sender] - 1;\\r\\n            _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n            delete EquippedCover[msg.sender];\\r\\n        }\\r\\n\\r\\n        if (EquippedBody[msg.sender] != 0) {\\r\\n            currentPoolID = EquippedBody[msg.sender] - 1;\\r\\n            _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n            delete EquippedBody[msg.sender];\\r\\n        }\\r\\n\\r\\n        if (EquippedWheels[msg.sender] != 0) {\\r\\n            currentPoolID = EquippedWheels[msg.sender] - 1;\\r\\n            _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n            delete EquippedWheels[msg.sender];\\r\\n        }\\r\\n\\r\\n        if (EquippedBeasts[msg.sender] != 0) {\\r\\n            currentPoolID = EquippedBeasts[msg.sender] - 1;\\r\\n            _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \\\"\\\");\\r\\n            delete EquippedBeasts[msg.sender];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function craft(uint256 poolID, uint256 numOutputs) external nonReentrant returns (uint256 newPoolID) {\\r\\n        if (balanceOf(msg.sender, poolID) < 2 * numOutputs) {\\r\\n            revert InsufficientItems(poolID);\\r\\n        }\\r\\n\\r\\n        newPoolID = poolID + 28;\\r\\n\\r\\n        _burn(msg.sender, poolID, 2 * numOutputs);\\r\\n        _mint(msg.sender, newPoolID, numOutputs, \\\"\\\");\\r\\n\\r\\n        (uint256 itemType, uint256 terrainType, uint256 tier) = genera(newPoolID);\\r\\n        if (CurrentTier[itemType][terrainType] < tier) {\\r\\n            CurrentTier[itemType][terrainType] = tier;\\r\\n            emit TierUnlocked(itemType, terrainType, tier, newPoolID);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function burn(uint256 poolID, uint256 amount) external {\\r\\n        _burn(msg.sender, poolID, amount);\\r\\n    }\\r\\n\\r\\n    function burnBatch(uint256[] memory poolIDs, uint256[] memory amounts) external {\\r\\n        _burnBatch(msg.sender, poolIDs, amounts);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4ef3b29a7f604d4cbebf592d788e9d29e5cd25152652e66ee70aeb69f9cc802c\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x610120604052620800006080908152620e3d6660a052620fd6ff60c052620ffff660e05262100000610100526200003b9060049060056200019e565b506040805160a081018252620729238152620d66896020820152620fc37291810191909152620ffff16060820152621000006080820152620000829060099060056200019e565b503480156200009057600080fd5b50604051620028d0380380620028d0833981016040819052620000b391620001ff565b6040518060600160405280602c8152602001620028a4602c9139620000d8816200018c565b506001600355600e8390556010829055601181905560005b6004811015620001825760005b60078110156200016c57600081837f4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629816200013a84600462000244565b62000146919062000264565b60405190815260200160405180910390a48062000163816200027a565b915050620000fd565b508062000179816200027a565b915050620000f0565b5050505062000407565b60026200019a82826200033b565b5050565b8260058101928215620001d6579160200282015b82811115620001d6578251829062ffffff16905591602001919060010190620001b2565b50620001e4929150620001e8565b5090565b5b80821115620001e45760008155600101620001e9565b6000806000606084860312156200021557600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176200025e576200025e6200022e565b92915050565b808201808211156200025e576200025e6200022e565b6000600182016200028f576200028f6200022e565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002c157607f821691505b602082108103620002e257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033657600081815260208120601f850160051c81016020861015620003115750805b601f850160051c820191505b8181101562000332578281556001016200031d565b5050505b505050565b81516001600160401b0381111562000357576200035762000296565b6200036f81620003688454620002ac565b84620002e8565b602080601f831160018114620003a757600084156200038e5750858301515b600019600386901b1c1916600185901b17855562000332565b600085815260208120601f198616915b82811015620003d857888601518255948401946001909101908401620003b7565b5085821015620003f75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61248d80620004176000396000f3fe6080604052600436106101db5760003560e01c80636c08995d11610102578063be59cce311610095578063e32d569011610064578063e32d5690146105a1578063e985e9c5146105ce578063ecefbad8146105ee578063f242432a1461060e57600080fd5b8063be59cce31461051e578063cd5e3c5d14610534578063cdf2f0ec1461053c578063dd88fa7f1461056957600080fd5b8063b390c0ab116100d1578063b390c0ab146104b3578063b870fe80146104d3578063b8f905c8146104e9578063b9c2edf71461050957600080fd5b80636c08995d1461042657806383ca4b6f146104465780639a0facc214610466578063a22cb4651461049357600080fd5b8063289137a11161017a578063418145cf11610149578063418145cf1461039657806344dcd143146103b65780634e1273f4146103e357806350b8aa921461041057600080fd5b8063289137a1146103165780632eb2c2d6146103365780633a134f78146103565780633a259e6a1461037657600080fd5b806303f2f420116101b657806303f2f420146102775780630e89341c1461029957806318ce0a4b146102c65780632852b71c146102e657600080fd5b8062fdd58e146101e7578063010c9b6e1461021a57806301ffc9a71461024757600080fd5b366101e257005b600080fd5b3480156101f357600080fd5b50610207610202366004611cc8565b61062e565b6040519081526020015b60405180910390f35b34801561022657600080fd5b50610207610235366004611cf2565b60146020526000908152604090205481565b34801561025357600080fd5b50610267610262366004611d2a565b610656565b6040519015158152602001610211565b34801561028357600080fd5b50610297610292366004611d47565b6106a6565b005b3480156102a557600080fd5b506102b96102b4366004611dbc565b610a0f565b6040516102119190611e1b565b3480156102d257600080fd5b506102076102e1366004611dbc565b610aa3565b3480156102f257600080fd5b506102fb610aba565b60408051938452602084019290925290820152606001610211565b34801561032257600080fd5b50610207610331366004611e2e565b610b14565b34801561034257600080fd5b50610297610351366004611f96565b610c2a565b34801561036257600080fd5b506102fb610371366004611dbc565b610c91565b34801561038257600080fd5b506102fb610391366004612040565b610cce565b3480156103a257600080fd5b506102076103b1366004611dbc565b610e39565b3480156103c257600080fd5b506102076103d1366004611cf2565b60166020526000908152604090205481565b3480156103ef57600080fd5b506104036103fe36600461207c565b610e49565b6040516102119190612177565b34801561041c57600080fd5b5061020760105481565b34801561043257600080fd5b50610207610441366004611dbc565b610f1e565b34801561045257600080fd5b5061029761046136600461218a565b610f81565b34801561047257600080fd5b50610207610481366004611cf2565b600f6020526000908152604090205481565b34801561049f57600080fd5b506102976104ae366004612040565b610f8c565b3480156104bf57600080fd5b506102976104ce366004611e2e565b610f97565b3480156104df57600080fd5b5061020760115481565b3480156104f557600080fd5b50610267610504366004611cf2565b610fa2565b34801561051557600080fd5b50610297611128565b34801561052a57600080fd5b50610207600e5481565b6102976112ca565b34801561054857600080fd5b50610207610557366004611cf2565b60156020526000908152604090205481565b34801561057557600080fd5b50610207610584366004611e2e565b601260209081526000928352604080842090915290825290205481565b3480156105ad57600080fd5b506102076105bc366004611cf2565b60136020526000908152604090205481565b3480156105da57600080fd5b506102676105e93660046121d7565b611351565b3480156105fa57600080fd5b50610207610609366004611dbc565b61137f565b34801561061a57600080fd5b5061029761062936600461220a565b6113cb565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061068757506001600160e01b031982166303a24d0760e21b145b8061065057506301ffc9a760e01b6001600160e01b0319831614610650565b6106ae61142a565b6106b733611454565b60005b81811015610a005760006106e58484848181106106d9576106d961226f565b90506020020135610c91565b50509050806000036107b157336000908152601360205260408120541561074157336000908152601360205260409020546107229060019061229b565b905061074130338360016040518060200160405280600081525061149c565b61077633308787878181106107585761075861226f565b9050602002013560016040518060200160405280600081525061149c565b8484848181106107885761078861226f565b90506020020135600161079b91906122ae565b33600090815260136020526040902055506109ed565b8060010361085b57336000908152601460205260408120541561080957336000908152601460205260409020546107ea9060019061229b565b905061080930338360016040518060200160405280600081525061149c565b61082033308787878181106107585761075861226f565b8484848181106108325761083261226f565b90506020020135600161084591906122ae565b33600090815260146020526040902055506109ed565b806002036109055733600090815260156020526040812054156108b357336000908152601560205260409020546108949060019061229b565b90506108b330338360016040518060200160405280600081525061149c565b6108ca33308787878181106107585761075861226f565b8484848181106108dc576108dc61226f565b9050602002013560016108ef91906122ae565b33600090815260156020526040902055506109ed565b806003036109af57336000908152601660205260408120541561095d573360009081526016602052604090205461093e9060019061229b565b905061095d30338360016040518060200160405280600081525061149c565b61097433308787878181106107585761075861226f565b8484848181106109865761098661226f565b90506020020135600161099991906122ae565b33600090815260166020526040902055506109ed565b8383838181106109c1576109c161226f565b90506020020135604051633d39bacf60e11b81526004016109e491815260200190565b60405180910390fd5b50806109f8816122c1565b9150506106ba565b50610a0b6001600355565b5050565b606060028054610a1e906122da565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4a906122da565b8015610a975780601f10610a6c57610100808354040283529160200191610a97565b820191906000526020600020905b815481529060010190602001808311610a7a57829003601f168201915b50505050509050919050565b60098160058110610ab357600080fd5b0154905081565b6000806000610ac761142a565b6000806000610ad93361039133610fa2565b925092509250610ae9828261152a565b610afe336000908152600f6020526040812055565b91945092509050610b0f6001600355565b909192565b6000610b1e61142a565b610b29826002612314565b610b33338561062e565b1015610b5557604051633bf0eca360e21b8152600481018490526024016109e4565b610b6083601c6122ae565b9050610b773384610b72856002612314565b6115dc565b610b923382846040518060200160405280600081525061164b565b6000806000610ba084610c91565b60008381526012602090815260408083208584529091529020549295509093509150811115610c1d57600083815260126020908152604080832085845282529182902083905590518581528291849186917f4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629910160405180910390a45b5050506106506001600355565b336001600160a01b0386168114801590610c4b5750610c498682611351565b155b15610c7c5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016109e4565b610c8986868686866116a8565b505050505050565b60008080610ca0601c85612341565b90506004610caf601c86612355565b610cb99190612341565b9150610cc6600485612355565b949193509150565b6001600160a01b0382166000908152600f6020526040812054819081904311610d0a5760405163bfc2936d60e01b815260040160405180910390fd5b610d1385611708565b6001600160a01b0385166000818152600f6020908152604080832054815190408184015280820194909452805180850382018152606090940190528251920191909120908515610d6d57610d668261137f565b9050610d79565b610d7682610f1e565b90505b600081600103610dd9576000610da560076e3fffffffffffffffffffffffffffff601487901c16612355565b90506000610db86004608a87901c612355565b905080610dc6836004612314565b610dd091906122ae565b92505050610e2b565b81600203610e0b57601054610df390600181901c906122ae565b90504760061c811115610e0657504760061c5b610e2b565b81600303610e1d57504760061c610e2b565b81600403610e2b57504760011c5b919450925090509250925092565b60048160058110610ab357600080fd5b60608151835114610e7a5781518351604051635b05999160e01b8152600481019290925260248201526044016109e4565b6000835167ffffffffffffffff811115610e9657610e96611e50565b604051908082528060200260200182016040528015610ebf578160200160208202803683370190505b50905060005b8451811015610f1657602080820286010151610ee99060208084028701015161062e565b828281518110610efb57610efb61226f565b6020908102919091010152610f0f816122c1565b9050610ec5565b509392505050565b6000620fffff82166004820154811015610f3b5750600092915050565b600554811015610f4e5750600192915050565b600654811015610f615750600292915050565b600460035b0154811015610f785750600392915050565b50600492915050565b610a0b33838361174e565b610a0b338383611799565b610a0b3383836115dc565b6001600160a01b038116600090815260136020908152604080832054601483528184205460158452828520546016909452918420549092908315801590610fe857508215155b8015610ff357508115155b8015610ffe57508015155b1561111f5760008060008061101288610c91565b60008381526012602090815260408083208584529091529020549295509350915082900361103f57600198505b809350881561108a5761105187610c91565b600083815260126020908152604080832085845290915290205492955093509150821415806110805750838114155b1561108a57600098505b88156110d25761109986610c91565b600083815260126020908152604080832085845290915290205492955093509150821415806110c85750838114155b156110d257600098505b881561111a576110e185610c91565b600083815260126020908152604080832085845290915290205492955093509150821415806111105750838114155b1561111a57600098505b505050505b50505050919050565b61113061142a565b61113933611454565b336000908152601360205260408120541561119a573360009081526013602052604090205461116a9060019061229b565b905061118930338360016040518060200160405280600081525061149c565b336000908152601360205260408120555b33600090815260146020526040902054156111fb57336000908152601460205260409020546111cb9060019061229b565b90506111ea30338360016040518060200160405280600081525061149c565b336000908152601460205260408120555b336000908152601560205260409020541561125c573360009081526015602052604090205461122c9060019061229b565b905061124b30338360016040518060200160405280600081525061149c565b336000908152601560205260408120555b33600090815260166020526040902054156112bd573360009081526016602052604090205461128d9060019061229b565b90506112ac30338360016040518060200160405280600081525061149c565b336000908152601660205260408120555b506112c86001600355565b565b601054600e54336000908152600f60205260409020546112ea91906122ae565b43116112f557506011545b803410156113165760405163044044a560e21b815260040160405180910390fd5b336000818152600f6020526040808220439055517f663b85167cccb9640fb0a935c4853ea50b0f3dd07d2590ca19942153136cef569190a250565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6000620fffff8216600982015481101561139c5750600092915050565b600a548110156113af5750600192915050565b600b548110156113c25750600292915050565b60096003610f66565b336001600160a01b03861681148015906113ec57506113ea8682611351565b155b1561141d5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016109e4565b610c89868686868661149c565b60026003540361144d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600355565b600e546001600160a01b0382166000908152600f602052604090205461147a91906122ae565b43116114995760405163411931ff60e01b815260040160405180910390fd5b50565b6001600160a01b0384166114c657604051632bfa23e760e11b8152600060048201526024016109e4565b6001600160a01b0385166114ef57604051626a0d4560e21b8152600060048201526024016109e4565b60408051600180825260208201869052818301908152606082018590526080820190925290611521878784848761182f565b50505050505050565b816001036115535761154e338260016040518060200160405280600081525061164b565b6115a1565b81600214806115625750816003145b8061156d5750816004145b156115a157604051339082156108fc029083906000818181858888f1935050505015801561159f573d6000803e3d6000fd5b505b604051818152829033907f1187560d7b166b3122e71aedb88f19cf2f33b2d141b513fde3ca2562d19d1bcb9060200160405180910390a35050565b6001600160a01b03831661160557604051626a0d4560e21b8152600060048201526024016109e4565b604080516001808252602082018590528183019081526060820184905260a082019092526000608082018181529192916116449187918590859061182f565b5050505050565b6001600160a01b03841661167557604051632bfa23e760e11b8152600060048201526024016109e4565b60408051600180825260208201869052818301908152606082018590526080820190925290610c8960008784848761182f565b6001600160a01b0384166116d257604051632bfa23e760e11b8152600060048201526024016109e4565b6001600160a01b0385166116fb57604051626a0d4560e21b8152600060048201526024016109e4565b611644858585858561182f565b600e546001600160a01b0382166000908152600f602052604090205461172e91906122ae565b4311156114995760405163559895a360e01b815260040160405180910390fd5b6001600160a01b03831661177757604051626a0d4560e21b8152600060048201526024016109e4565b61179483600084846040518060200160405280600081525061182f565b505050565b6001600160a01b0382166117c25760405162ced3e160e81b8152600060048201526024016109e4565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61183b85858585611882565b6001600160a01b038416156116445782513390600103611874576020848101519084015161186d838989858589611a9f565b5050610c89565b610c89818787878787611bc3565b80518251146118b15781518151604051635b05999160e01b8152600481019290925260248201526044016109e4565b3360005b83518110156119c0576020818102858101820151908501909101516001600160a01b03881615611968576000828152602081815260408083206001600160a01b038c16845290915290205481811015611941576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016109e4565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b038716156119ad576000828152602081815260408083206001600160a01b038b168452909152812080548392906119a79084906122ae565b90915550505b5050806119b9906122c1565b90506118b5565b508251600103611a415760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051611a32929190918252602082015260400190565b60405180910390a45050611644565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611a90929190612369565b60405180910390a45050505050565b6001600160a01b0384163b15610c895760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611ae39089908990889088908890600401612397565b6020604051808303816000875af1925050508015611b1e575060408051601f3d908101601f19168201909252611b1b918101906123dc565b60015b611b87573d808015611b4c576040519150601f19603f3d011682016040523d82523d6000602084013e611b51565b606091505b508051600003611b7f57604051632bfa23e760e11b81526001600160a01b03861660048201526024016109e4565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b1461152157604051632bfa23e760e11b81526001600160a01b03861660048201526024016109e4565b6001600160a01b0384163b15610c895760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611c0790899089908890889088906004016123f9565b6020604051808303816000875af1925050508015611c42575060408051601f3d908101601f19168201909252611c3f918101906123dc565b60015b611c70573d808015611b4c576040519150601f19603f3d011682016040523d82523d6000602084013e611b51565b6001600160e01b0319811663bc197c8160e01b1461152157604051632bfa23e760e11b81526001600160a01b03861660048201526024016109e4565b80356001600160a01b0381168114611cc357600080fd5b919050565b60008060408385031215611cdb57600080fd5b611ce483611cac565b946020939093013593505050565b600060208284031215611d0457600080fd5b611d0d82611cac565b9392505050565b6001600160e01b03198116811461149957600080fd5b600060208284031215611d3c57600080fd5b8135611d0d81611d14565b60008060208385031215611d5a57600080fd5b823567ffffffffffffffff80821115611d7257600080fd5b818501915085601f830112611d8657600080fd5b813581811115611d9557600080fd5b8660208260051b8501011115611daa57600080fd5b60209290920196919550909350505050565b600060208284031215611dce57600080fd5b5035919050565b6000815180845260005b81811015611dfb57602081850181015186830182015201611ddf565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611d0d6020830184611dd5565b60008060408385031215611e4157600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e8f57611e8f611e50565b604052919050565b600067ffffffffffffffff821115611eb157611eb1611e50565b5060051b60200190565b600082601f830112611ecc57600080fd5b81356020611ee1611edc83611e97565b611e66565b82815260059290921b84018101918181019086841115611f0057600080fd5b8286015b84811015611f1b5780358352918301918301611f04565b509695505050505050565b600082601f830112611f3757600080fd5b813567ffffffffffffffff811115611f5157611f51611e50565b611f64601f8201601f1916602001611e66565b818152846020838601011115611f7957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611fae57600080fd5b611fb786611cac565b9450611fc560208701611cac565b9350604086013567ffffffffffffffff80821115611fe257600080fd5b611fee89838a01611ebb565b9450606088013591508082111561200457600080fd5b61201089838a01611ebb565b9350608088013591508082111561202657600080fd5b5061203388828901611f26565b9150509295509295909350565b6000806040838503121561205357600080fd5b61205c83611cac565b91506020830135801515811461207157600080fd5b809150509250929050565b6000806040838503121561208f57600080fd5b823567ffffffffffffffff808211156120a757600080fd5b818501915085601f8301126120bb57600080fd5b813560206120cb611edc83611e97565b82815260059290921b840181019181810190898411156120ea57600080fd5b948201945b8386101561210f5761210086611cac565b825294820194908201906120ef565b9650508601359250508082111561212557600080fd5b5061213285828601611ebb565b9150509250929050565b600081518084526020808501945080840160005b8381101561216c57815187529582019590820190600101612150565b509495945050505050565b602081526000611d0d602083018461213c565b6000806040838503121561219d57600080fd5b823567ffffffffffffffff808211156121b557600080fd5b6121c186838701611ebb565b9350602085013591508082111561212557600080fd5b600080604083850312156121ea57600080fd5b6121f383611cac565b915061220160208401611cac565b90509250929050565b600080600080600060a0868803121561222257600080fd5b61222b86611cac565b945061223960208701611cac565b93506040860135925060608601359150608086013567ffffffffffffffff81111561226357600080fd5b61203388828901611f26565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561065057610650612285565b8082018082111561065057610650612285565b6000600182016122d3576122d3612285565b5060010190565b600181811c908216806122ee57607f821691505b60208210810361230e57634e487b7160e01b600052602260045260246000fd5b50919050565b808202811582820484141761065057610650612285565b634e487b7160e01b600052601260045260246000fd5b6000826123505761235061232b565b500490565b6000826123645761236461232b565b500690565b60408152600061237c604083018561213c565b828103602084015261238e818561213c565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906123d190830184611dd5565b979650505050505050565b6000602082840312156123ee57600080fd5b8151611d0d81611d14565b6001600160a01b0386811682528516602082015260a0604082018190526000906124259083018661213c565b8281036060840152612437818661213c565b9050828103608084015261244b8185611dd5565b9897505050505050505056fea26469706673582212202ca3626d1be67d036d88d94a060e3cf809a8a61af7d419b456a6fa06f150681864736f6c6343000814003368747470733a2f2f6769746875622e636f6d2f6d6f6f6e73747265616d2d746f2f646567656e2d747261696c",
  "deployedBytecode": "0x6080604052600436106101db5760003560e01c80636c08995d11610102578063be59cce311610095578063e32d569011610064578063e32d5690146105a1578063e985e9c5146105ce578063ecefbad8146105ee578063f242432a1461060e57600080fd5b8063be59cce31461051e578063cd5e3c5d14610534578063cdf2f0ec1461053c578063dd88fa7f1461056957600080fd5b8063b390c0ab116100d1578063b390c0ab146104b3578063b870fe80146104d3578063b8f905c8146104e9578063b9c2edf71461050957600080fd5b80636c08995d1461042657806383ca4b6f146104465780639a0facc214610466578063a22cb4651461049357600080fd5b8063289137a11161017a578063418145cf11610149578063418145cf1461039657806344dcd143146103b65780634e1273f4146103e357806350b8aa921461041057600080fd5b8063289137a1146103165780632eb2c2d6146103365780633a134f78146103565780633a259e6a1461037657600080fd5b806303f2f420116101b657806303f2f420146102775780630e89341c1461029957806318ce0a4b146102c65780632852b71c146102e657600080fd5b8062fdd58e146101e7578063010c9b6e1461021a57806301ffc9a71461024757600080fd5b366101e257005b600080fd5b3480156101f357600080fd5b50610207610202366004611cc8565b61062e565b6040519081526020015b60405180910390f35b34801561022657600080fd5b50610207610235366004611cf2565b60146020526000908152604090205481565b34801561025357600080fd5b50610267610262366004611d2a565b610656565b6040519015158152602001610211565b34801561028357600080fd5b50610297610292366004611d47565b6106a6565b005b3480156102a557600080fd5b506102b96102b4366004611dbc565b610a0f565b6040516102119190611e1b565b3480156102d257600080fd5b506102076102e1366004611dbc565b610aa3565b3480156102f257600080fd5b506102fb610aba565b60408051938452602084019290925290820152606001610211565b34801561032257600080fd5b50610207610331366004611e2e565b610b14565b34801561034257600080fd5b50610297610351366004611f96565b610c2a565b34801561036257600080fd5b506102fb610371366004611dbc565b610c91565b34801561038257600080fd5b506102fb610391366004612040565b610cce565b3480156103a257600080fd5b506102076103b1366004611dbc565b610e39565b3480156103c257600080fd5b506102076103d1366004611cf2565b60166020526000908152604090205481565b3480156103ef57600080fd5b506104036103fe36600461207c565b610e49565b6040516102119190612177565b34801561041c57600080fd5b5061020760105481565b34801561043257600080fd5b50610207610441366004611dbc565b610f1e565b34801561045257600080fd5b5061029761046136600461218a565b610f81565b34801561047257600080fd5b50610207610481366004611cf2565b600f6020526000908152604090205481565b34801561049f57600080fd5b506102976104ae366004612040565b610f8c565b3480156104bf57600080fd5b506102976104ce366004611e2e565b610f97565b3480156104df57600080fd5b5061020760115481565b3480156104f557600080fd5b50610267610504366004611cf2565b610fa2565b34801561051557600080fd5b50610297611128565b34801561052a57600080fd5b50610207600e5481565b6102976112ca565b34801561054857600080fd5b50610207610557366004611cf2565b60156020526000908152604090205481565b34801561057557600080fd5b50610207610584366004611e2e565b601260209081526000928352604080842090915290825290205481565b3480156105ad57600080fd5b506102076105bc366004611cf2565b60136020526000908152604090205481565b3480156105da57600080fd5b506102676105e93660046121d7565b611351565b3480156105fa57600080fd5b50610207610609366004611dbc565b61137f565b34801561061a57600080fd5b5061029761062936600461220a565b6113cb565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061068757506001600160e01b031982166303a24d0760e21b145b8061065057506301ffc9a760e01b6001600160e01b0319831614610650565b6106ae61142a565b6106b733611454565b60005b81811015610a005760006106e58484848181106106d9576106d961226f565b90506020020135610c91565b50509050806000036107b157336000908152601360205260408120541561074157336000908152601360205260409020546107229060019061229b565b905061074130338360016040518060200160405280600081525061149c565b61077633308787878181106107585761075861226f565b9050602002013560016040518060200160405280600081525061149c565b8484848181106107885761078861226f565b90506020020135600161079b91906122ae565b33600090815260136020526040902055506109ed565b8060010361085b57336000908152601460205260408120541561080957336000908152601460205260409020546107ea9060019061229b565b905061080930338360016040518060200160405280600081525061149c565b61082033308787878181106107585761075861226f565b8484848181106108325761083261226f565b90506020020135600161084591906122ae565b33600090815260146020526040902055506109ed565b806002036109055733600090815260156020526040812054156108b357336000908152601560205260409020546108949060019061229b565b90506108b330338360016040518060200160405280600081525061149c565b6108ca33308787878181106107585761075861226f565b8484848181106108dc576108dc61226f565b9050602002013560016108ef91906122ae565b33600090815260156020526040902055506109ed565b806003036109af57336000908152601660205260408120541561095d573360009081526016602052604090205461093e9060019061229b565b905061095d30338360016040518060200160405280600081525061149c565b61097433308787878181106107585761075861226f565b8484848181106109865761098661226f565b90506020020135600161099991906122ae565b33600090815260166020526040902055506109ed565b8383838181106109c1576109c161226f565b90506020020135604051633d39bacf60e11b81526004016109e491815260200190565b60405180910390fd5b50806109f8816122c1565b9150506106ba565b50610a0b6001600355565b5050565b606060028054610a1e906122da565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4a906122da565b8015610a975780601f10610a6c57610100808354040283529160200191610a97565b820191906000526020600020905b815481529060010190602001808311610a7a57829003601f168201915b50505050509050919050565b60098160058110610ab357600080fd5b0154905081565b6000806000610ac761142a565b6000806000610ad93361039133610fa2565b925092509250610ae9828261152a565b610afe336000908152600f6020526040812055565b91945092509050610b0f6001600355565b909192565b6000610b1e61142a565b610b29826002612314565b610b33338561062e565b1015610b5557604051633bf0eca360e21b8152600481018490526024016109e4565b610b6083601c6122ae565b9050610b773384610b72856002612314565b6115dc565b610b923382846040518060200160405280600081525061164b565b6000806000610ba084610c91565b60008381526012602090815260408083208584529091529020549295509093509150811115610c1d57600083815260126020908152604080832085845282529182902083905590518581528291849186917f4b4325b9305cc4ce94c0e31c581c16ade0808971cfac8470d7a9c67ddbc9f629910160405180910390a45b5050506106506001600355565b336001600160a01b0386168114801590610c4b5750610c498682611351565b155b15610c7c5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016109e4565b610c8986868686866116a8565b505050505050565b60008080610ca0601c85612341565b90506004610caf601c86612355565b610cb99190612341565b9150610cc6600485612355565b949193509150565b6001600160a01b0382166000908152600f6020526040812054819081904311610d0a5760405163bfc2936d60e01b815260040160405180910390fd5b610d1385611708565b6001600160a01b0385166000818152600f6020908152604080832054815190408184015280820194909452805180850382018152606090940190528251920191909120908515610d6d57610d668261137f565b9050610d79565b610d7682610f1e565b90505b600081600103610dd9576000610da560076e3fffffffffffffffffffffffffffff601487901c16612355565b90506000610db86004608a87901c612355565b905080610dc6836004612314565b610dd091906122ae565b92505050610e2b565b81600203610e0b57601054610df390600181901c906122ae565b90504760061c811115610e0657504760061c5b610e2b565b81600303610e1d57504760061c610e2b565b81600403610e2b57504760011c5b919450925090509250925092565b60048160058110610ab357600080fd5b60608151835114610e7a5781518351604051635b05999160e01b8152600481019290925260248201526044016109e4565b6000835167ffffffffffffffff811115610e9657610e96611e50565b604051908082528060200260200182016040528015610ebf578160200160208202803683370190505b50905060005b8451811015610f1657602080820286010151610ee99060208084028701015161062e565b828281518110610efb57610efb61226f565b6020908102919091010152610f0f816122c1565b9050610ec5565b509392505050565b6000620fffff82166004820154811015610f3b5750600092915050565b600554811015610f4e5750600192915050565b600654811015610f615750600292915050565b600460035b0154811015610f785750600392915050565b50600492915050565b610a0b33838361174e565b610a0b338383611799565b610a0b3383836115dc565b6001600160a01b038116600090815260136020908152604080832054601483528184205460158452828520546016909452918420549092908315801590610fe857508215155b8015610ff357508115155b8015610ffe57508015155b1561111f5760008060008061101288610c91565b60008381526012602090815260408083208584529091529020549295509350915082900361103f57600198505b809350881561108a5761105187610c91565b600083815260126020908152604080832085845290915290205492955093509150821415806110805750838114155b1561108a57600098505b88156110d25761109986610c91565b600083815260126020908152604080832085845290915290205492955093509150821415806110c85750838114155b156110d257600098505b881561111a576110e185610c91565b600083815260126020908152604080832085845290915290205492955093509150821415806111105750838114155b1561111a57600098505b505050505b50505050919050565b61113061142a565b61113933611454565b336000908152601360205260408120541561119a573360009081526013602052604090205461116a9060019061229b565b905061118930338360016040518060200160405280600081525061149c565b336000908152601360205260408120555b33600090815260146020526040902054156111fb57336000908152601460205260409020546111cb9060019061229b565b90506111ea30338360016040518060200160405280600081525061149c565b336000908152601460205260408120555b336000908152601560205260409020541561125c573360009081526015602052604090205461122c9060019061229b565b905061124b30338360016040518060200160405280600081525061149c565b336000908152601560205260408120555b33600090815260166020526040902054156112bd573360009081526016602052604090205461128d9060019061229b565b90506112ac30338360016040518060200160405280600081525061149c565b336000908152601660205260408120555b506112c86001600355565b565b601054600e54336000908152600f60205260409020546112ea91906122ae565b43116112f557506011545b803410156113165760405163044044a560e21b815260040160405180910390fd5b336000818152600f6020526040808220439055517f663b85167cccb9640fb0a935c4853ea50b0f3dd07d2590ca19942153136cef569190a250565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6000620fffff8216600982015481101561139c5750600092915050565b600a548110156113af5750600192915050565b600b548110156113c25750600292915050565b60096003610f66565b336001600160a01b03861681148015906113ec57506113ea8682611351565b155b1561141d5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016109e4565b610c89868686868661149c565b60026003540361144d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600355565b600e546001600160a01b0382166000908152600f602052604090205461147a91906122ae565b43116114995760405163411931ff60e01b815260040160405180910390fd5b50565b6001600160a01b0384166114c657604051632bfa23e760e11b8152600060048201526024016109e4565b6001600160a01b0385166114ef57604051626a0d4560e21b8152600060048201526024016109e4565b60408051600180825260208201869052818301908152606082018590526080820190925290611521878784848761182f565b50505050505050565b816001036115535761154e338260016040518060200160405280600081525061164b565b6115a1565b81600214806115625750816003145b8061156d5750816004145b156115a157604051339082156108fc029083906000818181858888f1935050505015801561159f573d6000803e3d6000fd5b505b604051818152829033907f1187560d7b166b3122e71aedb88f19cf2f33b2d141b513fde3ca2562d19d1bcb9060200160405180910390a35050565b6001600160a01b03831661160557604051626a0d4560e21b8152600060048201526024016109e4565b604080516001808252602082018590528183019081526060820184905260a082019092526000608082018181529192916116449187918590859061182f565b5050505050565b6001600160a01b03841661167557604051632bfa23e760e11b8152600060048201526024016109e4565b60408051600180825260208201869052818301908152606082018590526080820190925290610c8960008784848761182f565b6001600160a01b0384166116d257604051632bfa23e760e11b8152600060048201526024016109e4565b6001600160a01b0385166116fb57604051626a0d4560e21b8152600060048201526024016109e4565b611644858585858561182f565b600e546001600160a01b0382166000908152600f602052604090205461172e91906122ae565b4311156114995760405163559895a360e01b815260040160405180910390fd5b6001600160a01b03831661177757604051626a0d4560e21b8152600060048201526024016109e4565b61179483600084846040518060200160405280600081525061182f565b505050565b6001600160a01b0382166117c25760405162ced3e160e81b8152600060048201526024016109e4565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61183b85858585611882565b6001600160a01b038416156116445782513390600103611874576020848101519084015161186d838989858589611a9f565b5050610c89565b610c89818787878787611bc3565b80518251146118b15781518151604051635b05999160e01b8152600481019290925260248201526044016109e4565b3360005b83518110156119c0576020818102858101820151908501909101516001600160a01b03881615611968576000828152602081815260408083206001600160a01b038c16845290915290205481811015611941576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016109e4565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b038716156119ad576000828152602081815260408083206001600160a01b038b168452909152812080548392906119a79084906122ae565b90915550505b5050806119b9906122c1565b90506118b5565b508251600103611a415760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051611a32929190918252602082015260400190565b60405180910390a45050611644565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611a90929190612369565b60405180910390a45050505050565b6001600160a01b0384163b15610c895760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611ae39089908990889088908890600401612397565b6020604051808303816000875af1925050508015611b1e575060408051601f3d908101601f19168201909252611b1b918101906123dc565b60015b611b87573d808015611b4c576040519150601f19603f3d011682016040523d82523d6000602084013e611b51565b606091505b508051600003611b7f57604051632bfa23e760e11b81526001600160a01b03861660048201526024016109e4565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b1461152157604051632bfa23e760e11b81526001600160a01b03861660048201526024016109e4565b6001600160a01b0384163b15610c895760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611c0790899089908890889088906004016123f9565b6020604051808303816000875af1925050508015611c42575060408051601f3d908101601f19168201909252611c3f918101906123dc565b60015b611c70573d808015611b4c576040519150601f19603f3d011682016040523d82523d6000602084013e611b51565b6001600160e01b0319811663bc197c8160e01b1461152157604051632bfa23e760e11b81526001600160a01b03861660048201526024016109e4565b80356001600160a01b0381168114611cc357600080fd5b919050565b60008060408385031215611cdb57600080fd5b611ce483611cac565b946020939093013593505050565b600060208284031215611d0457600080fd5b611d0d82611cac565b9392505050565b6001600160e01b03198116811461149957600080fd5b600060208284031215611d3c57600080fd5b8135611d0d81611d14565b60008060208385031215611d5a57600080fd5b823567ffffffffffffffff80821115611d7257600080fd5b818501915085601f830112611d8657600080fd5b813581811115611d9557600080fd5b8660208260051b8501011115611daa57600080fd5b60209290920196919550909350505050565b600060208284031215611dce57600080fd5b5035919050565b6000815180845260005b81811015611dfb57602081850181015186830182015201611ddf565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611d0d6020830184611dd5565b60008060408385031215611e4157600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e8f57611e8f611e50565b604052919050565b600067ffffffffffffffff821115611eb157611eb1611e50565b5060051b60200190565b600082601f830112611ecc57600080fd5b81356020611ee1611edc83611e97565b611e66565b82815260059290921b84018101918181019086841115611f0057600080fd5b8286015b84811015611f1b5780358352918301918301611f04565b509695505050505050565b600082601f830112611f3757600080fd5b813567ffffffffffffffff811115611f5157611f51611e50565b611f64601f8201601f1916602001611e66565b818152846020838601011115611f7957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611fae57600080fd5b611fb786611cac565b9450611fc560208701611cac565b9350604086013567ffffffffffffffff80821115611fe257600080fd5b611fee89838a01611ebb565b9450606088013591508082111561200457600080fd5b61201089838a01611ebb565b9350608088013591508082111561202657600080fd5b5061203388828901611f26565b9150509295509295909350565b6000806040838503121561205357600080fd5b61205c83611cac565b91506020830135801515811461207157600080fd5b809150509250929050565b6000806040838503121561208f57600080fd5b823567ffffffffffffffff808211156120a757600080fd5b818501915085601f8301126120bb57600080fd5b813560206120cb611edc83611e97565b82815260059290921b840181019181810190898411156120ea57600080fd5b948201945b8386101561210f5761210086611cac565b825294820194908201906120ef565b9650508601359250508082111561212557600080fd5b5061213285828601611ebb565b9150509250929050565b600081518084526020808501945080840160005b8381101561216c57815187529582019590820190600101612150565b509495945050505050565b602081526000611d0d602083018461213c565b6000806040838503121561219d57600080fd5b823567ffffffffffffffff808211156121b557600080fd5b6121c186838701611ebb565b9350602085013591508082111561212557600080fd5b600080604083850312156121ea57600080fd5b6121f383611cac565b915061220160208401611cac565b90509250929050565b600080600080600060a0868803121561222257600080fd5b61222b86611cac565b945061223960208701611cac565b93506040860135925060608601359150608086013567ffffffffffffffff81111561226357600080fd5b61203388828901611f26565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561065057610650612285565b8082018082111561065057610650612285565b6000600182016122d3576122d3612285565b5060010190565b600181811c908216806122ee57607f821691505b60208210810361230e57634e487b7160e01b600052602260045260246000fd5b50919050565b808202811582820484141761065057610650612285565b634e487b7160e01b600052601260045260246000fd5b6000826123505761235061232b565b500490565b6000826123645761236461232b565b500690565b60408152600061237c604083018561213c565b828103602084015261238e818561213c565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906123d190830184611dd5565b979650505050505050565b6000602082840312156123ee57600080fd5b8151611d0d81611d14565b6001600160a01b0386811682528516602082015260a0604082018190526000906124259083018661213c565b8281036060840152612437818661213c565b9050828103608084015261244b8185611dd5565b9897505050505050505056fea26469706673582212202ca3626d1be67d036d88d94a060e3cf809a8a61af7d419b456a6fa06f150681864736f6c63430008140033",
  "devdoc": {
    "author": "Moonstream Engineering (engineering@moonstream.to)",
    "errors": {
      "ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC1155InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC1155InvalidArrayLength(uint256,uint256)": [
        {
          "details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
          "params": {
            "idsLength": "Length of the array of token identifiers",
            "valuesLength": "Length of the array of token amounts"
          }
        }
      ],
      "ERC1155InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC1155InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC1155InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC1155MissingApprovalForAll(address,address)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "title": "Jackpot Junction game contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "EquippedBeasts(address)": {
        "notice": "EquippedBeasts indicates the poolID of the beasts that are currently equipped by the given player. The mapping is address(player) => poolID + 1. The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot."
      },
      "EquippedBody(address)": {
        "notice": "EquippedBody indicates the poolID of the body that is currently equipped by the given player. The mapping is address(player) => poolID + 1. The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot."
      },
      "EquippedCover(address)": {
        "notice": "EquippedCover indicates the poolID of the cover that is currently equipped by the given player. The mapping is address(player) => poolID + 1. The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot."
      },
      "EquippedWheels(address)": {
        "notice": "EquippedWheels indicates the poolID of the wheels that are currently equipped by the given player. The mapping is address(player) => poolID + 1. The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot."
      }
    },
    "notice": "This is the game contract for The Degen Trail: Jackpot Junction, a game in world of The Degen Trail.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 178,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 184,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 186,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3837,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6067,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "UnmodifiedOutcomesCumulativeMass",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 6097,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "ImprovedOutcomesCumulativeMass",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 6099,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "BlocksToAct",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6103,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "LastRollBlock",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6105,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "CostToRoll",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6107,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "CostToReroll",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 6113,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "CurrentTier",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6118,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "EquippedCover",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6123,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "EquippedBody",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6128,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "EquippedWheels",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6133,
        "contract": "src/JackpotJunction.sol:JackpotJunction",
        "label": "EquippedBeasts",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}