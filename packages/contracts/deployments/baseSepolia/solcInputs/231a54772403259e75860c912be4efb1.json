{
  "language": "Solidity",
  "sources": {
    "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard ERC20 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\r\n */\r\ninterface IERC20Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC721 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\r\n */\r\ninterface IERC721Errors {\r\n    /**\r\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\r\n     * Used in balance queries.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721InvalidOwner(address owner);\r\n\r\n    /**\r\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param tokenId Identifier number of a token.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC721InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC721InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC721InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC1155 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\r\n */\r\ninterface IERC1155Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC1155MissingApprovalForAll(address operator, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC1155InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC1155InvalidOperator(address operator);\r\n\r\n    /**\r\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\r\n     * Used in batch transfers.\r\n     * @param idsLength Length of the array of token identifiers\r\n     * @param valuesLength Length of the array of token amounts\r\n     */\r\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC1155} from \"./IERC1155.sol\";\r\nimport {IERC1155Receiver} from \"./IERC1155Receiver.sol\";\r\nimport {IERC1155MetadataURI} from \"./extensions/IERC1155MetadataURI.sol\";\r\nimport {Context} from \"../../utils/Context.sol\";\r\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\r\nimport {Arrays} from \"../../utils/Arrays.sol\";\r\nimport {IERC1155Errors} from \"../../interfaces/draft-IERC6093.sol\";\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n */\r\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\r\n    using Arrays for uint256[];\r\n    using Arrays for address[];\r\n\r\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\r\n\r\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] memory accounts,\r\n        uint256[] memory ids\r\n    ) public view virtual returns (uint256[] memory) {\r\n        if (accounts.length != ids.length) {\r\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\r\n        }\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\r\n        address sender = _msgSender();\r\n        if (from != sender && !isApprovedForAll(from, sender)) {\r\n            revert ERC1155MissingApprovalForAll(sender, from);\r\n        }\r\n        _safeTransferFrom(from, to, id, value, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) public virtual {\r\n        address sender = _msgSender();\r\n        if (from != sender && !isApprovedForAll(from, sender)) {\r\n            revert ERC1155MissingApprovalForAll(sender, from);\r\n        }\r\n        _safeBatchTransferFrom(from, to, ids, values, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\r\n     * (or `to`) is the zero address.\r\n     *\r\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\r\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\r\n     * - `ids` and `values` must have the same length.\r\n     *\r\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\r\n     */\r\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\r\n        if (ids.length != values.length) {\r\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\r\n        }\r\n\r\n        address operator = _msgSender();\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids.unsafeMemoryAccess(i);\r\n            uint256 value = values.unsafeMemoryAccess(i);\r\n\r\n            if (from != address(0)) {\r\n                uint256 fromBalance = _balances[id][from];\r\n                if (fromBalance < value) {\r\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\r\n                }\r\n                unchecked {\r\n                    // Overflow not possible: value <= fromBalance\r\n                    _balances[id][from] = fromBalance - value;\r\n                }\r\n            }\r\n\r\n            if (to != address(0)) {\r\n                _balances[id][to] += value;\r\n            }\r\n        }\r\n\r\n        if (ids.length == 1) {\r\n            uint256 id = ids.unsafeMemoryAccess(0);\r\n            uint256 value = values.unsafeMemoryAccess(0);\r\n            emit TransferSingle(operator, from, to, id, value);\r\n        } else {\r\n            emit TransferBatch(operator, from, to, ids, values);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Version of {_update} that performs the token acceptance check by calling\r\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\r\n     * contains code (eg. is a smart contract at the moment of execution).\r\n     *\r\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\r\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\r\n     * overriding {_update} instead.\r\n     */\r\n    function _updateWithAcceptanceCheck(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _update(from, to, ids, values);\r\n        if (to != address(0)) {\r\n            address operator = _msgSender();\r\n            if (ids.length == 1) {\r\n                uint256 id = ids.unsafeMemoryAccess(0);\r\n                uint256 value = values.unsafeMemoryAccess(0);\r\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\r\n            } else {\r\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\r\n        if (to == address(0)) {\r\n            revert ERC1155InvalidReceiver(address(0));\r\n        }\r\n        if (from == address(0)) {\r\n            revert ERC1155InvalidSender(address(0));\r\n        }\r\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\r\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     * - `ids` and `values` must have the same length.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) internal {\r\n        if (to == address(0)) {\r\n            revert ERC1155InvalidReceiver(address(0));\r\n        }\r\n        if (from == address(0)) {\r\n            revert ERC1155InvalidSender(address(0));\r\n        }\r\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the values in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\r\n        if (to == address(0)) {\r\n            revert ERC1155InvalidReceiver(address(0));\r\n        }\r\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\r\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `values` must have the same length.\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\r\n        if (to == address(0)) {\r\n            revert ERC1155InvalidReceiver(address(0));\r\n        }\r\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have at least `value` amount of tokens of type `id`.\r\n     */\r\n    function _burn(address from, uint256 id, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC1155InvalidSender(address(0));\r\n        }\r\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\r\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have at least `value` amount of tokens of type `id`.\r\n     * - `ids` and `values` must have the same length.\r\n     */\r\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\r\n        if (from == address(0)) {\r\n            revert ERC1155InvalidSender(address(0));\r\n        }\r\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the zero address.\r\n     */\r\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\r\n        if (operator == address(0)) {\r\n            revert ERC1155InvalidOperator(address(0));\r\n        }\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\r\n     * if it contains code at the moment of execution.\r\n     */\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.code.length > 0) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    // Tokens rejected\r\n                    revert ERC1155InvalidReceiver(to);\r\n                }\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    // non-ERC1155Receiver implementer\r\n                    revert ERC1155InvalidReceiver(to);\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\r\n     * if it contains code at the moment of execution.\r\n     */\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.code.length > 0) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    // Tokens rejected\r\n                    revert ERC1155InvalidReceiver(to);\r\n                }\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    // non-ERC1155Receiver implementer\r\n                    revert ERC1155InvalidReceiver(to);\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Creates an array in memory with only one value for each of the elements provided.\r\n     */\r\n    function _asSingletonArrays(\r\n        uint256 element1,\r\n        uint256 element2\r\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Load the free memory pointer\r\n            array1 := mload(0x40)\r\n            // Set array length to 1\r\n            mstore(array1, 1)\r\n            // Store the single element at the next word after the length (where content starts)\r\n            mstore(add(array1, 0x20), element1)\r\n\r\n            // Repeat for next array locating it right after the first array\r\n            array2 := add(array1, 0x40)\r\n            mstore(array2, 1)\r\n            mstore(add(array2, 0x20), element2)\r\n\r\n            // Update the free memory pointer by pointing after the second array\r\n            mstore(0x40, add(array2, 0x40))\r\n        }\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC1155} from \"../IERC1155.sol\";\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] calldata accounts,\r\n        uint256[] calldata ids\r\n    ) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\r\n     *\r\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\r\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\r\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\r\n     * reentrancy guards when interacting with untrusted contracts.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\r\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\r\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\r\n     * reentrancy guards when interacting with untrusted contracts.\r\n     *\r\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `values` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface that must be implemented by smart contracts in order to receive\r\n * ERC-1155 token transfers.\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC20} from \"./IERC20.sol\";\r\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\r\nimport {Context} from \"../../utils/Context.sol\";\r\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n */\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address account => uint256) private _balances;\r\n\r\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `value`.\r\n     */\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `value`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `value`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\r\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\r\n     * this function.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: value <= fromBalance <= totalSupply.\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\r\n     * Relies on the `_update` mechanism\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\r\n     * Relies on the `_update` mechanism.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n     *\r\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\r\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\r\n     * `Approval` event during `transferFrom` operations.\r\n     *\r\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\r\n     * true using the following override:\r\n     * ```\r\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\r\n     *     super._approve(owner, spender, value, true);\r\n     * }\r\n     * ```\r\n     *\r\n     * Requirements are the same as {_approve}.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\r\n     *\r\n     * Does not update the allowance value in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Does not emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC20} from \"../IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC20} from \"../IERC20.sol\";\r\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\r\nimport {Address} from \"../../../utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC721} from \"./IERC721.sol\";\r\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\r\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\r\nimport {Context} from \"../../utils/Context.sol\";\r\nimport {Strings} from \"../../utils/Strings.sol\";\r\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\r\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    mapping(uint256 tokenId => address) private _owners;\r\n\r\n    mapping(address owner => uint256) private _balances;\r\n\r\n    mapping(uint256 tokenId => address) private _tokenApprovals;\r\n\r\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual returns (uint256) {\r\n        if (owner == address(0)) {\r\n            revert ERC721InvalidOwner(address(0));\r\n        }\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\r\n        return _requireOwned(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\r\n        _requireOwned(tokenId);\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual {\r\n        _approve(to, tokenId, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\r\n        _requireOwned(tokenId);\r\n\r\n        return _getApproved(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\r\n        if (to == address(0)) {\r\n            revert ERC721InvalidReceiver(address(0));\r\n        }\r\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\r\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\r\n        address previousOwner = _update(to, tokenId, _msgSender());\r\n        if (previousOwner != from) {\r\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\r\n        transferFrom(from, to, tokenId);\r\n        _checkOnERC721Received(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\r\n     *\r\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\r\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\r\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\r\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\r\n     */\r\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\r\n        return _owners[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\r\n     */\r\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\r\n     * particular (ignoring whether it is owned by `owner`).\r\n     *\r\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\r\n     * assumption.\r\n     */\r\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        return\r\n            spender != address(0) &&\r\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\r\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\r\n     * the `spender` for the specific `tokenId`.\r\n     *\r\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\r\n     * assumption.\r\n     */\r\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\r\n        if (!_isAuthorized(owner, spender, tokenId)) {\r\n            if (owner == address(0)) {\r\n                revert ERC721NonexistentToken(tokenId);\r\n            } else {\r\n                revert ERC721InsufficientApproval(spender, tokenId);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\r\n     *\r\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\r\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\r\n     *\r\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\r\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\r\n     * remain consistent with one another.\r\n     */\r\n    function _increaseBalance(address account, uint128 value) internal virtual {\r\n        unchecked {\r\n            _balances[account] += value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\r\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\r\n     *\r\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\r\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\r\n     */\r\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\r\n        address from = _ownerOf(tokenId);\r\n\r\n        // Perform (optional) operator check\r\n        if (auth != address(0)) {\r\n            _checkAuthorized(from, auth, tokenId);\r\n        }\r\n\r\n        // Execute the update\r\n        if (from != address(0)) {\r\n            // Clear approval. No need to re-authorize or emit the Approval event\r\n            _approve(address(0), tokenId, address(0), false);\r\n\r\n            unchecked {\r\n                _balances[from] -= 1;\r\n            }\r\n        }\r\n\r\n        if (to != address(0)) {\r\n            unchecked {\r\n                _balances[to] += 1;\r\n            }\r\n        }\r\n\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        return from;\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        if (to == address(0)) {\r\n            revert ERC721InvalidReceiver(address(0));\r\n        }\r\n        address previousOwner = _update(to, tokenId, address(0));\r\n        if (previousOwner != address(0)) {\r\n            revert ERC721InvalidSender(address(0));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\r\n        _mint(to, tokenId);\r\n        _checkOnERC721Received(address(0), to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal {\r\n        address previousOwner = _update(address(0), tokenId, address(0));\r\n        if (previousOwner == address(0)) {\r\n            revert ERC721NonexistentToken(tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal {\r\n        if (to == address(0)) {\r\n            revert ERC721InvalidReceiver(address(0));\r\n        }\r\n        address previousOwner = _update(to, tokenId, address(0));\r\n        if (previousOwner == address(0)) {\r\n            revert ERC721NonexistentToken(tokenId);\r\n        } else if (previousOwner != from) {\r\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\r\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\r\n     *\r\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\r\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\r\n        _safeTransfer(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        _checkOnERC721Received(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\r\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     */\r\n    function _approve(address to, uint256 tokenId, address auth) internal {\r\n        _approve(to, tokenId, auth, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\r\n     * emitted in the context of transfers.\r\n     */\r\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\r\n        // Avoid reading the owner unless necessary\r\n        if (emitEvent || auth != address(0)) {\r\n            address owner = _requireOwned(tokenId);\r\n\r\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\r\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\r\n                revert ERC721InvalidApprover(auth);\r\n            }\r\n\r\n            if (emitEvent) {\r\n                emit Approval(owner, to, tokenId);\r\n            }\r\n        }\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Requirements:\r\n     * - operator can't be the address zero.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\r\n        if (operator == address(0)) {\r\n            revert ERC721InvalidOperator(operator);\r\n        }\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\r\n     * Returns the owner.\r\n     *\r\n     * Overrides to ownership logic should be done to {_ownerOf}.\r\n     */\r\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\r\n        address owner = _ownerOf(tokenId);\r\n        if (owner == address(0)) {\r\n            revert ERC721NonexistentToken(tokenId);\r\n        }\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\r\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param data bytes optional data to send along with the call\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\r\n        if (to.code.length > 0) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\r\n                if (retval != IERC721Receiver.onERC721Received.selector) {\r\n                    revert ERC721InvalidReceiver(to);\r\n                }\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert ERC721InvalidReceiver(to);\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {ERC721} from \"../ERC721.sol\";\r\nimport {IERC721Enumerable} from \"./IERC721Enumerable.sol\";\r\nimport {IERC165} from \"../../../utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\r\n * of all the token ids in the contract as well as all token ids owned by each account.\r\n *\r\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\r\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\r\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\r\n\r\n    uint256[] private _allTokens;\r\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev An `owner`'s token query was out of bounds for `index`.\r\n     *\r\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\r\n     */\r\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\r\n\r\n    /**\r\n     * @dev Batch mint is not allowed.\r\n     */\r\n    error ERC721EnumerableForbiddenBatchMint();\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\r\n        if (index >= balanceOf(owner)) {\r\n            revert ERC721OutOfBoundsIndex(owner, index);\r\n        }\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\r\n        if (index >= totalSupply()) {\r\n            revert ERC721OutOfBoundsIndex(address(0), index);\r\n        }\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC721-_update}.\r\n     */\r\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\r\n        address previousOwner = super._update(to, tokenId, auth);\r\n\r\n        if (previousOwner == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (previousOwner != to) {\r\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (previousOwner != to) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n\r\n        return previousOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = balanceOf(to) - 1;\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = balanceOf(from);\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n\r\n    /**\r\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\r\n     */\r\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\r\n        if (amount > 0) {\r\n            revert ERC721EnumerableForbiddenBatchMint();\r\n        }\r\n        super._increaseBalance(account, amount);\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC721} from \"../IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC721} from \"../IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\r\n     *   {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the address zero.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\r\n     * reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {StorageSlot} from \"./StorageSlot.sol\";\r\nimport {Math} from \"./math/Math.sol\";\r\n\r\n/**\r\n * @dev Collection of functions related to array types.\r\n */\r\nlibrary Arrays {\r\n    using StorageSlot for bytes32;\r\n\r\n    /**\r\n     * @dev Searches a sorted `array` and returns the first index that contains\r\n     * a value greater or equal to `element`. If no such index exists (i.e. all\r\n     * values in the array are strictly less than `element`), the array length is\r\n     * returned. Time complexity O(log n).\r\n     *\r\n     * `array` is expected to be sorted in ascending order, and to contain no\r\n     * repeated elements.\r\n     */\r\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\r\n        uint256 low = 0;\r\n        uint256 high = array.length;\r\n\r\n        if (high == 0) {\r\n            return 0;\r\n        }\r\n\r\n        while (low < high) {\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\r\n            // because Math.average rounds towards zero (it does integer division with truncation).\r\n            if (unsafeAccess(array, mid).value > element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\r\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\r\n     *\r\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\r\n     */\r\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\r\n        bytes32 slot;\r\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\r\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0, arr.slot)\r\n            slot := add(keccak256(0, 0x20), pos)\r\n        }\r\n        return slot.getAddressSlot();\r\n    }\r\n\r\n    /**\r\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\r\n     *\r\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\r\n     */\r\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\r\n        bytes32 slot;\r\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\r\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0, arr.slot)\r\n            slot := add(keccak256(0, 0x20), pos)\r\n        }\r\n        return slot.getBytes32Slot();\r\n    }\r\n\r\n    /**\r\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\r\n     *\r\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\r\n     */\r\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\r\n        bytes32 slot;\r\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\r\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0, arr.slot)\r\n            slot := add(keccak256(0, 0x20), pos)\r\n        }\r\n        return slot.getUint256Slot();\r\n    }\r\n\r\n    /**\r\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\r\n     *\r\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\r\n     */\r\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\r\n        assembly {\r\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\r\n     *\r\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\r\n     */\r\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\r\n        assembly {\r\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\r\n        }\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC165} from \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Muldiv operation overflow.\r\n     */\r\n    error MathOverflowedMulDiv();\r\n\r\n    enum Rounding {\r\n        Floor, // Toward negative infinity\r\n        Ceil, // Toward positive infinity\r\n        Trunc, // Toward zero\r\n        Expand // Away from zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds towards infinity instead\r\n     * of rounding towards zero.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b == 0) {\r\n            // Guarantee the same behavior as in a regular Solidity division.\r\n            return a / b;\r\n        }\r\n\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\r\n     * denominator == 0.\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\r\n     * Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            if (denominator <= prod1) {\r\n                revert MathOverflowedMulDiv();\r\n            }\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\r\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            uint256 twos = denominator & (0 - denominator);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\r\n            // works in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\r\n     * towards zero.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\r\n     */\r\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\r\n        return uint8(rounding) % 2 == 1;\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\r\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```solidity\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(newImplementation.code.length > 0);\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n */\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    struct StringSlot {\r\n        string value;\r\n    }\r\n\r\n    struct BytesSlot {\r\n        bytes value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\r\n     */\r\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\r\n     */\r\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\r\n     */\r\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {Math} from \"./math/Math.sol\";\r\nimport {SignedMath} from \"./math/SignedMath.sol\";\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\r\n    uint8 private constant ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev The `value` string doesn't fit in the specified `length`.\r\n     */\r\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toStringSigned(int256 value) internal pure returns (string memory) {\r\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        uint256 localValue = value;\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\r\n            localValue >>= 4;\r\n        }\r\n        if (localValue != 0) {\r\n            revert StringsInsufficientHexLength(value, length);\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\r\n     * representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n"
    },
    "src/Bandit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.13;\r\n\r\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\r\nimport {IERC721} from \"../lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\r\nimport {SafeERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n/// @title Bandit contract meant to be used by accounts\r\n/// @author Moonstream Engineering (engineering@moonstream.to)\r\n///\r\n/// @notice A Bandit implements a fully on-chain single-player fog-of-war mechanic that produces RNG via two\r\n/// player-submitted transactions. First, a player submits a transaction expressing their intent to\r\n/// generate RNG. Second, the player submits a transaction that uses RNG derived from the block hash\r\n/// of their first transaction.\r\n///\r\n/// @notice The player has a limited number of blocks to submit the second transaction. If they fail to submit\r\n/// it in time, the entropy is wasted.\r\n///\r\n/// @notice The player may also elect to re-roll RNG by submitting a new transaction before the block deadline\r\n/// in which they pay a fee to re-roll. If they elect to do this, the block hash of the block in which\r\n/// the transaction representing their intent to re-roll is used as the new source of entropy. The block\r\n/// deadline is then calculated from this transaction block.\r\ncontract PlayerBandit {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event PlayerRoll(address indexed player);\r\n    event PlayerEntropyUsed(address indexed player, bytes32 entropy);\r\n\r\n    // Number of blocks that players have to act once. Exceeding this deadline after their roll action\r\n    // will result in the roll being wasted.\r\n    uint256 public BlocksToAct;\r\n\r\n    // Fee token (ERC20).\r\n    IERC20 public FeeToken;\r\n\r\n    // Fee for first roll.\r\n    uint256 public RollFee;\r\n\r\n    // Fee for re-roll.\r\n    uint256 public RerollFee;\r\n\r\n    // Block number of last roll for player.\r\n    mapping(address => uint256) public LastRollForPlayer;\r\n\r\n    error PlayerDeadlineExceeded(address player);\r\n    error WaitForPlayerTick(address player);\r\n\r\n    function _postRoll() internal virtual {}\r\n\r\n    /// @param blocksToAct Number of blocks that a player has to decide whether to accept their fate or re-roll. This parameter applies to every such decision point.\r\n    /// @param feeTokenAddress Address of ERC20 token which represents fees.\r\n    /// @param rollFee Fee for first roll on any action.\r\n    /// @param rerollFee Fee for re-roll on any action, assuming player doesn't want to accept their fate.\r\n    constructor(uint256 blocksToAct, address feeTokenAddress, uint256 rollFee, uint256 rerollFee) {\r\n        BlocksToAct = blocksToAct;\r\n        FeeToken = IERC20(feeTokenAddress);\r\n        RollFee = rollFee;\r\n        RerollFee = rerollFee;\r\n    }\r\n\r\n    function rollForPlayer() public returns (uint256) {\r\n        FeeToken.safeTransferFrom(msg.sender, address(this), RollFee);\r\n        LastRollForPlayer[msg.sender] = block.number;\r\n        emit PlayerRoll(msg.sender);\r\n        _postRoll();\r\n        return block.number;\r\n    }\r\n\r\n    function _checkPlayerDeadline(address player) internal view {\r\n        uint256 elapsed = block.number - LastRollForPlayer[player];\r\n        if (elapsed > BlocksToAct) {\r\n            revert PlayerDeadlineExceeded(player);\r\n        }\r\n    }\r\n\r\n    function _waitForTickForPlayer(address player) internal view {\r\n        if (block.number <= LastRollForPlayer[player]) {\r\n            revert WaitForPlayerTick(player);\r\n        }\r\n    }\r\n\r\n    function _entropyForPlayer(address player) internal returns (bytes32) {\r\n        _checkPlayerDeadline(player);\r\n        _waitForTickForPlayer(player);\r\n        bytes32 entropy = blockhash(LastRollForPlayer[player]);\r\n        emit PlayerEntropyUsed(player, entropy);\r\n        delete LastRollForPlayer[player];\r\n        return entropy;\r\n    }\r\n\r\n    function rerollForPlayer() public returns (uint256) {\r\n        _checkPlayerDeadline(msg.sender);\r\n        FeeToken.safeTransferFrom(msg.sender, address(this), RerollFee);\r\n        LastRollForPlayer[msg.sender] = block.number;\r\n        emit PlayerRoll(msg.sender);\r\n        _postRoll();\r\n        return block.number;\r\n    }\r\n}\r\n\r\n/// @title Bandit contract meant to be used by ERC721 tokens\r\n/// @author Moonstream Engineering (engineering@moonstream.to)\r\n///\r\n/// @notice This is analogous to the PlayerBandit, except that each action is related to an ERC721 token\r\n/// rather than an Ethereum account.\r\ncontract NFTBandit {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event NFTRoll(address indexed tokenAddress, uint256 indexed tokenID);\r\n    event NFTEntropyUsed(address indexed tokenAddress, uint256 indexed tokenID, bytes32 entropy);\r\n\r\n    // Number of blocks that players have to act once. Exceeding this deadline after their roll action\r\n    // will result in the roll being wasted.\r\n    uint256 public BlocksToAct;\r\n\r\n    // Fee token (ERC20).\r\n    IERC20 public FeeToken;\r\n\r\n    // Fee for first roll.\r\n    uint256 public RollFee;\r\n\r\n    // Fee for re-roll.\r\n    uint256 public RerollFee;\r\n\r\n    // Block number for last roll for an NFT.\r\n    mapping(address => mapping(uint256 => uint256)) public LastRollForNFT;\r\n\r\n    error NFTDeadlineExceeded(address tokenAddress, uint256 tokenID);\r\n    error WaitForNFTTick(address tokenAddress, uint256 tokenID);\r\n    error NFTNotOwnedByPlayer(address player, address tokenAddress, uint256 tokenID);\r\n\r\n    // This is meant to check the game state of the NFT before the roll.\r\n    // There is no corresponding _preRollForPlayer, because the player will only be rolling to generate\r\n    // items outside of the context of a run.\r\n    function _preRollForNFT(address tokenAddress, uint256 tokenID) internal virtual {}\r\n    function _postRoll() internal virtual {}\r\n\r\n    /// @param blocksToAct Number of blocks that a player has to decide whether to accept their fate or re-roll. This parameter applies to every such decision point.\r\n    /// @param feeTokenAddress Address of ERC20 token which represents fees.\r\n    /// @param rollFee Fee for first roll on any action.\r\n    /// @param rerollFee Fee for re-roll on any action, assuming player doesn't want to accept their fate.\r\n    constructor(uint256 blocksToAct, address feeTokenAddress, uint256 rollFee, uint256 rerollFee) {\r\n        BlocksToAct = blocksToAct;\r\n        FeeToken = IERC20(feeTokenAddress);\r\n        RollFee = rollFee;\r\n        RerollFee = rerollFee;\r\n    }\r\n\r\n    function _checkNFTOwnership(address player, address tokenAddress, uint256 tokenID) internal view {\r\n        IERC721 nft = IERC721(tokenAddress);\r\n        if (nft.ownerOf(tokenID) != player) {\r\n            revert NFTNotOwnedByPlayer(player, tokenAddress, tokenID);\r\n        }\r\n    }\r\n\r\n    function rollForNFT(address tokenAddress, uint256 tokenID) public returns (uint256) {\r\n        _checkNFTOwnership(msg.sender, tokenAddress, tokenID);\r\n        _preRollForNFT(tokenAddress, tokenID);\r\n        FeeToken.safeTransferFrom(msg.sender, address(this), RollFee);\r\n        LastRollForNFT[tokenAddress][tokenID] = block.number;\r\n        emit NFTRoll(tokenAddress, tokenID);\r\n        _postRoll();\r\n        return block.number;\r\n    }\r\n\r\n    function _checkNFTDeadline(address tokenAddress, uint256 tokenID) internal view {\r\n        uint256 elapsed = block.number - LastRollForNFT[tokenAddress][tokenID];\r\n        if (elapsed > BlocksToAct) {\r\n            revert NFTDeadlineExceeded(tokenAddress, tokenID);\r\n        }\r\n    }\r\n\r\n    function _waitForTickForNFT(address tokenAddress, uint256 tokenID) internal view {\r\n        if (block.number <= LastRollForNFT[tokenAddress][tokenID]) {\r\n            revert WaitForNFTTick(tokenAddress, tokenID);\r\n        }\r\n    }\r\n\r\n    function _entropyForNFT(address tokenAddress, uint256 tokenID) internal returns (bytes32) {\r\n        _checkNFTDeadline(tokenAddress, tokenID);\r\n        _waitForTickForNFT(tokenAddress, tokenID);\r\n        bytes32 entropy = blockhash(LastRollForNFT[tokenAddress][tokenID]);\r\n        emit NFTEntropyUsed(tokenAddress, tokenID, entropy);\r\n        delete LastRollForNFT[tokenAddress][tokenID];\r\n        return entropy;\r\n    }\r\n\r\n    function rerollForNFT(address tokenAddress, uint256 tokenID) public returns (uint256) {\r\n        _checkNFTOwnership(msg.sender, tokenAddress, tokenID);\r\n        _checkNFTDeadline(tokenAddress, tokenID);\r\n        FeeToken.safeTransferFrom(msg.sender, address(this), RerollFee);\r\n        LastRollForNFT[tokenAddress][tokenID] = block.number;\r\n        emit NFTRoll(tokenAddress, tokenID);\r\n        _postRoll();\r\n        return block.number;\r\n    }\r\n}\r\n"
    },
    "src/data.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.13;\r\n\r\n/// @title Degen Trail stats\r\n/// @author Moonstream Engineering (engineering@moonstream.to)\r\n/// @notice This struct represents the stats of any NFT (wagons, items, etc.) that is used in The Degen Trail.\r\nstruct DegenTrailStats {\r\n    uint256 kind;\r\n    uint256 speed;\r\n    uint256 fight;\r\n    uint256 repair;\r\n    uint256 recovery;\r\n}\r\n"
    },
    "src/Game.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.13;\r\n\r\nimport {ERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\r\n\r\n/// @title Degen Trail game contract\r\n/// @author Moonstream Engineering (engineering@moonstream.to)\r\n///\r\n/// @notice This is the game contract for The Degen Trail, a fully on-chain degenerate homage to The Oregon\r\n/// Trail.\r\n// TODO(zomglings): Jackpot mechanic, with a corresponding tax on all burns. Might want to turn up the decimals\r\n// to mitigate the rounding effects integer division when imposing the tax.\r\ncontract DegenTrail is ERC20 {\r\n    uint256 private constant u8mask = 0xFF;\r\n    uint256 private constant u7mask = 0x7F;\r\n\r\n    /// @notice Maps (i,j)-indices (vertical then horizontal) to the state of the corresponding hex on the game board.\r\n    /// @notice State is encoded in binary. The layout of the state is: TTTE.\r\n    /// @notice E: The least significant bit is 1 if the hex has been explored and 0 otherwise.\r\n    /// @notice T: The 2^1, 2^2, and 2^3 bits form an integer representing the terrain type. It is an integer between 0 and 6 (inclusive). View the description of EnvironmentDescriptions to see the corresponding terrain type.\r\n    mapping(uint256 => mapping(uint256 => uint256)) public Hex;\r\n\r\n    /// @notice For each environment, lists the cumulative distribution function for terrains in that environment.\r\n    /// @dev Environments are: 0 - forest, 1 - prairie, 2 - river, 3 - arctic, 4 - marsh, 5 - badlands, 6 - hills\r\n    /// @dev Terrain types are: 0 - plain, 1 - forest, 2 - swamp, 3 - water, 4 - mountain, 5 - desert, 6 - ice\r\n    uint8[7][7] public EnvironmentDistributions = [\r\n        [0, 90, 98, 123, 128, 128, 128],\r\n        [90, 95, 100, 120, 120, 128, 128],\r\n        [0, 0, 8, 128, 128, 128, 128],\r\n        [0, 8, 8, 8, 28, 28, 128],\r\n        [5, 10, 108, 128, 128, 128, 128],\r\n        [18, 18, 18, 18, 28, 128, 128],\r\n        [0, 43, 43, 48, 128, 128, 128]\r\n    ];\r\n\r\n    constructor() ERC20(\"Supply\", \"SUPPLY\") {\r\n        // Mint initial SUPPLY supply to the deployer of this contract.\r\n        _mint(msg.sender, 1000000000);\r\n\r\n        // Reveal the first column of the game board.\r\n        uint256 prevBlockNumber = 0;\r\n        if (block.number > 0) {\r\n            prevBlockNumber = block.number - 1;\r\n        }\r\n        // Zero out the leading bit of the block hash, to prevent overflows when adding 31 * j.\r\n        uint256 startingEntropy = uint256(blockhash(prevBlockNumber)) << 1 >> 1;\r\n        for (uint256 j = 0; j < 100; j++) {\r\n            _explore(0, 2 * j, startingEntropy + (31 * j));\r\n        }\r\n    }\r\n\r\n    /// @notice The SUPPLY ERC20 token has 0 decimal places.\r\n    function decimals() public pure override returns (uint8) {\r\n        return 0;\r\n    }\r\n\r\n    /// @notice Burns the given amount from the SUPPLY held by msg.sender.\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /// @notice Burns all the SUPPLY held by msg.sender.\r\n    function incinerate() external {\r\n        _burn(msg.sender, balanceOf(msg.sender));\r\n    }\r\n\r\n    /// @notice Internal method that explores a hex and sets its state.\r\n    function _explore(uint256 i, uint256 j, uint256 entropy) internal {\r\n        uint256 env = environment(i);\r\n        uint8 maskedEntropy = uint8(entropy & u7mask);\r\n        if (maskedEntropy < EnvironmentDistributions[env][6]) {\r\n            // 1111\r\n            Hex[i][j] = 13;\r\n        } else if (maskedEntropy < EnvironmentDistributions[env][5]) {\r\n            // 1011\r\n            Hex[i][j] = 11;\r\n        } else if (maskedEntropy < EnvironmentDistributions[env][4]) {\r\n            // 1001\r\n            Hex[i][j] = 9;\r\n        } else if (maskedEntropy < EnvironmentDistributions[env][3]) {\r\n            // 0111\r\n            Hex[i][j] = 7;\r\n        } else if (maskedEntropy < EnvironmentDistributions[env][2]) {\r\n            // 0101\r\n            Hex[i][j] = 5;\r\n        } else if (maskedEntropy < EnvironmentDistributions[env][1]) {\r\n            // 0011\r\n            Hex[i][j] = 3;\r\n        } else {\r\n            // 0001\r\n            Hex[i][j] = 1;\r\n        }\r\n    }\r\n\r\n    /// @notice Describes the environment of a hex with the given i-coordinate.\r\n    function environment(uint256 i) public pure returns (uint256) {\r\n        return 3 * (i >> 5) % 7;\r\n    }\r\n\r\n    /// @notice Returns true if (i,j) is a valid coordinate for a hex on the game board.\r\n    /// @dev (i,j) is only a valid coordinate for a hex on the game board if i and j have the same parity and if j < 200.\r\n    /// @dev Predicate\r\n    function hexp(uint256 i, uint256 j) public pure returns (bool) {\r\n        if (j >= 200) {\r\n            return false;\r\n        }\r\n        return (i & 1) ^ (j & 1) == 0;\r\n    }\r\n\r\n    /// @notice Returns true if (i1,j1) and (i2,j2) are neighbors on the game board.\r\n    /// @dev Predicate\r\n    function neighborsp(uint256 i1, uint256 j1, uint256 i2, uint256 j2) public pure returns (bool) {\r\n        if (!hexp(i1, j1) || !hexp(i2, j2)) {\r\n            return false;\r\n        }\r\n        if (i1 == i2) {\r\n            if (j1 > j2) {\r\n                return j1 - j2 == 2;\r\n            } else {\r\n                return j2 - j1 == 2;\r\n            }\r\n        } else if (i1 > i2) {\r\n            if (i1 - i2 == 1) {\r\n                if (j1 > j2) {\r\n                    return j1 - j2 == 1;\r\n                } else {\r\n                    return j2 - j1 == 1;\r\n                }\r\n            }\r\n        } else {\r\n            if (i2 - i1 == 1) {\r\n                if (j1 > j2) {\r\n                    return j1 - j2 == 1;\r\n                } else {\r\n                    return j2 - j1 == 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /// @notice Returns the current state of the board for the hexes with the given indices.\r\n    /// @dev This method is provided for convenience. Another alternative to calling this method would be to\r\n    /// view the Hex mapping via a multicall contract.\r\n    function board(uint256[2][] memory indices) external view returns (uint256[3][] memory) {\r\n        uint256[3][] memory result = new uint256[3][](indices.length);\r\n        for (uint256 i = 0; i < indices.length; i++) {\r\n            result[i][0] = indices[i][0];\r\n            result[i][1] = indices[i][1];\r\n            result[i][2] = Hex[indices[i][0]][indices[i][1]];\r\n        }\r\n        return result;\r\n    }\r\n}\r\n"
    },
    "src/interfaces.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.13;\r\n\r\n/*\r\n * To regenerate this interface, run the following commands from the project root directory:\r\n * $ forge build\r\n * $ jq .abi out/Game.sol/DegenTrail.json | solface -annotations -name IDegenTrail\r\n */\r\n// Interface generated by solface: https://github.com/moonstream-to/solface\r\n// solface version: 0.2.3\r\n// Interface ID: 177fa301\r\ninterface IDegenTrail {\r\n    // structs\r\n\r\n    // events\r\n    event Approval(address owner, address spender, uint256 value);\r\n    event Transfer(address from, address to, uint256 value);\r\n\r\n    // functions\r\n    // Selector: 9e269ea7\r\n    function EnvironmentDistributions(uint256, uint256) external view returns (uint8);\r\n    // Selector: 9160cd57\r\n    function Hex(uint256, uint256) external view returns (uint256);\r\n    // Selector: dd62ed3e\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    // Selector: 095ea7b3\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    // Selector: 70a08231\r\n    function balanceOf(address account) external view returns (uint256);\r\n    // Selector: 4174d402\r\n    function board(uint256[2][] memory indices) external view returns (uint256[3][] memory);\r\n    // Selector: 42966c68\r\n    function burn(uint256 amount) external;\r\n    // Selector: 313ce567\r\n    function decimals() external pure returns (uint8);\r\n    // Selector: e3fc4210\r\n    function environment(uint256 i) external pure returns (uint256);\r\n    // Selector: 33c2e7c4\r\n    function hexp(uint256 i, uint256 j) external pure returns (bool);\r\n    // Selector: bbd1d251\r\n    function incinerate() external;\r\n    // Selector: 06fdde03\r\n    function name() external view returns (string memory);\r\n    // Selector: e41ab43c\r\n    function neighborsp(uint256 i1, uint256 j1, uint256 i2, uint256 j2) external pure returns (bool);\r\n    // Selector: 95d89b41\r\n    function symbol() external view returns (string memory);\r\n    // Selector: 18160ddd\r\n    function totalSupply() external view returns (uint256);\r\n    // Selector: a9059cbb\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    // Selector: 23b872dd\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    // errors\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n    error ERC20InvalidApprover(address approver);\r\n    error ERC20InvalidReceiver(address receiver);\r\n    error ERC20InvalidSender(address sender);\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n/*\r\n * To regenerate this interface, run the following commands from the project root directory:\r\n * $ forge build\r\n * $ jq .abi out/JackpotJunction.sol/JackpotJunction.json | solface -annotations -name IJackpotJunction\r\n */\r\n// Interface generated by solface: https://github.com/moonstream-to/solface\r\n// solface version: 0.2.3\r\n// Interface ID: 8a4933a8\r\ninterface IJackpotJunction {\r\n\t// structs\r\n\r\n\t// events\r\n\tevent ApprovalForAll(address account, address operator, bool approved);\r\n\tevent Award(address player, uint256 outcome, uint256 value);\r\n\tevent Roll(address player);\r\n\tevent TierUnlocked(uint256 itemType, uint256 terrainType, uint256 tier, uint256 poolID);\r\n\tevent TransferBatch(address operator, address from, address to, uint256[] ids, uint256[] values);\r\n\tevent TransferSingle(address operator, address from, address to, uint256 id, uint256 value);\r\n\tevent URI(string value, uint256 id);\r\n\r\n\t// functions\r\n\t// Selector: be59cce3\r\n\tfunction BlocksToAct() external view returns (uint256);\r\n\t// Selector: b870fe80\r\n\tfunction CostToReroll() external view returns (uint256);\r\n\t// Selector: 50b8aa92\r\n\tfunction CostToRoll() external view returns (uint256);\r\n\t// Selector: dd88fa7f\r\n\tfunction CurrentTier(uint256 , uint256 ) external view returns (uint256);\r\n\t// Selector: 44dcd143\r\n\tfunction EquippedBeasts(address ) external view returns (uint256);\r\n\t// Selector: 010c9b6e\r\n\tfunction EquippedBody(address ) external view returns (uint256);\r\n\t// Selector: e32d5690\r\n\tfunction EquippedCover(address ) external view returns (uint256);\r\n\t// Selector: cdf2f0ec\r\n\tfunction EquippedWheels(address ) external view returns (uint256);\r\n\t// Selector: 18ce0a4b\r\n\tfunction ImprovedOutcomesCumulativeMass(uint256 ) external view returns (uint256);\r\n\t// Selector: 9a0facc2\r\n\tfunction LastRollBlock(address ) external view returns (uint256);\r\n\t// Selector: 418145cf\r\n\tfunction UnmodifiedOutcomesCumulativeMass(uint256 ) external view returns (uint256);\r\n\t// Selector: 2852b71c\r\n\tfunction accept() external  returns (uint256, uint256, uint256);\r\n\t// Selector: 00fdd58e\r\n\tfunction balanceOf(address account, uint256 id) external view returns (uint256);\r\n\t// Selector: 4e1273f4\r\n\tfunction balanceOfBatch(address[] memory accounts, uint256[] memory ids) external view returns (uint256[] memory);\r\n\t// Selector: b390c0ab\r\n\tfunction burn(uint256 poolID, uint256 amount) external ;\r\n\t// Selector: 83ca4b6f\r\n\tfunction burnBatch(uint256[] memory poolIDs, uint256[] memory amounts) external ;\r\n\t// Selector: 289137a1\r\n\tfunction craft(uint256 poolID, uint256 numOutputs) external  returns (uint256 newPoolID);\r\n\t// Selector: 03f2f420\r\n\tfunction equip(uint256[] memory poolIDs) external ;\r\n\t// Selector: 3a134f78\r\n\tfunction genera(uint256 poolID) external pure returns (uint256 itemType, uint256 terrainType, uint256 tier);\r\n\t// Selector: b8f905c8\r\n\tfunction hasBonus(address degenerate) external view returns (bool bonus);\r\n\t// Selector: e985e9c5\r\n\tfunction isApprovedForAll(address account, address operator) external view returns (bool);\r\n\t// Selector: 3a259e6a\r\n\tfunction outcome(address degenerate, bool bonus) external view returns (uint256, uint256, uint256);\r\n\t// Selector: cd5e3c5d\r\n\tfunction roll() external ;\r\n\t// Selector: 2eb2c2d6\r\n\tfunction safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) external ;\r\n\t// Selector: f242432a\r\n\tfunction safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) external ;\r\n\t// Selector: ecefbad8\r\n\tfunction sampleImprovedOutcomesCumulativeMass(uint256 entropy) external view returns (uint256);\r\n\t// Selector: 6c08995d\r\n\tfunction sampleUnmodifiedOutcomeCumulativeMass(uint256 entropy) external view returns (uint256);\r\n\t// Selector: a22cb465\r\n\tfunction setApprovalForAll(address operator, bool approved) external ;\r\n\t// Selector: 01ffc9a7\r\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\t// Selector: b9c2edf7\r\n\tfunction unequip() external ;\r\n\t// Selector: 0e89341c\r\n\tfunction uri(uint256 ) external view returns (string memory);\r\n\r\n\t// errors\r\n\terror DeadlineExceeded();\r\n\terror ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\terror ERC1155InvalidApprover(address approver);\r\n\terror ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n\terror ERC1155InvalidOperator(address operator);\r\n\terror ERC1155InvalidReceiver(address receiver);\r\n\terror ERC1155InvalidSender(address sender);\r\n\terror ERC1155MissingApprovalForAll(address operator, address owner);\r\n\terror InsufficientItems(uint256 poolID);\r\n\terror InsufficientValue();\r\n\terror InvalidItem(uint256 poolID);\r\n\terror ReentrancyGuardReentrantCall();\r\n\terror RollInProgress();\r\n\terror WaitForTick();\r\n}\r\n"
    },
    "src/JackpotJunction.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.13;\r\n\r\nimport {ERC1155} from \"../lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\";\r\nimport {ReentrancyGuard} from \"../lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n/// @title Jackpot Junction game contract\r\n/// @author Moonstream Engineering (engineering@moonstream.to)\r\n///\r\n/// @notice This is the game contract for The Degen Trail: Jackpot Junction, a game in world of The Degen Trail.\r\ncontract JackpotJunction is ERC1155, ReentrancyGuard {\r\n    // Cumulative mass functions for probability distributions. Total mass for each distribution is 2^20 = 1048576.\r\n    /// Cumulative mass function for the unmodified distribution over outcomes.\r\n    uint256[5] public UnmodifiedOutcomesCumulativeMass = [\r\n        524288,\r\n        524288 + 408934,\r\n        524288 + 408934 + 104857,\r\n        524288 + 408934 + 104857 + 10487,\r\n        524288 + 408934 + 104857 + 10487 + 10\r\n    ];\r\n    /// Cumulative mass function for the improved distribution over outcomes.\r\n    uint256[5] public ImprovedOutcomesCumulativeMass = [\r\n        469283,\r\n        469283 + 408934,\r\n        469283 + 408934 + 154857,\r\n        469283 + 408934 + 154857 + 15487,\r\n        469283 + 408934 + 154857 + 15487 + 15\r\n    ];\r\n\r\n    /// How many blocks a player has to act (reroll/accept).\r\n    uint256 public BlocksToAct;\r\n\r\n    /// The block number of the last roll/re-roll by each player.\r\n    mapping(address => uint256) public LastRollBlock;\r\n\r\n    /// Cost (finest denomination of native token on the chain) to roll.\r\n    uint256 public CostToRoll;\r\n    /// Cost (finest denomination of native token on the chain) to reroll.\r\n    uint256 public CostToReroll;\r\n\r\n    /// Specifies the largest tier that has been unlocked for a given (itemType, terrainType) pair.\r\n    /// @notice Item types: 0 (wagon cover), 1 (wagon body), 2 (wagon wheel), 3 (beast)\r\n    /// @notice Terrain types: 0 (plain), 1 (forest), 2 (swamp), 3 (water), 4 (mountain), 5 (desert), 6 (ice)\r\n    /// @notice Encoding of ERC1155 pool IDs: tier*28 + terrainType*4 + itemType\r\n    /// @notice itemType => terrainType => tier\r\n    mapping(uint256 => mapping(uint256 => uint256)) public CurrentTier;\r\n\r\n    /// EquippedCover indicates the poolID of the cover that is currently equipped by the given player.\r\n    /// @notice The mapping is address(player) => poolID + 1.\r\n    /// @notice The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\r\n    mapping(address => uint256) public EquippedCover;\r\n    /// EquippedBody indicates the poolID of the body that is currently equipped by the given player.\r\n    /// @notice The mapping is address(player) => poolID + 1.\r\n    /// @notice The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\r\n    mapping(address => uint256) public EquippedBody;\r\n    /// EquippedWheels indicates the poolID of the wheels that are currently equipped by the given player.\r\n    /// @notice The mapping is address(player) => poolID + 1.\r\n    /// @notice The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\r\n    mapping(address => uint256) public EquippedWheels;\r\n    /// EquippedBeasts indicates the poolID of the beasts that are currently equipped by the given player.\r\n    /// @notice The mapping is address(player) => poolID + 1.\r\n    /// @notice The value stored is poolID + 1 so that 0 indicates that no item is currently equipped in the slot.\r\n    mapping(address => uint256) public EquippedBeasts;\r\n\r\n    /// Fired when a new tier is unlocked for the givem itemType and terrainType. Specifies the tier and\r\n    /// its pool ID.\r\n    event TierUnlocked(uint256 indexed itemType, uint256 indexed terrainType, uint256 indexed tier, uint256 poolID);\r\n    /// Fired when a player rolls (and rerolls).\r\n    event Roll(address indexed player);\r\n    /// Fired when a player accepts the outcome of a roll.\r\n    event Award(address indexed player, uint256 indexed outcome, uint256 value);\r\n\r\n    /// Signifies that the player is no longer able to act because too many blocks elapsed since their\r\n    /// last action.\r\n    error DeadlineExceeded();\r\n    /// Signifies that a player cannot take an action that requires them to be out of a roll because it\r\n    /// is too soon since they rolled. This error is raised when a player tries to equip or unequip items\r\n    /// while they are in the middle of a roll.\r\n    error RollInProgress();\r\n    /// This error is raised to signify that the player needs to wait for at least one more block to elapse.\r\n    error WaitForTick();\r\n    /// Signifies that the player has not provided enough value to perform the action.\r\n    error InsufficientValue();\r\n    /// Signifies that the player attempted to use an invalid item to perform a certain action.\r\n    error InvalidItem(uint256 poolID);\r\n    /// Signifies that the player does not have enough items in their possession to perform an action.\r\n    error InsufficientItems(uint256 poolID);\r\n\r\n    /// Creates a JackpotJunction game contract.\r\n    /// @param blocksToAct The number of blocks a player has to either reroll or accept the outcome of their current roll.\r\n    /// @param costToRoll The cost in the finest denomination of the native token on the chain to roll.\r\n    /// @param costToReroll The cost in the finest denomination of the native token on the chain to reroll.\r\n    constructor(uint256 blocksToAct, uint256 costToRoll, uint256 costToReroll)\r\n        ERC1155(\"https://github.com/moonstream-to/degen-trail\")\r\n    {\r\n        BlocksToAct = blocksToAct;\r\n        CostToRoll = costToRoll;\r\n        CostToReroll = costToReroll;\r\n\r\n        for (uint256 i = 0; i < 4; i++) {\r\n            for (uint256 j = 0; j < 7; j++) {\r\n                emit TierUnlocked(i, j, 0, 4 * j + i);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Allows the contract to receive the native token on its blockchain.\r\n    receive() external payable {}\r\n\r\n    function _enforceDeadline(address degenerate) internal view {\r\n        if (block.number > LastRollBlock[degenerate] + BlocksToAct) {\r\n            revert DeadlineExceeded();\r\n        }\r\n    }\r\n\r\n    function _enforceNotRolling(address degenerate) internal view {\r\n        if (block.number <= LastRollBlock[degenerate] + BlocksToAct) {\r\n            revert RollInProgress();\r\n        }\r\n    }\r\n\r\n    /// Returns the itemType, terrainType, and tier of a given pool ID.\r\n    function genera(uint256 poolID) public pure returns (uint256 itemType, uint256 terrainType, uint256 tier) {\r\n        tier = poolID / 28;\r\n        terrainType = (poolID % 28) / 4;\r\n        itemType = poolID % 4;\r\n    }\r\n\r\n    /// Returns true if the given player currently has a bonus applied to them from their equipped items and false otherwise.\r\n    function hasBonus(address degenerate) public view returns (bool bonus) {\r\n        bonus = false;\r\n\r\n        uint256 wagonCover = EquippedCover[degenerate];\r\n        uint256 wagonBody = EquippedBody[degenerate];\r\n        uint256 wheels = EquippedWheels[degenerate];\r\n        uint256 beastTrain = EquippedBeasts[degenerate];\r\n\r\n        if (wagonCover != 0 && wagonBody != 0 && wheels != 0 && beastTrain != 0) {\r\n            // Decrement each equipped item by 1 to get its pool ID.\r\n            wagonCover--;\r\n            wagonBody--;\r\n            wheels--;\r\n            beastTrain--;\r\n\r\n            uint256 terrainType;\r\n\r\n            uint256 currentItemType;\r\n            uint256 currentTier;\r\n            uint256 currentTerrainType;\r\n\r\n            (currentItemType, currentTerrainType, currentTier) = genera(wagonCover);\r\n            if (CurrentTier[currentItemType][currentTerrainType] == currentTier) {\r\n                bonus = true;\r\n            }\r\n            terrainType = currentTerrainType;\r\n\r\n            if (bonus) {\r\n                (currentItemType, currentTerrainType, currentTier) = genera(wagonBody);\r\n                if (CurrentTier[currentItemType][currentTerrainType] != currentTier || currentTerrainType != terrainType) {\r\n                    bonus = false;\r\n                }\r\n            }\r\n\r\n            if (bonus) {\r\n                (currentItemType, currentTerrainType, currentTier) = genera(wheels);\r\n                if (CurrentTier[currentItemType][currentTerrainType] != currentTier || currentTerrainType != terrainType) {\r\n                    bonus = false;\r\n                }\r\n            }\r\n\r\n            if (bonus) {\r\n                (currentItemType, currentTerrainType, currentTier) = genera(beastTrain);\r\n                if (CurrentTier[currentItemType][currentTerrainType] != currentTier || currentTerrainType != terrainType) {\r\n                    bonus = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Samples from unmodified distribution over outcomes.\r\n    function sampleUnmodifiedOutcomeCumulativeMass(uint256 entropy) public view returns (uint256) {\r\n        uint256 sample = entropy << 236 >> 236;\r\n        if (sample < UnmodifiedOutcomesCumulativeMass[0]) {\r\n            return 0;\r\n        } else if (sample < UnmodifiedOutcomesCumulativeMass[1]) {\r\n            return 1;\r\n        } else if (sample < UnmodifiedOutcomesCumulativeMass[2]) {\r\n            return 2;\r\n        } else if (sample < UnmodifiedOutcomesCumulativeMass[3]) {\r\n            return 3;\r\n        }\r\n        return 4;\r\n    }\r\n\r\n    /// Samples from bonus distribution over outcomes.\r\n    function sampleImprovedOutcomesCumulativeMass(uint256 entropy) public view returns (uint256) {\r\n        uint256 sample = entropy << 236 >> 236;\r\n        if (sample < ImprovedOutcomesCumulativeMass[0]) {\r\n            return 0;\r\n        } else if (sample < ImprovedOutcomesCumulativeMass[1]) {\r\n            return 1;\r\n        } else if (sample < ImprovedOutcomesCumulativeMass[2]) {\r\n            return 2;\r\n        } else if (sample < ImprovedOutcomesCumulativeMass[3]) {\r\n            return 3;\r\n        }\r\n        return 4;\r\n    }\r\n\r\n    /// Rolls or rerolls for the `msg.sender`, depending on whether or not whether `BlocksToAct` blocks\r\n    /// have elapsed since their last roll. If that number of blocks has elapsed, then the player is rolling\r\n    /// and must pay `CostToRoll`. Otherwise, the player is rerolling and must be `CostToReroll`.\r\n    function roll() external payable {\r\n        uint256 requiredFee = CostToRoll;\r\n        if (block.number <= LastRollBlock[msg.sender] + BlocksToAct) {\r\n            requiredFee = CostToReroll;\r\n        }\r\n\r\n        if (msg.value < requiredFee) {\r\n            revert InsufficientValue();\r\n        }\r\n\r\n        LastRollBlock[msg.sender] = block.number;\r\n\r\n        emit Roll(msg.sender);\r\n    }\r\n\r\n    function _entropy(address degenerate) internal view virtual returns (uint256) {\r\n        return uint256(keccak256(abi.encode(blockhash(LastRollBlock[degenerate]), degenerate)));\r\n    }\r\n\r\n    /// @notice If `outcome` is called at least one block after the player last rolled and before the players\r\n    /// block deadline expires, it shows the outcome of the player's last roll.\r\n    /// @param degenerate The address of the player\r\n    /// @param bonus This boolean signifies whether the outcome should be sampled from the unmodified or the improved outcome distribution\r\n    /// @return entropy The randomness that was used to determine the outcome of the player's last roll\r\n    /// @return _outcome The outcome of the player's last roll - this is 0, 1, 2, 3, or 4 and represents an index in either `UnmodifiedOutcomesCumulativeMass` or `ImprovedOutcomesCumulativeMass` (depending on whether a bonus was applied)\r\n    /// @return reward This represents a numerical parameter representing the reward that the player should receive. If the `_outcome` was `0`, this value is irrelevant and should be ignored. If the `_outcome` was `1`, signifying that the player will receive an item, this value is the ERC1155 `tokenID` of the item that will be transferred to the player if they accept the outcome, if the `_outcome` was `2`, `3`, or `4`, this value is the amount of native tokens that will be transferred to the player if they accept the outcome.\r\n    function outcome(address degenerate, bool bonus) public view returns (uint256, uint256, uint256) {\r\n        if (block.number <= LastRollBlock[degenerate]) {\r\n            revert WaitForTick();\r\n        }\r\n\r\n        _enforceDeadline(degenerate);\r\n\r\n        // entropy layout:\r\n        // |- 118 bits -|- 118 bits -|- 20 bits -|\r\n        //    item type  terrain type   outcome\r\n        uint256 entropy = _entropy(degenerate);\r\n\r\n        uint256 _outcome;\r\n        if (bonus) {\r\n            _outcome = sampleImprovedOutcomesCumulativeMass(entropy);\r\n        } else {\r\n            _outcome = sampleUnmodifiedOutcomeCumulativeMass(entropy);\r\n        }\r\n\r\n        uint256 value;\r\n\r\n        if (_outcome == 1) {\r\n            uint256 terrainType = (entropy << 118 >> 138) % 7;\r\n            uint256 itemType = (entropy >> 138) % 4;\r\n            value = 4 * terrainType + itemType;\r\n        } else if (_outcome == 2) {\r\n            value = CostToRoll + (CostToRoll >> 1);\r\n            if (value > address(this).balance >> 6) {\r\n                value = address(this).balance >> 6;\r\n            }\r\n        } else if (_outcome == 3) {\r\n            value = address(this).balance >> 6;\r\n        } else if (_outcome == 4) {\r\n            value = address(this).balance >> 1;\r\n        }\r\n\r\n        return (entropy, _outcome, value);\r\n    }\r\n\r\n    function _award(uint256 _outcome, uint256 value) internal {\r\n        if (_outcome == 1) {\r\n            _mint(msg.sender, value, 1, \"\");\r\n        } else if (_outcome == 2 || _outcome == 3 || _outcome == 4) {\r\n            payable(msg.sender).transfer(value);\r\n        }\r\n\r\n        emit Award(msg.sender, _outcome, value);\r\n    }\r\n\r\n    function _clearRoll() internal {\r\n        LastRollBlock[msg.sender] = 0;\r\n    }\r\n\r\n    /// If a player calls this method at least one block after they last rolled and before their block deadline expires,\r\n    /// it accepts the outcome of their last roll and transfers the corresponding reward to their account.\r\n    /// @return entropy The randomness that was used to determine the outcome of the player's last roll\r\n    /// @return _outcome The outcome of the player's last roll - this is 0, 1, 2, 3, or 4 and represents an index in either `UnmodifiedOutcomesCumulativeMass` or `ImprovedOutcomesCumulativeMass` (depending on whether a bonus was applied)\r\n    /// @return reward This represents a numerical parameter representing the reward that the player should receive. If the `_outcome` was `0`, this value is irrelevant and should be ignored. If the `_outcome` was `1`, signifying that the player will receive an item, this value is the ERC1155 `tokenID` of the item that will be transferred to the player if they accept the outcome, if the `_outcome` was `2`, `3`, or `4`, this value is the amount of native tokens that will be transferred to the player if they accept the outcome.\r\n    function accept() external nonReentrant returns (uint256, uint256, uint256) {\r\n        // The call to outcome() enforces the following constraints:\r\n        // - At least one block has passed after the player rolled.\r\n        // - The player last rolled at most BlocksToAct blocks ago.\r\n        (uint256 entropy, uint256 _outcome, uint256 value) = outcome(msg.sender, hasBonus(msg.sender));\r\n\r\n        _award(_outcome, value);\r\n        _clearRoll();\r\n        return (entropy, _outcome, value);\r\n    }\r\n\r\n    function equip(uint256[] calldata poolIDs) external nonReentrant {\r\n        _enforceNotRolling(msg.sender);\r\n\r\n        for (uint256 i = 0; i < poolIDs.length; i++) {\r\n            (uint256 itemType,,) = genera(poolIDs[i]);\r\n            if (itemType == 0) {\r\n                uint256 currentPoolID;\r\n                if (EquippedCover[msg.sender] != 0) {\r\n                    currentPoolID = EquippedCover[msg.sender] - 1;\r\n                    _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \"\");\r\n                }\r\n                _safeTransferFrom(msg.sender, address(this), poolIDs[i], 1, \"\");\r\n                EquippedCover[msg.sender] = poolIDs[i] + 1;\r\n            } else if (itemType == 1) {\r\n                uint256 currentPoolID;\r\n                if (EquippedBody[msg.sender] != 0) {\r\n                    currentPoolID = EquippedBody[msg.sender] - 1;\r\n                    _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \"\");\r\n                }\r\n                _safeTransferFrom(msg.sender, address(this), poolIDs[i], 1, \"\");\r\n                EquippedBody[msg.sender] = poolIDs[i] + 1;\r\n            } else if (itemType == 2) {\r\n                uint256 currentPoolID;\r\n                if (EquippedWheels[msg.sender] != 0) {\r\n                    currentPoolID = EquippedWheels[msg.sender] - 1;\r\n                    _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \"\");\r\n                }\r\n                _safeTransferFrom(msg.sender, address(this), poolIDs[i], 1, \"\");\r\n                EquippedWheels[msg.sender] = poolIDs[i] + 1;\r\n            } else if (itemType == 3) {\r\n                uint256 currentPoolID;\r\n                if (EquippedBeasts[msg.sender] != 0) {\r\n                    currentPoolID = EquippedBeasts[msg.sender] - 1;\r\n                    _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \"\");\r\n                }\r\n                _safeTransferFrom(msg.sender, address(this), poolIDs[i], 1, \"\");\r\n                EquippedBeasts[msg.sender] = poolIDs[i] + 1;\r\n            } else {\r\n                // If you end up in this branch, there's a bug in \"genera\".\r\n                revert InvalidItem(poolIDs[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function unequip() external nonReentrant {\r\n        _enforceNotRolling(msg.sender);\r\n\r\n        uint256 currentPoolID;\r\n        if (EquippedCover[msg.sender] != 0) {\r\n            currentPoolID = EquippedCover[msg.sender] - 1;\r\n            _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \"\");\r\n            delete EquippedCover[msg.sender];\r\n        }\r\n\r\n        if (EquippedBody[msg.sender] != 0) {\r\n            currentPoolID = EquippedBody[msg.sender] - 1;\r\n            _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \"\");\r\n            delete EquippedBody[msg.sender];\r\n        }\r\n\r\n        if (EquippedWheels[msg.sender] != 0) {\r\n            currentPoolID = EquippedWheels[msg.sender] - 1;\r\n            _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \"\");\r\n            delete EquippedWheels[msg.sender];\r\n        }\r\n\r\n        if (EquippedBeasts[msg.sender] != 0) {\r\n            currentPoolID = EquippedBeasts[msg.sender] - 1;\r\n            _safeTransferFrom(address(this), msg.sender, currentPoolID, 1, \"\");\r\n            delete EquippedBeasts[msg.sender];\r\n        }\r\n    }\r\n\r\n    function craft(uint256 poolID, uint256 numOutputs) external nonReentrant returns (uint256 newPoolID) {\r\n        if (balanceOf(msg.sender, poolID) < 1 * numOutputs) {\r\n            revert InsufficientItems(poolID);\r\n        }\r\n\r\n        newPoolID = poolID + 28;\r\n\r\n        _burn(msg.sender, poolID, 1 * numOutputs);\r\n        _mint(msg.sender, newPoolID, numOutputs, \"\");\r\n\r\n        (uint256 itemType, uint256 terrainType, uint256 tier) = genera(newPoolID);\r\n        if (CurrentTier[itemType][terrainType] < tier) {\r\n            CurrentTier[itemType][terrainType] = tier;\r\n            emit TierUnlocked(itemType, terrainType, tier, newPoolID);\r\n        }\r\n    }\r\n\r\n    function burn(uint256 poolID, uint256 amount) external {\r\n        _burn(msg.sender, poolID, amount);\r\n    }\r\n\r\n    function burnBatch(uint256[] memory poolIDs, uint256[] memory amounts) external {\r\n        _burnBatch(msg.sender, poolIDs, amounts);\r\n    }\r\n}\r\n"
    },
    "src/nfts.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.13;\r\n\r\nimport {ERC721Enumerable} from \"../lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport {ERC721} from \"../lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\";\r\n\r\nimport {PlayerBandit} from \"./Bandit.sol\";\r\nimport {DegenTrailStats} from \"./data.sol\";\r\nimport {IDegenTrail} from \"./interfaces.sol\";\r\n\r\n/// @title Degen Trail base NFT contract\r\n/// @author Moonstream Engineering (engineering@moonstream.to)\r\ncontract DegenTrailNFT is ERC721, ERC721Enumerable, PlayerBandit {\r\n    /// @dev Mask for raw recovery stat: least significant 54 bits\r\n    uint256 public constant recoveryMask = 2 ^ 55 - 1;\r\n    /// @dev Mask for raw repair stat: next 54 bits\r\n    uint256 public constant repairMask = recoveryMask << 54;\r\n    /// @dev Mask for raw fight stat: next 54 bits\r\n    uint256 public constant fightMask = repairMask << 54;\r\n    /// @dev Mask for raw speed stat: next 54 bits\r\n    uint256 public constant speedMask = fightMask << 54;\r\n    /// @dev Mask for raw kind stat: most significant 40 bits\r\n    uint256 public constant kindMask = speedMask << 54;\r\n\r\n    /// @notice Stats for each NFT: tokenID => stats\r\n    /// @dev For a token which does not exit, the stats are 0\r\n    mapping(uint256 => DegenTrailStats) public stats;\r\n    IDegenTrail public game;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 blocksToAct,\r\n        address gameAddress,\r\n        uint256 rollFee,\r\n        uint256 rerollFee\r\n    ) ERC721(_name, _symbol) PlayerBandit(blocksToAct, gameAddress, rollFee, rerollFee) {\r\n        game = IDegenTrail(gameAddress);\r\n    }\r\n\r\n    /// @dev Override needed because ERC721Enumerable itself inherits from ERC721\r\n    function _update(address to, uint256 tokenId, address auth)\r\n        internal\r\n        override(ERC721, ERC721Enumerable)\r\n        returns (address)\r\n    {\r\n        return super._update(to, tokenId, auth);\r\n    }\r\n\r\n    /// @dev Override needed because ERC721Enumerable itself inherits from ERC721\r\n    function _increaseBalance(address account, uint128 value) internal override(ERC721, ERC721Enumerable) {\r\n        super._increaseBalance(account, value);\r\n    }\r\n\r\n    /// @dev Override needed because ERC721Enumerable itself inherits from ERC721\r\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /// @notice Burns all SUPPLY held by this contract.\r\n    function _postRoll() internal override {\r\n        game.incinerate();\r\n    }\r\n\r\n    /// @dev Subclasses should override this to implement their desired post-processing to raw stat generation.\r\n    /// @dev For example, a subclass might want to restruct to fewer than 2^40 - 1 kinds, or might want to limit the speed, etc.\r\n    function _prepareStats(uint256 kindRaw, uint256 speedRaw, uint256 fightRaw, uint256 repairRaw, uint256 recoveryRaw)\r\n        internal\r\n        pure\r\n        virtual\r\n        returns (uint256 kind, uint256 speed, uint256 fight, uint256 repair, uint256 recovery)\r\n    {\r\n        kind = kindRaw;\r\n        speed = speedRaw;\r\n        fight = fightRaw;\r\n        repair = repairRaw;\r\n        recovery = recoveryRaw;\r\n    }\r\n\r\n    /// @dev Stats are generated from the hash of the concatenation of the player's entropy and address. The resulting 256-bit integer\r\n    /// is then split into:\r\n    /// @dev |- kind: 40 bits -|- speed: 54 bits -|- fight: 54 bits -|- repair: 54 bits -|- recovery: 54 bits -|\r\n    function generateStats(address player, bytes32 entropy)\r\n        public\r\n        pure\r\n        returns (uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        uint256 rng = uint256(keccak256(abi.encode(entropy, player)));\r\n        return (\r\n            (rng & kindMask) >> 216,\r\n            (rng & speedMask) >> 162,\r\n            (rng & fightMask) >> 108,\r\n            (rng & recoveryMask) >> 54,\r\n            rng & repairMask\r\n        );\r\n    }\r\n\r\n    /// @notice Assuming the given player has rolled or rerolled for entropy and the current block is before\r\n    /// the block deadline, and that the roll was made more than a block ago, this function returns the\r\n    /// stats of the NFT that the player would mint.\r\n    /// @notice The stats are returned in the order: kind, speed, fight, repair, recovery.\r\n    function simulateMint(address player) public view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        _checkPlayerDeadline(player);\r\n        _waitForTickForPlayer(player);\r\n        bytes32 entropy = blockhash(LastRollForPlayer[player]);\r\n        (uint256 kindRaw, uint256 speedRaw, uint256 fightRaw, uint256 repairRaw, uint256 recoveryRaw) =\r\n            generateStats(player, entropy);\r\n        return _prepareStats(kindRaw, speedRaw, fightRaw, repairRaw, recoveryRaw);\r\n    }\r\n\r\n    /// @notice Mints an NFT for the caller, assuming they have rolled for NFT stats and their roll has not expired.\r\n    function mint() external returns (uint256 kind, uint256 speed, uint256 fight, uint256 repair, uint256 recovery) {\r\n        bytes32 entropy = _entropyForPlayer(msg.sender);\r\n        uint256 tokenID = totalSupply() + 1;\r\n        _mint(msg.sender, tokenID);\r\n        (kind, speed, fight, repair, recovery) = generateStats(msg.sender, entropy);\r\n        (kind, speed, fight, repair, recovery) = _prepareStats(kind, speed, fight, repair, recovery);\r\n        stats[tokenID] = DegenTrailStats(kind, speed, fight, repair, recovery);\r\n    }\r\n\r\n    function _metadataName(uint256 tokenID, DegenTrailStats memory stat)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (string memory)\r\n    {\r\n        return string(abi.encodePacked(tokenID));\r\n    }\r\n\r\n    function _metadataKind(uint256 kind) internal view virtual returns (string memory) {\r\n        return string(abi.encodePacked(kind));\r\n    }\r\n\r\n    function metadataJSONBytes(uint256 tokenID) public view returns (bytes memory) {\r\n        DegenTrailStats memory stat = stats[tokenID];\r\n        return abi.encodePacked(\r\n            '{\"name\": \"',\r\n            _metadataName(tokenID, stat),\r\n            '\",\"kind\":',\r\n            _metadataKind(stat.kind),\r\n            ',\"speed\":',\r\n            stat.speed,\r\n            ',\"fight\":',\r\n            stat.fight,\r\n            ',\"repair\":',\r\n            stat.repair,\r\n            ',\"recovery\":',\r\n            stat.recovery,\r\n            \"}\"\r\n        );\r\n    }\r\n\r\n    function metadataJSON(uint256 tokenID) external view returns (string memory) {\r\n        return string(metadataJSONBytes(tokenID));\r\n    }\r\n\r\n    function tokenURI(uint256 tokenID) public view override returns (string memory) {\r\n        return string(abi.encodePacked(\"data:application/json;\", metadataJSONBytes(tokenID)));\r\n    }\r\n}\r\n"
    },
    "src/YourContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n// Useful for debugging. Remove when deploying to a live network.\r\n// import \"hardhat/console.sol\";\r\n\r\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * A smart contract that allows changing a state variable of the contract and tracking the changes\r\n * It also allows the owner to withdraw the Ether in the contract\r\n * @author BuidlGuidl\r\n */\r\ncontract YourContract {\r\n\t// State Variables\r\n\taddress public immutable owner;\r\n\tstring public greeting = \"Building Unstoppable Apps!!!\";\r\n\tbool public premium = false;\r\n\tuint256 public totalCounter = 0;\r\n\tmapping(address => uint) public userGreetingCounter;\r\n\r\n\t// Events: a way to emit log statements from smart contract that can be listened to by external parties\r\n\tevent GreetingChange(\r\n\t\taddress indexed greetingSetter,\r\n\t\tstring newGreeting,\r\n\t\tbool premium,\r\n\t\tuint256 value\r\n\t);\r\n\r\n\t// Constructor: Called once on contract deployment\r\n\t// Check packages/hardhat/deploy/00_deploy_your_contract.ts\r\n\tconstructor(address _owner) {\r\n\t\towner = _owner;\r\n\t}\r\n\r\n\t// Modifier: used to define a set of rules that must be met before or after a function is executed\r\n\t// Check the withdraw() function\r\n\tmodifier isOwner() {\r\n\t\t// msg.sender: predefined variable that represents address of the account that called the current function\r\n\t\trequire(msg.sender == owner, \"Not the Owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Function that allows anyone to change the state variable \"greeting\" of the contract and increase the counters\r\n\t *\r\n\t * @param _newGreeting (string memory) - new greeting to save on the contract\r\n\t */\r\n\tfunction setGreeting(string memory _newGreeting) public payable {\r\n\t\t// Print data to the hardhat chain console. Remove when deploying to a live network.\r\n\t\t// console.log(\r\n\t\t// \t\"Setting new greeting '%s' from %s\",\r\n\t\t// \t_newGreeting,\r\n\t\t// \tmsg.sender\r\n\t\t// );\r\n\r\n\t\t// Change state variables\r\n\t\tgreeting = _newGreeting;\r\n\t\ttotalCounter += 1;\r\n\t\tuserGreetingCounter[msg.sender] += 1;\r\n\r\n\t\t// msg.value: built-in global variable that represents the amount of ether sent with the transaction\r\n\t\tif (msg.value > 0) {\r\n\t\t\tpremium = true;\r\n\t\t} else {\r\n\t\t\tpremium = false;\r\n\t\t}\r\n\r\n\t\t// emit: keyword used to trigger an event\r\n\t\temit GreetingChange(msg.sender, _newGreeting, msg.value > 0, msg.value);\r\n\t}\r\n\r\n\t/**\r\n\t * Function that allows the owner to withdraw all the Ether in the contract\r\n\t * The function can only be called by the owner of the contract as defined by the isOwner modifier\r\n\t */\r\n\tfunction withdraw() public isOwner {\r\n\t\t(bool success, ) = owner.call{ value: address(this).balance }(\"\");\r\n\t\trequire(success, \"Failed to send Ether\");\r\n\t}\r\n\r\n\t/**\r\n\t * Function that allows the contract to receive ETH\r\n\t */\r\n\treceive() external payable {}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}